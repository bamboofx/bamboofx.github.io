[
{
	"uri": "https://bamboofx.github.io/ai-with-python/",
	"title": "AI with Python (Prateek Joshi)",
	"tags": [],
	"description": "",
	"content": "Bắt đầu đọc và tìm hiểu về Python và dịch cuốn sách Artificial Intelligence with Python của Prateek Joshi. Trước đây mình đã tự học nhiều ngôn ngữ lập trình khác nhau và đa phần đều là script : Action Script, Javascript\u0026hellip; từ cỡ hơn 10 năm trước và các ngôn ngữ \u0026ldquo;chính thống :D\u0026rdquo; hơn như: * C và C++ : cái này học từ thời đi học hên xui thì nhớ được gì thì nhớ và để lập trình arduino cơ bản Java để phát triển android app,C# (để làm Unity) và bây giờ là bắt đầu với Python từ con số 0: Trước giờ khi học một ngôn ngữ lập trình mới mình thường lên google và search 1 cuốn ebook viết về nó (Action scripts Cookbook\u0026hellip; java for android developer \u0026hellip;.) và thường là mình sẽ dịch cuốn đó ( dịch được bao nhiêu thì dịch vừa dịch vừa học), dịch theo kiểu google translate nên ban đầu dịch cũng chẳng hiểu gì cả, sau đó nếu có time rảnh thì ngồi edit lại những cái đã dịch còn không thì thôi ^_^. Và giờ là cuốn AI with Python\nCái này là mình vừa học vừa dịch nên có chỗ nào sai cũng kệ mẹ nó nhé Blog này là cá nhân nên thích thì cứ nhích nhẹ.  Download Source code\nChú ý: * Folder data trong chương 10 phần xử lý ngôn ngữ tự nhiên. vì mình chuyển sang xử lý ngôn ngữ tiếng việt nên lấy dữ liệu tại trang github của VNTC, các bạn có thể lên trang github của tác giả để download:https://github.com/duyvuleo/VNTC * Trong chương 12: có một số file wave mình tự thu và đã xóa rồi nên các bạn tự thu âm lại nhé * Trong chương 13: Có một số video mình download trên mạng, vì vấn đề bản quyền nên đã xóa (mặc dù cuốn sách này cũng down trên mạng :D)  \r\r "
},
{
	"uri": "https://bamboofx.github.io/numpy/",
	"title": "NumPy cơ bản",
	"tags": [],
	"description": "",
	"content": " NumPyGuide quickstartNumPy cơ bản trong Python \u0026nbsp;\nLời nói đầu\nNumPy là một thư viện không thể thiếu khi ta làm việc với mảng trong Python. NumPy là viết tắt của từ Nummerical Python. Trong numPy chiều của array được gọi là axes và số chiều gọi là rank\nTrước khi đọc về numPy bạn cần phải cài đặt python và package numPy. Nhanh nhất là cài pycharm vào settings-\u0026gt; cài package numPy\nNhững thứ cơ bản\nVề cơ bản dễ hiểu thì NumPy chính là một mảng đa chiều đồng nhất. Nó là một bảng gồm các thành phần (thường là số), và có cùng định dạng, được chỉ định các mục bởi số nguyên dương. Trong Numpy các chiều được gọi là axes.\nVí dụ . ta có 1 tọa độ của một điểm trong không gian 3D [1,2,1] có 1 trục(axis). Trục này có 3 thành phần trên nó nên ta nói nó có độ dài là 3. Ta có ví dụ khác:\n[[1.,0.,0.],\n[0.,1.,2.]]\n ở ví dụ này ta có một array gồm 2 trục(axes). trục đầu tieen có độ dài là 2 và trục thứ 2 có độ dài là 3.\nNumPy array class được gọi là ndarrray. chú ý numpy.array không giống với array.array trong Python Lybrary vì array.array chỉ có 1 chiều. Những thuộc tính quan trọng nhất trong ndarray object là:\nndarray.ndim:\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;số các trục(axes) hay còn gọi là số chiều của array ndarray.shape: đây là chiều của array. Đây là 1 số nguyên tuple ( số tuple được biểu diễn dưới dạng (1,2) cơ bản nó giống array.array nhưng không thể thêm hay loại bỏ thành phần) chỉ ra các chiều array vd shape(n,m) đây là một matrix có n hàng và m cột ndarray.size: Tổng số thành phần có trong numPy.array. Nó cũng bằng tổng của 2 số có trong shape() ndarrray.dtype: Đây là số để định dạng các thành phần trong array. nó nhận tất cả các giá trị dtype có trong Python và ngoài ra numPy cũng có một số định dạng riêng như numpy.int32,numpy.int16,numpy.float64. ndarray.itemsize: Đây là size dưới dạng bytes của mỗi element của array. Ví dụ một array có định dạng của thành phần là float64 thì nó có itemsize=8(=64/8). trong khi số phức có itemsize =4 complex32(32/8=4). Số này cũng tương đương với giá trị cảu ndarray.dtype.itemsize ndarray.data: Bộ đệm chứa các thành phần thực sự của array. Bình thưởng chúng ta không cần sử dụng thuộc tính này bởi vì chúng ta sẽ truy cập vào các thành phần trong array sử dụng index.  \u0026nbsp;\nimport numpy as npdef mprint(str):print(\"x\"*30,str,\"x\"*30)mprint(\"Cơ bản về về Numpy:\")mprint(\"Tạo mảng một chiều từ list\")a = np.array([1, 2, 3])print(type(a)) #\u0026lt;class 'numpy.ndarray'\u0026gt;print(a.shape) #(3,)a[0] = 5print(a) #[5 2 3]b = np.array([[1, 2, 3], [4, 5, 6]])print(b.size) #6print(b)# Tạo mảng từ khoảng cho trướcu = np.arange(3.0)print(u) #[0. 1. 2.]v = np.arange(3, 7)print(v) #[3 4 5 6]\n\u0026nbsp;\nMột lỗi thường gặp trong khi khởi tạo numPy\na=np.array(1,2,3) # =\u0026gt; Sai\na=np.array([1,2,3]) # =\u0026gt; Đúng\n \u0026nbsp;\nThường thì các thành phần trong một array không xác định, nhưng size thì phải biết trước. Vì thế NumPy đưa cho chúng ta một vài hàm để tạo mảng\n# np.zeros tạo ma trận số 0 với shape(số cột,số hàng)a = np.zeros((5, 3))print(a)#[[0. 0. 0.]# [0. 0. 0.]# [0. 0. 0.]# [0. 0. 0.]# [0. 0. 0.]]#np.ones tạo mảng 2 chiều số 1 tương tự zerosb = np.ones((5, 2))# np.full() tạo mảng hằng số tham số tương tự như trên với shape gồm shape(số hàng,số cột), và tham số thứ 2 là hằng số cần tạoc = np.full((3, 5), 3)print(c)# [[3 3 3 3 3]# [3 3 3 3 3]# [3 3 3 3 3]]#np.eye(N,M,k) tạo ma trận chéo với N hàng và M cột, nếu không gán giá trị M thì mặc định M sẽ = N, tham số k (tùy chọn, mặc định là 0) là chỉ số đường chéod = np.eye(5)print(d)#[[1. 0. 0. 0. 0.]# [0. 1. 0. 0. 0.]# [0. 0. 1. 0. 0.]# [0. 0. 0. 1. 0.]# [0. 0. 0. 0. 1.]]print(\"-\"*45)# np.random.random((N.M)) Tạo ma trận ngẫu nhiên với N hàng M cột, với giá trị ngẫu nhiên từ 0-\u0026gt;1e=np.random.random((2,3))print(e)#[[0.67471134 0.96878567 0.13359926]# [0.98475084 0.7250046 0.00370332]]print(np.empty((2,3)),\"Tạo mảng với np.empty cũng tương tự như với np.random.random\")# Để tạo một dãy số NumPy có một hàm tương tự với range trong Python là np.arange, nó trả về một array thay vì là một list số nguyên như rangeprint(np.arange(10,30,5),\"Tạo mảng từ 10 - tới 30 với số bước là 5\")print(np.arange(0,3,0.3),\" np.arange cũng chấp nhận giá trị là số float\")# Khi dùng float làm tham số cho arange. Nó thường tạo ra một dãy số không thể xác định nên ta thường sử dụng thêm np.linspace để mặc định số phần tử được tạo ra thay vì số bướcprint(np.linspace(0,2,9),\"np.linspace(0,2,9) Tạo ra 9 phần tử là số float từ 0-2\")print(np.linspace(0,np.pi,180),\"hoặc lấy số điểm trong 1 hình tròn\")\n \u0026nbsp;\nCác phép tính cơ bản trong NumPy\nx = np.array([[1, 2], [3, 4]], dtype=np.float64)y = np.array([[5, 6], [7, 8]], dtype=np.float64)print(\"ma trận x:\",x)print(\"ma trận y:\",y)print(np.add(x, y) , \"phép cộng\")print(np.subtract(x, y),\"phép trừ\")print(np.divide(x, 2),\"phép chia mảng 1 cho 2 \")print(np.divide(x, y),\"phép chia 2 mảng\")print(np.multiply(x, y),\"phép nhân 2 mảng\")print(np.sqrt(x),\"phép khai căn trên 1 mảng \")print(np.sqrt((x,y)),\"phép khai căn trên 2 mảng \")mprint(\" Phép toán trên hàng và cột \")print(np.sum(x),\" Tổng các giá trị trong ma trận x\")print(x.T,\"phép chuyển vị ma trận x\")mprint(\"Phép toán nhân ma trận: Tích trong (inner Product)\")x = np.array([[1, 2], [3, 4]])y = np.array([[5, 6], [7, 8]])v = np.array([9, 10])w = np.array([11, 12])d = np.array([3, 4])print(\"Ma trận x:\\n\",x)print(\"Ma trận y:\\n\",y)print(\"Ma trận v:\\n\",v)print(\"Ma trận w:\\n\",w)print(\"Ma trận d:\\n\",d)print(np.dot(v, w),\"= 9*11+10*12\")print(np.matmul(x, v),\"= [9*1+10*2,9*3+10*4]\")print(np.dot(v, d),\" = 9*3+10*4\")print(np.matmul(x, y),\"= [[5*1+7*2,6*1+8*2],[5*3+7*4,6*3+8*4]]\")print(np.multiply(x, y),\"= [[1*5,2*6],[3*7+8*4]]\")\n \u0026nbsp;\n# Một vài phép toán giống như là += hay*= thường thay đổi các thành phần trong array chứ không tạo một array mới\na = np.ones((2,3), dtype=int)b = np.random.random((2,3))a *= 3print(a)#[[3, 3, 3],# [3, 3, 3]]b += aprint(b)#[[ 3.417022 , 3.72032449, 3.00011437],# [ 3.30233257, 3.14675589, 3.09233859]]try:a+=bexcept TypeError:print(\"ta không thể dùng thế này a += b, vì b là số float không tự động chuyển thành số nguyên nên sẽ báo lỗi TypeError\")#TypeError: Cannot cast ufunc add output from dtype('float64') to dtype('int64') with casting rule 'same_kind'\n# Khi ta thực hiên phép toán trên các array với các định dạng khác nhau thì định dạng ở kết quả sẽ tự động lấy giá trị là các định dạng có tính chi tiết hơna = np.ones(3, dtype=np.int32)b = np.linspace(0,np.pi,3)print(b.dtype.name)#'float64'c = a+bprint(c)#[ 1. , 2.57079633, 4.14159265])print(c.dtype.name)#'float64'd = np.exp(c*1j)print(d)#[ 0.54030231+0.84147098j, -0.84147098+0.54030231j,# -0.54030231-0.84147098j]print(d.dtype.name)# complex128#Một vài phép tính thực hiện trong các phần tử của array như sum(), hay lấy min,maxa = np.random.random((2,3))print(a.sum())#2.5718191614547998print(a.min())#0.1862602113776709print(a.max())#0.6852195003967595#Mặc định là những phép toán trên sẽ tính toán tất cả các phần tử của array không cần biết định dạng của nó là gì. Nhưng chúng ta cũng có thể chỉ định# nó tính toán theo hàng hoặc cột của arrayb=np.arange(12).reshape(3,4)print(b.sum(axis=0),\"= 1 array tính tổng trên mỗi cột\")print(b.min(axis=1),\"= 1 array số nhỏ nhất thuộc mỗi hàng \")print(b.cumsum(axis=1),\"= 1 array giữ nguyên định dạng với mỗi hàng được tính lũy tiến\")\n \u0026nbsp;\nTrong NumPy cũng có một số hàm toán cơ bản như sin,cos,và exp. Và chúng được gọi là \"universal functions) ufunc\nIndexing(lấy phần tử dựa vào index), Slicing(cắt) and Iterating(lặp)\narray 1 chiều có thể lấy index,slice hay lặp giống như list trong Python\na=np.arange(10)**3print(a,\"Mảng a được tạo với 10 phần tử từ 0-\u0026gt;10 và toán tử ** lấy số mũ mỗi phần tử\")print(a)# out [ 0 1 8 27 64 125 216 343 512 729]# INDEXEDprint(a[2],\" vị trí thứ 3 index tính từ vị trí 0\")print(a[2:5],\" lấy giá trị từ vị trí 3-\u0026gt;vị trí 4\")# Gána[:6:2]=-1000# Dấu : tượng trưng cho bắt đầu từ vị trí 0 tới vị trí số 6 cách mỗi 2 bước thì gán giá trị đó =-1000print(a,\"Dấu : tượng trưng cho bắt đầu từ vị trí 0 tới vị trí số 6 cách mỗi 2 bước thì gán giá trị đó =-1000\")a=a[: : -1]print(a,\"Đảo các phần tử từ cuối lên đầu ndarray\")# Duyệt qua tất cả các phần tử trong mảng với for và thực hiện phép tính với phần tửfor i in enumerate(a):d=i[-1]**(1/3.)print(str(round(d,2)),str(i[-1]),\"lũy thừa \",str(round(1/3.,2)),\" của phần tử thứ : \"+str(i[0]))\n\u0026nbsp;\nMảng nhiều chiều và thay đổi Shape của mảng\nmprint(\"Mảng nhiều chiều - Ma trận\")def f(x,y):print(x)print(\"xxx\")print(y)print(\"-\"*41)return x*10+yb=np.fromfunction(f,(5,4),dtype=int)# hàm np.fromfunction(func,shape,type) là một hàm xây dựng mảng 2 chiều bằng cách gán một tham số là một hàm, và hàm này sẽ thực hiện trên mỗi tọa độ của ma trận# tham số func: Là hàm được gọi cùng với tham số N, và N là dạng của ma trận ở tham số shape, như ví dụ trên thì với N = tuple (5,4) ma trận trả về sẽ có 5 hàng và 4 cột, hàm f sẽ trả về giá trị tại từng tọa độ điểm với x tăng dần theo cột từ 0-\u0026gt;4 sau đó *10 và cộng với y tăng dần theo hàng từ 0-\u0026gt;3# shape: là một tuple hoặc số int: shape là số chiều của array output# dtype: kiểu giá trị của elementsprint(b)#[[ 0 1 2 3]# [10 11 12 13]# [20 21 22 23]# [30 31 32 33]# [40 41 42 43]]print(b[2,3],\" giá trị tại hàng 3 cột 4 index tính từ 0\")print(b[0:5,1],\" giá trị từ hàng 1-\u0026gt;4 tại cột 2\")print(b[:,1],\" Tất cả giá trị có ở cột 2\")print(b[1:3,:],\" lấy giá trị ở hàng 2-\u0026gt;3 tại tất cả các cột\")print(b[1:3,1:3],\" lấy giá trị ở hàng 2-\u0026gt;3 tại cột 2 và 3\")# Khi chúng ta chỉ lấy index tại hàng thì xác định là lấy tất cả các cộtprint(b[-1],\" = b[-1] cũng bằng giá trị với b[-1,:], tại hàng cuối lấy giá trị tất cả các cột\")d=np.reshape(b,b.size) # làm phẳng array bc=d[0:16]c=c.reshape((2,2,4))print(c,\" reshape lại c thành array 3 chiều\")# Giờ thì ta có 1 array 3 chiều và khá khó sử dụng. Nên ta có thêm khái niệm dấu 3 chấm (...) nó tương đương với dấu \":\", ở array 2 chiều thì ta có thể sử dụng dấu : để lấy hết giá trị tại cột hay hàng đó mà không cần tới dấu (...)# nhưng ở array 3 chiều thì dấu ... có thể tượng trưng luôn cho 2 dấu \":\" ta có vd sauprint(c[...,2],\" c[...,2] cái này có giá trị tương đương với c[:,:,2]\")#hoặcprint(c[1,...],\"c[1,...] cái này cũng giống với c[1,:,:]\")# Dấu ... có ý nghĩa lớn nếu ta sử dụng mảng nhiều chiều# Khi chúng ta dùng for để lặp lấy các giá trị của mảng nhiều chiều thì mặc định sẽ trả về giá trị tại trục đầu tiên vdprint(\"Array 2 chiều\")for r in b:print(\"-\" * 30)print(r)print(\"Array 3 chiều\")for r in c:print(\"-\"*30)print(r)# Ta có thể flat (làm phẳng) array và duyệt qua tất cả các giá trị (phần tử) có trong mảng:print(\"Array 2 chiều\")for e in b.flat:print(\"-\" * 30)print(e)print(\"Array 3 chiều\")for e in c.flat:print(\"-\"*30)print(e)# Các cách thay đổi định dạng của array từ 1 chiều -\u0026gt; 2 chiều -\u0026gt; 3 chiều và ngược lạimprint(\"Reshape Array\")print(a.T)a=np.floor(10*np.random.random((3,4)))print(a)# Tạo một mảng 2 chiều giá trị phần tử ngẫu nhiên với 3 hàng và 4 cột# Trước tiên ta cần làm phẳng array# Cách 1 dùng np.reshapec=np.reshape(a,a.size);print(a,\"Chuyển đổi từ array 2 chiều thành 1 chiều với np.reshape\",c)# Cách 2 dùng flattend=a.flatten();print(a,\"Chuyển đổi từ array 2 chiều thành 1 chiều với flatten()\",d)# Cách 3 dùng ravel()e=a.ravel();print(a,\"Chuyển đổi từ array 2 chiều thành 1 chiều với ravel()\",e)print(a.reshape(6,2),\" Chuyển đổi định dạng của array từ 3 hàng 4 cột thành 6 hàng 2 cột\")print(a,\" về cơ bản thì array a vẫn không thay đổi, khi ta sử dụng ravel flatten ta phải gán biến cho nó\")# Khi ta muốn thay đổi định dạng của một array thì ta sẽ có thêm 1 hàm khác để làm điều đó resize()a.resize(2,6)print(a)#Khi một tham số trong tuple(x,y) để reshape lại array mà có 1 tham số là -1 thì số đó sẽ được tính một cách tự động vdprint(a.reshape(-1,4),\" reshape với 1 chiều =-1 thì chiều này sẽ được tự động tính\")a=[1,2]print(\"list a:\\n\",a)print(\"type of a\",type(a))a=np.asarray(a)print(\"type of a\",type(a))a=np.arange(6);print(a,\" Thay đổi array a giữ nguyên dữ liệu\")b=a.reshape(3,2);print(b,\" Chuyển đổi thành array 2 chiều với 3 hàng và 2 cột\")print(b.size,\" Tổng số phần tử của array 2 chiều a.size\")b=a.reshape(3,2)c=a.reshape(3,2)print(b)print(np.insert(b,0,5),\"sử dụng hàm np.insert(array,cột,giá trị) thêm giá trị vào cột 1 với giá trị bằng 5 và làm phẳng array\")print(np.insert(c,1,3,axis=1),\"sử dụng hàm np.insert(array,cột,giá trị,axis=x) chèn thêm giá trị vào cột 2 với giá trị bằng 3,không thay đổi cấu trúc array với tham số axis=1\")print(np.insert(c,0,3,axis=0),\"Sử dụng hàm np.insert(array,cột,giá trị,axis=x) chèn vào hàng 1 một hàng có giá trị bằng 3,không thay đổi cấu trúc array với tham số axis=0\")\n \u0026nbsp;\nXếp chồng các mảng lên nhau:\nMột vài Aray có thể chồng lên nhau dựa trên các trục\na=np.floor(10*np.random.random((2,2)))print(a)b=np.floor(10*np.random.random((2,2)))print(b)print(np.vstack((a,b)),\" Chồng array theo trục dọc (cột) \")print(np.hstack((a,b)),\" Chồng array theo trục ngang(hàng)\")#Hàm np.column_stack là chồng 2 array 1 chiều lên nhau thành 1 array 2 chiều. nó cũng giống như np.hstack khi dùng cho mảng 2 chiềufrom numpy import newaxisprint(np.column_stack((a,b)),\"column_stack với array 2 chiều\")a=np.array([3.,4.,5.])b=np.array([6.,8.,1.])print(a)print(b)print(np.column_stack((a,b)),\" Chồng (stack) 2 array 1 chiều lên nhau thành 1 array 2 chiều\")print(np.column_stack((a,b)).shape)print(np.hstack((a,b)),\" Kết quả này khác khi dùng column_stack\")print(a[:,newaxis],\" Thêm trục để chuyển đổi từ array 1 chiều thành 2 chiều\")# Mặt khác hàm row_stack cũng giống như vstack. Nhưng khác với column_stack có điểm khác nhau khi chồng array 1 chiều còn row_stack không khác biệt nhiều với bất kỳ array 1 hay 2 chiều# Khi làm việc với array nhiều hơn 2 chiều thì hstack sẽ ghép với trục thứ 2 (axes=1) và vstack sẽ ghép vào trục 1(axes=0)# Ngoài ra bạn có thể dùng np.concatenate((arr1,arr2),axes=n) với tham số n để chỉ định ghép array ở vị trí nào\u0026nbsp;\n\u0026nbsp;\n*Note\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Ngoài ra bạn có thể dùng np.c_và np.r_cũng có thể stack với nhiều tham số tùy chọn để tạo matrix \n\u0026nbsp;\nTách mảng thành nhiều mảng nhỏ\nsử dụng numpy.hsplit hay numpy.vsplit hoặc array_split để chia mảng thành mảng nhỏ\na=np.floor(10*np.random.random((2,12)))print(a)#[[1. 7. 9. 9. 1. 0. 0. 2. 7. 5. 9. 7.]# [3. 1. 9. 2. 9. 2. 7. 7. 8. 7. 7. 3.]]print(np.hsplit(a,3),\" Chia array thành 3 array nhỏ\")#[array([[1., 7., 9., 9.],# [3., 1., 9., 2.]]), array([[1., 0., 0., 2.],# [9., 2., 7., 7.]]), array([[7., 5., 9., 7.],# [8., 7., 7., 3.]])] Chia array thành 3 array nhỏ# Với Array nhiều chiều thì khi phân chia sẽ vẫn theo trục đầu tiêna=np.arange(8.0).reshape(2,2,2)print(a)#[[[0. 1.]# [2. 3.]]# [[4. 5.]# [6. 7.]]]print(np.vsplit(x,2))#[array([[1, 2]]), array([[3, 4]])]\n \u0026nbsp;\nCopies and Views\nKhi xử lý và vận dụng với Arrays, dữ liệu của chúng đôi khi được sao chép và đôi khi thì không cần sao chép, nó thường gây nhầm lẫn. có 3 Trường hợp hay dùng\nNo Copy( chẳng copy hay làm gì cả)\na=np.arange(6)b=aprint(b is a,\" Cái này trả về True vì b hay a thì nó chỉ là tên của cùng một ndarray\")b.shape=3,4print(a.shape,\" Ta đã gán shape cho b nên a thay đổi theo\")\n \u0026nbsp;\nViews or Shallow Copy( sao chép nông nông :D ) Các mảng khác nhau có thể chia sẻ cùng 1 dữ liệu. Hàm view() tạo một mảng mới có dữ liệu dựa vào mảng ban đầu\nc=a.view()print(c is a,\" Trả về False vì c không phải là a\")print(c.base is a,\" Trả về True vì c có dữ liệu dựa trên a\")print(c.flags.owndata,\" Trả về False vì c không chứa dữ liệu\")c.shape=2,6print(a.shape,\" shape của a không thay đổi\")c[0,4]=1234 # a sẽ thay đổi giá trịprint(a,\" Giá trị của a bị thay đổi theo c\")#[[ 0 1 2 3]# [1234 5 6 7]# [ 8 9 10 11]]# Cắt array (slicing) ra để sử dụng cũng tương đương với việc view dữ liệu trên array cũ.# Cái này mọi người hay nhầm nhấts=a[:,1:3] # Slice array a lấy tất cả giá trị các cột 2 và 3s[:]=10 # Gán tất cả các giá trị trong array s thành 10, Chú ý, s=10 khác với s[:]=10print(a,\" Giá trị cột 2 và 3 biến thành 10 khi ta thay đổi view s\")\n Deep Copy\nPhương thức copy() là tạo một array mới sao chép toàn bộ dữ liệu của array cũ và khi thao tác trên array mới sẽ không ảnh hưởng đến array cũ\nd=a.copy()print(d is a,\" Trả về False vì chẳng còn liên quan gì đến a\")print(d.base is a,\" Trả về False vì chẳng còn liên quan gì đến a\")d[0,0]=100000print(a,\" a không thay đổi vì d với a không chia sẻ cái gì\")\n \u0026nbsp;\nNhững thứ méo cơ bản\nnumpy.broadcast\nThuật ngữ Broadcast trong numpy là khi nó xử lý các mạng với các shape khác nhau trong các phép toán.\nNếu tất cả các arrays không có cùng số chiều, thì số 1 sẽ được thêm vào cho tới khi shape của các array đó giống nhau.\nĐọc thêm về Broadcasting và các ví dụ tại Broadcasting\n\u0026nbsp;\nLập các chỉ mục vị trí (index) của array bằng 1 array\n(Indexing with Arrays of Indices)\nLập chỉ mục: là vị trí index (lấy giá trị elements của array thông qua các số này) của một array 1 chiều hay nhiều chiều ta có thể tạo một array khác chứa các index này (số nhiều indices) a=np.arange(12)**2 # Tạo một Array 1 chiều với 12 giá trị là lũy thừa của 2print(a,\" Array a\")#[ 0 1 4 9 16 25 36 49 64 81 100 121] Array ai=np.array([1,1,3,8,5]) # Tạo một array gồm các index ( chỉ mục cho phần tử) của array aprint(a[i],\" Trả về các phần tử trong array a có index là i\")#[ 1 1 9 64 25] Trả về các phần tử trong array a có index là ij=np.array([[3,4],[9,7]]) # Tạo một array 2 chiều có các giá trị là chỉ mục cho array aprint(a[j],\" Trả về 1 array có các phần tử trong array a ở vị trí j nhưng có shape là array j\")#[[ 9 16]#[81 49]] Trả về 1 array có các phần tử trong array a ở vị trí j nhưng có shape là array j\n Khi lập chỉ mục cho một array nhiều chiều, một array chỉ mục cho array a sẽ lấy chiều đầu tiên của a (thường tính theo hàng trục đầu tiên axes = 0 ). VD ta muốn chuyển mã màu của một hình ảnh thành một bức ảnh màu sử dụng một bảng màu.\n# Bảng màu RGBpallete=np.array([[0,0,0], # Màu đen[255,0,0], # Màu đỏ[0,255,0], # Màu xanh lá cây[0,0,255], # Màu xanh da trời blue[255, 255,255], # Màu trắng])image=np.array([[0,1,2,0],[0,3,4,0]])print(pallete[image])#[[[ 0 0 0]# [255 0 0]# [ 0 255 0]# [ 0 0 0]]## [[ 0 0 0]# [ 0 0 255]# [255 255 255]# [ 0 0 0]]]\n \u0026nbsp;\nKhi muốn lập chỉ mục nhiều hơn 1 chiều như trên. ta có thể tạo nhiều array chứa chỉ mục cho mỗi chiều- những array này phải có chung 1 shape\n# Tạo một array 2 chiều với 3 hàng và 4 cộta=np.arange(12).reshape(3,4)print(a,\"Array mẫu\")#[[ 0 1 2 3]# [ 4 5 6 7]# [ 8 9 10 11]]# Array chứa index chỉ mục cho trục thứ 1 (chiều thứ 1)i=np.array([[0,1],[1,2]])# Array chứa index chỉ mục cho trục thứ 2 (chiều thứ 2)j=np.array([[2,1],[3,3]])d=a[i,j]print(d,\" Array d trả về có shape giống Array chứa index chỉ mục\")print(\"với i[0]=[0,1] và j[0]=[2,1] sẽ trả về giá trị d[0] = hàng 0(vị trí i[0][0]=0) và cột 2(vị trí j) ở array mẫu và có giá trị = 2, tương tự hàng 1 cột 1 = 5 ~ [2,5]\")print(a[i,2],\" Array trả về sẽ có shape giống array i, còn số 2 tương đương với array j có dạng j=[[2,2],[2,2]]\")j=np.array([[2,1,0],[3,1,3]])# Shape đỏi shape (2,3) cho array jprint(j.shape)print(a[:,j],\" Array trả về sẽ có shape tương đương chồng (stack) từng hàng của array a (1 chiều) lên array j sẽ tạo thành 1 array 3 chiều\"\"gồm 4 mục ( số lượng elements tại trục thứ 1 của array a ), mỗi mục có shape giống shape của array j (2,3)\"\"Dấu : tương đương với tất cả các index 'n' của a tính theo hàng và tạo array dưới dạng a[n,j]\")print(a[:,j].shape,\" shape 3 chiều của array kết quả có dạng trục 1 là trục của array a, trục 2,3 có dạng shape của array j\")# Thông thường chúng ta thường bỏ 2 array chỉ mục i,j vào 1 list và sau đó index list nàyj=np.array([[2,1],[3,3]])l=tuple([i,j]) # Nên dùng tuple không thằng numPy nó thay đổi rồi :D đọc warning thấy thế nên theo mình dùng kiểu [i,j] cho lẹprint(a[l],\" kết quả tương đương khi sử dụng a[i,j]\")\n \u0026nbsp;\n#Hoặc lấy một khoảng indexprint(a[i,1:3],\"Dấu 1:3 tương đương với tất cả các index '1-\u0026gt;3' của a tính theo hàng và tạo array dưới dạng a[i,1] ,a[i,2]\")#Hoặc lập chỉ mục một cách trực tiếp bằng cách gán 1 mảng vào đóa=np.arange(5)print(a)a[[1,2,4]]=0print(a) #[0 1 2 3 4] =\u0026gt; [0 0 0 3 0]# Nếu các index được lặp lại nhiều lần trong array chỉ mục thì nó sẽ nhận giá trị cuối cùng được gána=np.arange(5)a[[1,1,2]]=[0,8,9]print(a) #[0 1 2 3 4] =\u0026gt; [0 8 9 3 4]# Giờ thì chuyện gì sẽ xảy ra nếu ta gán toán tử += hay -= khi gán giá trị chỉ mục ?a=np.arange(5)a[[1,2,3]]+=1print(a,\" vẫn đúng với các giá trị từ 1-\u0026gt;3 tăng thêm 1 đơn vị\")# Còn lặp lại thì sao ?a=np.arange(5)a[[1,1,2]]+=1print(a,\" giá trị ở cột thứ 2 sẽ được giữ nguyên đến khi nó thực hiện xong và tăng thêm 1 1 lần\")\n \u0026nbsp;\nLập chỉ mục với Array Boolean\nKhi lập chỉ mục với một array chúng ta thường dùng một array chứa giá trị số index( vị trí) của array đó để lấy giá trị. Nhưng với một array không chứa giá trị số mà chứa giá trị là một list (hoặc array tùy cách hiểu :D) boolean chúng ta có thể chọn những giá trị chúng ta muốn trong array gốc, vd như chọn số nguyên %2==0 hoặc lớn hơn 5(\u0026gt;5) hoặc số có 2 chữ số (\u0026gt;9)\nxem ví dụ sau bạn sẽ rõ về cách sử dụng lập chỉ mục Boolean:\n#Tạo array 2 chiều a từ 0-\u0026gt;11 có shape 3 hàng 4 cộta=np.arange(12).reshape(3,4)\n# Tạo array boolean indicesb=a%2==0 # Lập chỉ mục array boolean với giá trị là số chẵnprint(b,\" Array boolean\")# Giờ thì biến tất cả các số chẵn này thành 1a[b]=1print(a,\"Các số chẵn biến mất và đã được gán giá trị =1\")\n \u0026nbsp;\nVí dụ sau là cách sử dụng index Boolean để tạo một hình fractal giống Mandelbrot\n# import package matplotlib để vẽ hìnhimport matplotlib.pyplot as plt# Tạo một hàm vẽ fractal với chiều cao và rộng, maxit là độ nhiễu của fractaldef mandelbrot(h,w,maxit=80):# Tạo một grid với numpy.ogridx,y = np.ogrid[-2:0.8:w * 1j,-1.4:1.4:h * 1j]# Tạo 1 số phức để vẽ fractal đối xứngc=x+y*1jz=c# Tạo mảng 0 divtime có shape giống mảng cdivtime=maxit+np.zeros(z.shape,dtype=int)for i in range(maxit):z=z**2+cdiverge=z*np.conj(z)\u0026gt;2**2# Mảng boolean indexdiv_now=diverge\u0026amp;(divtime==maxit)divtime[div_now]=i+50z[diverge]=1jreturn divtimeplt.imshow(mandelbrot(400,400,10))plt.title(\"Fractal\")plt.show()\n \u0026nbsp;\nHàm ix_()\nHàm ix_() dùng để kết hợp nhiều vector(vector là mảng 1 chiều, có dạng hàng x=[x1,x2,….,xn] hoặc cột y= ) biến đổi chúng thành các ma trận n chiều (n bằng số vector gộp). Ví dụ bạn có 3 vector a,b,c và giờ bạn muốn tính kết quả a+b*c cho mỗi cặp 3 từ các vector đó:\n# Tạo 3 Vector có shape khác nhau\na=np.arange(4)+2b=np.array([8,5,4])c=np.array([5,4,6,8,3])ax,bx,cx=np.ix_(a,b,c)print(ax,\" a biến thành vector 3 chiều với chiều 1 là size của a\")print(ax.shape,\" là shape của vector a sau khi biến đổi\")print(bx,\" b biến thành vector 3 chiều với chiều 2 là size của b\")print(bx.shape,\" là shape của vector b sau khi biến đổi\")print(cx,\" c biến thành vector 3 chiều với chiều 3 là size của c\")print(cx.shape,\" là shape của vector c sau khi biến đổi\")# Tương tự nếu gộp nhiều vector với nhauresult=ax+bx*cprint(result,\" Là vector 3 chiều có giá trị là a+b*c có shape dưới dạng (a.size,b.size,c.size)\")print(result[3,2,1],\" có giá trị tương đương khi ta sử dụng a[3]+b[2]*c[1]\")# OK giờ thì làm cho nó ngắn gọn đi 1 chút và có thể tái sử dụngimport functoolsdef ufunc(ufct, *vectors):vs = np.ix_(*vectors)r = ufct.identityfor v in vs:r = ufct(r,v)return r# Giờ thì ta có thể sử dụng nó để tính toán bất kỳ trạng thái nào của 3 vector abcprint(ufunc(np.add,a,b,c))\u0026nbsp;\n \u0026nbsp;\nTự động reshape cho array\nĐể thay đổi chiều của một array các mày có thể đặt 1 chiều với giá trị là -1 để nó tự động đặt số còn lại.\na=np.arange(30)a.shape=-1,3,2print(a.shape,\" tự thay đổi số -1 bằng số thích hợp\")try:a.shape=-1,3,4except Exception as e:print(\"Báo lỗi khi không gán được giá trị ở đây là lỗi: \"+ str(type(e)) ,str(e))\n \u0026nbsp;\nVẽ biểu đồ\nhàm np.histogram(a, bins=10, range=None, normed=None, weights=None, density=None) trong đó a là một array phẳng (flattened array) đoc thêm tại np.histogram\nTrong matplotlib cũng có hàm hist() để vẽ biểu đồ nhưng 2 cái này có điểm khác nhau. Điểm khác nhau chủ yếu là hist() phác họa biểu đồ 1 cách tự động còn. np.histogram chỉ tạo ra dữ liệu (return an array):\nmu,sigma=2,.5v=np.random.normal(mu,sigma,1000)plt.figure()plt.hist(v,bins=50,density=1)plt.title(\"Vẽ biểu đồ hist với matplotlib\")plt.figure()(n,bins)=np.histogram(v,bins=50,density=True)plt.plot(.5*(bins[1:]+bins[:-1]),n)plt.title(\"Vẽ biểu đồ với np.histogram\")plt.show()\n Kết quả:\nFile ví dụ lấy ở đây NumpyTest.py\n "
},
{
	"uri": "https://bamboofx.github.io/about/",
	"title": "about",
	"tags": ["portfolio", "cv"],
	"description": "",
	"content": " -- svg:not(:root).svg-inline--fa { overflow: visible; } .svg-inline--fa { display: inline-block; font-size: inherit; height: 1em; overflow: visible; vertical-align: -0.125em; } .svg-inline--fa.fa-lg { vertical-align: -0.225em; } .svg-inline--fa.fa-w-1 { width: 0.0625em; } .svg-inline--fa.fa-w-2 { width: 0.125em; } .svg-inline--fa.fa-w-3 { width: 0.1875em; } .svg-inline--fa.fa-w-4 { width: 0.25em; } .svg-inline--fa.fa-w-5 { width: 0.3125em; } .svg-inline--fa.fa-w-6 { width: 0.375em; } .svg-inline--fa.fa-w-7 { width: 0.4375em; } .svg-inline--fa.fa-w-8 { width: 0.5em; } .svg-inline--fa.fa-w-9 { width: 0.5625em; } .svg-inline--fa.fa-w-10 { width: 0.625em; } .svg-inline--fa.fa-w-11 { width: 0.6875em; } .svg-inline--fa.fa-w-12 { width: 0.75em; } .svg-inline--fa.fa-w-13 { width: 0.8125em; } .svg-inline--fa.fa-w-14 { width: 0.875em; } .svg-inline--fa.fa-w-15 { width: 0.9375em; } .svg-inline--fa.fa-w-16 { width: 1em; } .svg-inline--fa.fa-w-17 { width: 1.0625em; } .svg-inline--fa.fa-w-18 { width: 1.125em; } .svg-inline--fa.fa-w-19 { width: 1.1875em; } .svg-inline--fa.fa-w-20 { width: 1.25em; } .svg-inline--fa.fa-pull-left { margin-right: 0.3em; width: auto; } .svg-inline--fa.fa-pull-right { margin-left: 0.3em; width: auto; } .svg-inline--fa.fa-border { height: 1.5em; } .svg-inline--fa.fa-li { width: 2em; } .svg-inline--fa.fa-fw { width: 1.25em; } .fa-layers svg.svg-inline--fa { bottom: 0; left: 0; margin: auto; position: absolute; right: 0; top: 0; } .fa-layers { display: inline-block; height: 1em; position: relative; text-align: center; vertical-align: -0.125em; width: 1em; } .fa-layers svg.svg-inline--fa { -webkit-transform-origin: center center; transform-origin: center center; } .fa-layers-counter, .fa-layers-text { display: inline-block; position: absolute; text-align: center; } .fa-layers-text { left: 50%; top: 50%; -webkit-transform: translate(-50%, -50%); transform: translate(-50%, -50%); -webkit-transform-origin: center center; transform-origin: center center; } .fa-layers-counter { background-color: #ff253a; border-radius: 1em; -webkit-box-sizing: border-box; box-sizing: border-box; color: #fff; height: 1.5em; line-height: 1; max-width: 5em; min-width: 1.5em; overflow: hidden; padding: 0.25em; right: 0; text-overflow: ellipsis; top: 0; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: top right; transform-origin: top right; } .fa-layers-bottom-right { bottom: 0; right: 0; top: auto; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: bottom right; transform-origin: bottom right; } .fa-layers-bottom-left { bottom: 0; left: 0; right: auto; top: auto; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: bottom left; transform-origin: bottom left; } .fa-layers-top-right { right: 0; top: 0; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: top right; transform-origin: top right; } .fa-layers-top-left { left: 0; right: auto; top: 0; -webkit-transform: scale(0.25); transform: scale(0.25); -webkit-transform-origin: top left; transform-origin: top left; } .fa-lg { font-size: 1.3333333333em; line-height: 0.75em; vertical-align: -0.0667em; } .fa-xs { font-size: 0.75em; } .fa-sm { font-size: 0.875em; } .fa-1x { font-size: 1em; } .fa-2x { font-size: 2em; } .fa-3x { font-size: 3em; } .fa-4x { font-size: 4em; } .fa-5x { font-size: 5em; } .fa-6x { font-size: 6em; } .fa-7x { font-size: 7em; } .fa-8x { font-size: 8em; } .fa-9x { font-size: 9em; } .fa-10x { font-size: 10em; } .fa-fw { text-align: center; width: 1.25em; } .fa-ul { list-style-type: none; margin-left: 2.5em; padding-left: 0; } .fa-ul  li { position: relative; } .fa-li { left: -2em; position: absolute; text-align: center; width: 2em; line-height: inherit; } .fa-border { border: solid 0.08em #eee; border-radius: 0.1em; padding: 0.2em 0.25em 0.15em; } .fa-pull-left { float: left; } .fa-pull-right { float: right; } .fa.fa-pull-left, .fas.fa-pull-left, .far.fa-pull-left, .fal.fa-pull-left, .fab.fa-pull-left { margin-right: 0.3em; } .fa.fa-pull-right, .fas.fa-pull-right, .far.fa-pull-right, .fal.fa-pull-right, .fab.fa-pull-right { margin-left: 0.3em; } .fa-spin { -webkit-animation: fa-spin 2s infinite linear; animation: fa-spin 2s infinite linear; } .fa-pulse { -webkit-animation: fa-spin 1s infinite steps(8); animation: fa-spin 1s infinite steps(8); } @-webkit-keyframes fa-spin { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); } 100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); } } @keyframes fa-spin { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg); } 100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); } } .fa-rotate-90 { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)\"; -webkit-transform: rotate(90deg); transform: rotate(90deg); } .fa-rotate-180 { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\"; -webkit-transform: rotate(180deg); transform: rotate(180deg); } .fa-rotate-270 { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)\"; -webkit-transform: rotate(270deg); transform: rotate(270deg); } .fa-flip-horizontal { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)\"; -webkit-transform: scale(-1, 1); transform: scale(-1, 1); } .fa-flip-vertical { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\"; -webkit-transform: scale(1, -1); transform: scale(1, -1); } .fa-flip-horizontal.fa-flip-vertical { -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\"; -webkit-transform: scale(-1, -1); transform: scale(-1, -1); } :root .fa-rotate-90, :root .fa-rotate-180, :root .fa-rotate-270, :root .fa-flip-horizontal, :root .fa-flip-vertical { -webkit-filter: none; filter: none; } .fa-stack { display: inline-block; height: 2em; position: relative; width: 2.5em; } .fa-stack-1x, .fa-stack-2x { bottom: 0; left: 0; margin: auto; position: absolute; right: 0; top: 0; } .svg-inline--fa.fa-stack-1x { height: 1em; width: 1.25em; } .svg-inline--fa.fa-stack-2x { height: 2em; width: 2.5em; } .fa-inverse { color: #fff; } .sr-only { border: 0; clip: rect(0, 0, 0, 0); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } .sr-only-focusable:active, .sr-only-focusable:focus { clip: auto; height: auto; margin: 0; overflow: visible; position: static; width: auto; }Viblo CV #nprogress{pointer-events:none}#nprogress .bar{background:#29d;position:fixed;z-index:1031;top:0;left:0;width:100%;height:2px}#nprogress .peg{display:block;position:absolute;right:0;width:100px;height:100%;box-shadow:0 0 10px #29d,0 0 5px #29d;opacity:1;-webkit-transform:rotate(3deg) translateY(-4px);-ms-transform:rotate(3deg) translateY(-4px);transform:rotate(3deg) translateY(-4px)}#nprogress .spinner{display:block;position:fixed;z-index:1031;top:15px;right:15px}#nprogress .spinner-icon{width:18px;height:18px;box-sizing:border-box;border:2px solid transparent;border-top-color:#29d;border-left-color:#29d;border-radius:50%;-webkit-animation:nprogress-spinner .4s linear infinite;animation:nprogress-spinner .4s linear infinite}.nprogress-custom-parent{overflow:hidden;position:relative}.nprogress-custom-parent #nprogress .bar,.nprogress-custom-parent #nprogress .spinner{position:absolute}@-webkit-keyframes nprogress-spinner{0%{-webkit-transform:rotate(0deg)}to{-webkit-transform:rotate(1turn)}}@keyframes nprogress-spinner{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}#nprogress .bar{height:3px!important;background-color:#f48135!important}#nprogress .spinner{right:25px!important}#nprogress .spinner-icon{width:25px!important;height:25px!important;border-width:3px!important;border-top-color:#f48135!important;border-left-color:#f48135!important}strong{font-weight:700!important}@font-face{font-family:Chinese Quote;src:local(\"PingFang SC\"),local(\"SimSun\");unicode-range:u+2018,u+2019,u+201c,u+201d}body,html{width:100%;height:100%}input::-ms-clear,input::-ms-reveal{display:none}*,:after,:before{-webkit-box-sizing:border-box;box-sizing:border-box}html{font-family:sans-serif;line-height:1.15;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;-ms-overflow-style:scrollbar;-webkit-tap-highlight-color:rgba(0,0,0,0)}@-ms-viewport{width:device-width}article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}body{margin:0;font-family:Chinese Quote,-apple-system,BlinkMacSystemFont,Segoe UI,PingFang SC,Hiragino Sans GB,Microsoft YaHei,Helvetica Neue,Helvetica,Arial,sans-serif;font-size:14px;font-variant:tabular-nums;line-height:1.5;color:rgba(0,0,0,.65);background-color:#fff}[tabindex=\"-1\"]:focus{outline:none!important}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible}h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:.5em;color:rgba(0,0,0,.85);font-weight:500}p{margin-top:0;margin-bottom:1em}abbr[data-original-title],abbr[title]{text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;cursor:help;border-bottom:0}address{margin-bottom:1em;font-style:normal;line-height:inherit}input[type=number],input[type=password],input[type=text],textarea{-webkit-appearance:none}dl,ol,ul{margin-top:0;margin-bottom:1em}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}dt{font-weight:500}dd{margin-bottom:.5em;margin-left:0}blockquote{margin:0 0 1em}dfn{font-style:italic}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}a{color:#1890ff;background-color:transparent;text-decoration:none;outline:none;cursor:pointer;-webkit-transition:color .3s;transition:color .3s;-webkit-text-decoration-skip:objects}a:focus{text-decoration:underline;-webkit-text-decoration-skip:ink;text-decoration-skip-ink:auto}a:hover{color:#40a9ff}a:active{color:#096dd9}a:active,a:hover{outline:0;text-decoration:none}a[disabled]{color:rgba(0,0,0,.25);cursor:not-allowed;pointer-events:none}code,kbd,pre,samp{font-family:SFMono-Regular,Consolas,Liberation Mono,Menlo,Courier,monospace;font-size:1em}pre{margin-top:0;margin-bottom:1em;overflow:auto}figure{margin:0 0 1em}img{vertical-align:middle;border-style:none}svg:not(:root){overflow:hidden}[role=button],a,area,button,input:not([type=range]),label,select,summary,textarea{-ms-touch-action:manipulation;touch-action:manipulation}table{border-collapse:collapse}caption{padding-top:.75em;padding-bottom:.3em;color:rgba(0,0,0,.45);text-align:left;caption-side:bottom}th{text-align:inherit}button,input,optgroup,select,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit;color:inherit}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{padding:0;border-style:none}input[type=checkbox],input[type=radio]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}input[type=date],input[type=datetime-local],input[type=month],input[type=time]{-webkit-appearance:listbox}textarea{overflow:auto;resize:vertical}fieldset{min-width:0;padding:0;margin:0;border:0}legend{display:block;width:100%;max-width:100%;padding:0;margin-bottom:.5em;font-size:1.5em;line-height:inherit;color:inherit;white-space:normal}progress{vertical-align:baseline}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{outline-offset:-2px;-webkit-appearance:none}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{font:inherit;-webkit-appearance:button}output{display:inline-block}summary{display:list-item}template{display:none}[hidden]{display:none!important}mark{padding:.2em;background-color:#feffe6}::-moz-selection{background:#1890ff;color:#fff}::selection{background:#1890ff;color:#fff}.clearfix{zoom:1}.clearfix:after,.clearfix:before{content:\"\";display:table}.clearfix:after{clear:both}.anticon{display:inline-block;font-style:normal;vertical-align:-.125em;text-align:center;text-transform:none;line-height:0;text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.anticon*{line-height:1}.anticon svg{display:inline-block}.anticon:before{display:none}.anticon .anticon-icon{display:block}.anticon-spin,.anticon-spin:before{display:inline-block;-webkit-animation:loadingCircle 1s infinite linear;animation:loadingCircle 1s infinite linear}.fade-appear,.fade-enter,.fade-leave{-webkit-animation-duration:.2s;animation-duration:.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-play-state:paused;animation-play-state:paused}.fade-appear.fade-appear-active,.fade-enter.fade-enter-active{-webkit-animation-name:antFadeIn;animation-name:antFadeIn;-webkit-animation-play-state:running;animation-play-state:running}.fade-leave.fade-leave-active{-webkit-animation-name:antFadeOut;animation-name:antFadeOut;-webkit-animation-play-state:running;animation-play-state:running;pointer-events:none}.fade-appear,.fade-enter{opacity:0}.fade-appear,.fade-enter,.fade-leave{-webkit-animation-timing-function:linear;animation-timing-function:linear}@-webkit-keyframes antFadeIn{0%{opacity:0}to{opacity:1}}@keyframes antFadeIn{0%{opacity:0}to{opacity:1}}@-webkit-keyframes antFadeOut{0%{opacity:1}to{opacity:0}}@keyframes antFadeOut{0%{opacity:1}to{opacity:0}}.move-up-appear,.move-up-enter,.move-up-leave{-webkit-animation-duration:.2s;animation-duration:.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-play-state:paused;animation-play-state:paused}.move-up-appear.move-up-appear-active,.move-up-enter.move-up-enter-active{-webkit-animation-name:antMoveUpIn;animation-name:antMoveUpIn;-webkit-animation-play-state:running;animation-play-state:running}.move-up-leave.move-up-leave-active{-webkit-animation-name:antMoveUpOut;animation-name:antMoveUpOut;-webkit-animation-play-state:running;animation-play-state:running;pointer-events:none}.move-up-appear,.move-up-enter{opacity:0;-webkit-animation-timing-function:cubic-bezier(.08,.82,.17,1);animation-timing-function:cubic-bezier(.08,.82,.17,1)}.move-up-leave{-webkit-animation-timing-function:cubic-bezier(.6,.04,.98,.34);animation-timing-function:cubic-bezier(.6,.04,.98,.34)}.move-down-appear,.move-down-enter,.move-down-leave{-webkit-animation-duration:.2s;animation-duration:.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-play-state:paused;animation-play-state:paused}.move-down-appear.move-down-appear-active,.move-down-enter.move-down-enter-active{-webkit-animation-name:antMoveDownIn;animation-name:antMoveDownIn;-webkit-animation-play-state:running;animation-play-state:running}.move-down-leave.move-down-leave-active{-webkit-animation-name:antMoveDownOut;animation-name:antMoveDownOut;-webkit-animation-play-state:running;animation-play-state:running;pointer-events:none}.move-down-appear,.move-down-enter{opacity:0;-webkit-animation-timing-function:cubic-bezier(.08,.82,.17,1);animation-timing-function:cubic-bezier(.08,.82,.17,1)}.move-down-leave{-webkit-animation-timing-function:cubic-bezier(.6,.04,.98,.34);animation-timing-function:cubic-bezier(.6,.04,.98,.34)}.move-left-appear,.move-left-enter,.move-left-leave{-webkit-animation-duration:.2s;animation-duration:.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-play-state:paused;animation-play-state:paused}.move-left-appear.move-left-appear-active,.move-left-enter.move-left-enter-active{-webkit-animation-name:antMoveLeftIn;animation-name:antMoveLeftIn;-webkit-animation-play-state:running;animation-play-state:running}.move-left-leave.move-left-leave-active{-webkit-animation-name:antMoveLeftOut;animation-name:antMoveLeftOut;-webkit-animation-play-state:running;animation-play-state:running;pointer-events:none}.move-left-appear,.move-left-enter{opacity:0;-webkit-animation-timing-function:cubic-bezier(.08,.82,.17,1);animation-timing-function:cubic-bezier(.08,.82,.17,1)}.move-left-leave{-webkit-animation-timing-function:cubic-bezier(.6,.04,.98,.34);animation-timing-function:cubic-bezier(.6,.04,.98,.34)}.move-right-appear,.move-right-enter,.move-right-leave{-webkit-animation-duration:.2s;animation-duration:.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-play-state:paused;animation-play-state:paused}.move-right-appear.move-right-appear-active,.move-right-enter.move-right-enter-active{-webkit-animation-name:antMoveRightIn;animation-name:antMoveRightIn;-webkit-animation-play-state:running;animation-play-state:running}.move-right-leave.move-right-leave-active{-webkit-animation-name:antMoveRightOut;animation-name:antMoveRightOut;-webkit-animation-play-state:running;animation-play-state:running;pointer-events:none}.move-right-appear,.move-right-enter{opacity:0;-webkit-animation-timing-function:cubic-bezier(.08,.82,.17,1);animation-timing-function:cubic-bezier(.08,.82,.17,1)}.move-right-leave{-webkit-animation-timing-function:cubic-bezier(.6,.04,.98,.34);animation-timing-function:cubic-bezier(.6,.04,.98,.34)}@-webkit-keyframes antMoveDownIn{0%{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateY(100%);transform:translateY(100%);opacity:0}to{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateY(0);transform:translateY(0);opacity:1}}@keyframes antMoveDownIn{0%{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateY(100%);transform:translateY(100%);opacity:0}to{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateY(0);transform:translateY(0);opacity:1}}@-webkit-keyframes antMoveDownOut{0%{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateY(0);transform:translateY(0);opacity:1}to{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateY(100%);transform:translateY(100%);opacity:0}}@keyframes antMoveDownOut{0%{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateY(0);transform:translateY(0);opacity:1}to{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateY(100%);transform:translateY(100%);opacity:0}}@-webkit-keyframes antMoveLeftIn{0%{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateX(-100%);transform:translateX(-100%);opacity:0}to{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateX(0);transform:translateX(0);opacity:1}}@keyframes antMoveLeftIn{0%{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateX(-100%);transform:translateX(-100%);opacity:0}to{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateX(0);transform:translateX(0);opacity:1}}@-webkit-keyframes antMoveLeftOut{0%{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateX(0);transform:translateX(0);opacity:1}to{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateX(-100%);transform:translateX(-100%);opacity:0}}@keyframes antMoveLeftOut{0%{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateX(0);transform:translateX(0);opacity:1}to{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateX(-100%);transform:translateX(-100%);opacity:0}}@-webkit-keyframes antMoveRightIn{0%{opacity:0;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateX(100%);transform:translateX(100%)}to{opacity:1;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes antMoveRightIn{0%{opacity:0;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateX(100%);transform:translateX(100%)}to{opacity:1;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateX(0);transform:translateX(0)}}@-webkit-keyframes antMoveRightOut{0%{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateX(0);transform:translateX(0);opacity:1}to{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateX(100%);transform:translateX(100%);opacity:0}}@keyframes antMoveRightOut{0%{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateX(0);transform:translateX(0);opacity:1}to{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateX(100%);transform:translateX(100%);opacity:0}}@-webkit-keyframes antMoveUpIn{0%{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateY(-100%);transform:translateY(-100%);opacity:0}to{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateY(0);transform:translateY(0);opacity:1}}@keyframes antMoveUpIn{0%{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateY(-100%);transform:translateY(-100%);opacity:0}to{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateY(0);transform:translateY(0);opacity:1}}@-webkit-keyframes antMoveUpOut{0%{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateY(0);transform:translateY(0);opacity:1}to{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateY(-100%);transform:translateY(-100%);opacity:0}}@keyframes antMoveUpOut{0%{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateY(0);transform:translateY(0);opacity:1}to{-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translateY(-100%);transform:translateY(-100%);opacity:0}}@-webkit-keyframes loadingCircle{to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes loadingCircle{to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}[ant-click-animating-without-extra-node],[ant-click-animating]{position:relative}.ant-click-animating-node,[ant-click-animating-without-extra-node]:after{content:\"\";position:absolute;top:-1px;left:-1px;bottom:-1px;right:-1px;border-radius:inherit;border:0 solid #1890ff;opacity:.2;-webkit-animation:fadeEffect 2s cubic-bezier(.08,.82,.17,1),waveEffect .4s cubic-bezier(.08,.82,.17,1);animation:fadeEffect 2s cubic-bezier(.08,.82,.17,1),waveEffect .4s cubic-bezier(.08,.82,.17,1);-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards;display:block;pointer-events:none}@-webkit-keyframes waveEffect{to{top:-6px;left:-6px;bottom:-6px;right:-6px;border-width:6px}}@keyframes waveEffect{to{top:-6px;left:-6px;bottom:-6px;right:-6px;border-width:6px}}@-webkit-keyframes fadeEffect{to{opacity:0}}@keyframes fadeEffect{to{opacity:0}}.slide-up-appear,.slide-up-enter,.slide-up-leave{-webkit-animation-duration:.2s;animation-duration:.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-play-state:paused;animation-play-state:paused}.slide-up-appear.slide-up-appear-active,.slide-up-enter.slide-up-enter-active{-webkit-animation-name:antSlideUpIn;animation-name:antSlideUpIn;-webkit-animation-play-state:running;animation-play-state:running}.slide-up-leave.slide-up-leave-active{-webkit-animation-name:antSlideUpOut;animation-name:antSlideUpOut;-webkit-animation-play-state:running;animation-play-state:running;pointer-events:none}.slide-up-appear,.slide-up-enter{opacity:0;-webkit-animation-timing-function:cubic-bezier(.23,1,.32,1);animation-timing-function:cubic-bezier(.23,1,.32,1)}.slide-up-leave{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06)}.slide-down-appear,.slide-down-enter,.slide-down-leave{-webkit-animation-duration:.2s;animation-duration:.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-play-state:paused;animation-play-state:paused}.slide-down-appear.slide-down-appear-active,.slide-down-enter.slide-down-enter-active{-webkit-animation-name:antSlideDownIn;animation-name:antSlideDownIn;-webkit-animation-play-state:running;animation-play-state:running}.slide-down-leave.slide-down-leave-active{-webkit-animation-name:antSlideDownOut;animation-name:antSlideDownOut;-webkit-animation-play-state:running;animation-play-state:running;pointer-events:none}.slide-down-appear,.slide-down-enter{opacity:0;-webkit-animation-timing-function:cubic-bezier(.23,1,.32,1);animation-timing-function:cubic-bezier(.23,1,.32,1)}.slide-down-leave{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06)}.slide-left-appear,.slide-left-enter,.slide-left-leave{-webkit-animation-duration:.2s;animation-duration:.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-play-state:paused;animation-play-state:paused}.slide-left-appear.slide-left-appear-active,.slide-left-enter.slide-left-enter-active{-webkit-animation-name:antSlideLeftIn;animation-name:antSlideLeftIn;-webkit-animation-play-state:running;animation-play-state:running}.slide-left-leave.slide-left-leave-active{-webkit-animation-name:antSlideLeftOut;animation-name:antSlideLeftOut;-webkit-animation-play-state:running;animation-play-state:running;pointer-events:none}.slide-left-appear,.slide-left-enter{opacity:0;-webkit-animation-timing-function:cubic-bezier(.23,1,.32,1);animation-timing-function:cubic-bezier(.23,1,.32,1)}.slide-left-leave{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06)}.slide-right-appear,.slide-right-enter,.slide-right-leave{-webkit-animation-duration:.2s;animation-duration:.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-play-state:paused;animation-play-state:paused}.slide-right-appear.slide-right-appear-active,.slide-right-enter.slide-right-enter-active{-webkit-animation-name:antSlideRightIn;animation-name:antSlideRightIn;-webkit-animation-play-state:running;animation-play-state:running}.slide-right-leave.slide-right-leave-active{-webkit-animation-name:antSlideRightOut;animation-name:antSlideRightOut;-webkit-animation-play-state:running;animation-play-state:running;pointer-events:none}.slide-right-appear,.slide-right-enter{opacity:0;-webkit-animation-timing-function:cubic-bezier(.23,1,.32,1);animation-timing-function:cubic-bezier(.23,1,.32,1)}.slide-right-leave{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06)}@-webkit-keyframes antSlideUpIn{0%{opacity:0;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleY(.8);transform:scaleY(.8)}to{opacity:1;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleY(1);transform:scaleY(1)}}@keyframes antSlideUpIn{0%{opacity:0;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleY(.8);transform:scaleY(.8)}to{opacity:1;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleY(1);transform:scaleY(1)}}@-webkit-keyframes antSlideUpOut{0%{opacity:1;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleY(1);transform:scaleY(1)}to{opacity:0;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleY(.8);transform:scaleY(.8)}}@keyframes antSlideUpOut{0%{opacity:1;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleY(1);transform:scaleY(1)}to{opacity:0;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleY(.8);transform:scaleY(.8)}}@-webkit-keyframes antSlideDownIn{0%{opacity:0;-webkit-transform-origin:100% 100%;transform-origin:100% 100%;-webkit-transform:scaleY(.8);transform:scaleY(.8)}to{opacity:1;-webkit-transform-origin:100% 100%;transform-origin:100% 100%;-webkit-transform:scaleY(1);transform:scaleY(1)}}@keyframes antSlideDownIn{0%{opacity:0;-webkit-transform-origin:100% 100%;transform-origin:100% 100%;-webkit-transform:scaleY(.8);transform:scaleY(.8)}to{opacity:1;-webkit-transform-origin:100% 100%;transform-origin:100% 100%;-webkit-transform:scaleY(1);transform:scaleY(1)}}@-webkit-keyframes antSlideDownOut{0%{opacity:1;-webkit-transform-origin:100% 100%;transform-origin:100% 100%;-webkit-transform:scaleY(1);transform:scaleY(1)}to{opacity:0;-webkit-transform-origin:100% 100%;transform-origin:100% 100%;-webkit-transform:scaleY(.8);transform:scaleY(.8)}}@keyframes antSlideDownOut{0%{opacity:1;-webkit-transform-origin:100% 100%;transform-origin:100% 100%;-webkit-transform:scaleY(1);transform:scaleY(1)}to{opacity:0;-webkit-transform-origin:100% 100%;transform-origin:100% 100%;-webkit-transform:scaleY(.8);transform:scaleY(.8)}}@-webkit-keyframes antSlideLeftIn{0%{opacity:0;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleX(.8);transform:scaleX(.8)}to{opacity:1;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleX(1);transform:scaleX(1)}}@keyframes antSlideLeftIn{0%{opacity:0;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleX(.8);transform:scaleX(.8)}to{opacity:1;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleX(1);transform:scaleX(1)}}@-webkit-keyframes antSlideLeftOut{0%{opacity:1;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleX(1);transform:scaleX(1)}to{opacity:0;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleX(.8);transform:scaleX(.8)}}@keyframes antSlideLeftOut{0%{opacity:1;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleX(1);transform:scaleX(1)}to{opacity:0;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:scaleX(.8);transform:scaleX(.8)}}@-webkit-keyframes antSlideRightIn{0%{opacity:0;-webkit-transform-origin:100% 0;transform-origin:100% 0;-webkit-transform:scaleX(.8);transform:scaleX(.8)}to{opacity:1;-webkit-transform-origin:100% 0;transform-origin:100% 0;-webkit-transform:scaleX(1);transform:scaleX(1)}}@keyframes antSlideRightIn{0%{opacity:0;-webkit-transform-origin:100% 0;transform-origin:100% 0;-webkit-transform:scaleX(.8);transform:scaleX(.8)}to{opacity:1;-webkit-transform-origin:100% 0;transform-origin:100% 0;-webkit-transform:scaleX(1);transform:scaleX(1)}}@-webkit-keyframes antSlideRightOut{0%{opacity:1;-webkit-transform-origin:100% 0;transform-origin:100% 0;-webkit-transform:scaleX(1);transform:scaleX(1)}to{opacity:0;-webkit-transform-origin:100% 0;transform-origin:100% 0;-webkit-transform:scaleX(.8);transform:scaleX(.8)}}@keyframes antSlideRightOut{0%{opacity:1;-webkit-transform-origin:100% 0;transform-origin:100% 0;-webkit-transform:scaleX(1);transform:scaleX(1)}to{opacity:0;-webkit-transform-origin:100% 0;transform-origin:100% 0;-webkit-transform:scaleX(.8);transform:scaleX(.8)}}.swing-appear,.swing-enter{-webkit-animation-duration:.2s;animation-duration:.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-play-state:paused;animation-play-state:paused}.swing-appear.swing-appear-active,.swing-enter.swing-enter-active{-webkit-animation-name:antSwingIn;animation-name:antSwingIn;-webkit-animation-play-state:running;animation-play-state:running}@-webkit-keyframes antSwingIn{0%,to{-webkit-transform:translateX(0);transform:translateX(0)}20%{-webkit-transform:translateX(-10px);transform:translateX(-10px)}40%{-webkit-transform:translateX(10px);transform:translateX(10px)}60%{-webkit-transform:translateX(-5px);transform:translateX(-5px)}80%{-webkit-transform:translateX(5px);transform:translateX(5px)}}@keyframes antSwingIn{0%,to{-webkit-transform:translateX(0);transform:translateX(0)}20%{-webkit-transform:translateX(-10px);transform:translateX(-10px)}40%{-webkit-transform:translateX(10px);transform:translateX(10px)}60%{-webkit-transform:translateX(-5px);transform:translateX(-5px)}80%{-webkit-transform:translateX(5px);transform:translateX(5px)}}.zoom-appear,.zoom-enter,.zoom-leave{-webkit-animation-duration:.2s;animation-duration:.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-play-state:paused;animation-play-state:paused}.zoom-appear.zoom-appear-active,.zoom-enter.zoom-enter-active{-webkit-animation-name:antZoomIn;animation-name:antZoomIn;-webkit-animation-play-state:running;animation-play-state:running}.zoom-leave.zoom-leave-active{-webkit-animation-name:antZoomOut;animation-name:antZoomOut;-webkit-animation-play-state:running;animation-play-state:running;pointer-events:none}.zoom-appear,.zoom-enter{-webkit-transform:scale(0);-ms-transform:scale(0);transform:scale(0);-webkit-animation-timing-function:cubic-bezier(.08,.82,.17,1);animation-timing-function:cubic-bezier(.08,.82,.17,1)}.zoom-leave{-webkit-animation-timing-function:cubic-bezier(.78,.14,.15,.86);animation-timing-function:cubic-bezier(.78,.14,.15,.86)}.zoom-big-appear,.zoom-big-enter,.zoom-big-leave{-webkit-animation-duration:.2s;animation-duration:.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-play-state:paused;animation-play-state:paused}.zoom-big-appear.zoom-big-appear-active,.zoom-big-enter.zoom-big-enter-active{-webkit-animation-name:antZoomBigIn;animation-name:antZoomBigIn;-webkit-animation-play-state:running;animation-play-state:running}.zoom-big-leave.zoom-big-leave-active{-webkit-animation-name:antZoomBigOut;animation-name:antZoomBigOut;-webkit-animation-play-state:running;animation-play-state:running;pointer-events:none}.zoom-big-appear,.zoom-big-enter{-webkit-transform:scale(0);-ms-transform:scale(0);transform:scale(0);-webkit-animation-timing-function:cubic-bezier(.08,.82,.17,1);animation-timing-function:cubic-bezier(.08,.82,.17,1)}.zoom-big-leave{-webkit-animation-timing-function:cubic-bezier(.78,.14,.15,.86);animation-timing-function:cubic-bezier(.78,.14,.15,.86)}.zoom-big-fast-appear,.zoom-big-fast-enter,.zoom-big-fast-leave{-webkit-animation-duration:.1s;animation-duration:.1s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-play-state:paused;animation-play-state:paused}.zoom-big-fast-appear.zoom-big-fast-appear-active,.zoom-big-fast-enter.zoom-big-fast-enter-active{-webkit-animation-name:antZoomBigIn;animation-name:antZoomBigIn;-webkit-animation-play-state:running;animation-play-state:running}.zoom-big-fast-leave.zoom-big-fast-leave-active{-webkit-animation-name:antZoomBigOut;animation-name:antZoomBigOut;-webkit-animation-play-state:running;animation-play-state:running;pointer-events:none}.zoom-big-fast-appear,.zoom-big-fast-enter{-webkit-transform:scale(0);-ms-transform:scale(0);transform:scale(0);-webkit-animation-timing-function:cubic-bezier(.08,.82,.17,1);animation-timing-function:cubic-bezier(.08,.82,.17,1)}.zoom-big-fast-leave{-webkit-animation-timing-function:cubic-bezier(.78,.14,.15,.86);animation-timing-function:cubic-bezier(.78,.14,.15,.86)}.zoom-up-appear,.zoom-up-enter,.zoom-up-leave{-webkit-animation-duration:.2s;animation-duration:.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-play-state:paused;animation-play-state:paused}.zoom-up-appear.zoom-up-appear-active,.zoom-up-enter.zoom-up-enter-active{-webkit-animation-name:antZoomUpIn;animation-name:antZoomUpIn;-webkit-animation-play-state:running;animation-play-state:running}.zoom-up-leave.zoom-up-leave-active{-webkit-animation-name:antZoomUpOut;animation-name:antZoomUpOut;-webkit-animation-play-state:running;animation-play-state:running;pointer-events:none}.zoom-up-appear,.zoom-up-enter{-webkit-transform:scale(0);-ms-transform:scale(0);transform:scale(0);-webkit-animation-timing-function:cubic-bezier(.08,.82,.17,1);animation-timing-function:cubic-bezier(.08,.82,.17,1)}.zoom-up-leave{-webkit-animation-timing-function:cubic-bezier(.78,.14,.15,.86);animation-timing-function:cubic-bezier(.78,.14,.15,.86)}.zoom-down-appear,.zoom-down-enter,.zoom-down-leave{-webkit-animation-duration:.2s;animation-duration:.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-play-state:paused;animation-play-state:paused}.zoom-down-appear.zoom-down-appear-active,.zoom-down-enter.zoom-down-enter-active{-webkit-animation-name:antZoomDownIn;animation-name:antZoomDownIn;-webkit-animation-play-state:running;animation-play-state:running}.zoom-down-leave.zoom-down-leave-active{-webkit-animation-name:antZoomDownOut;animation-name:antZoomDownOut;-webkit-animation-play-state:running;animation-play-state:running;pointer-events:none}.zoom-down-appear,.zoom-down-enter{-webkit-transform:scale(0);-ms-transform:scale(0);transform:scale(0);-webkit-animation-timing-function:cubic-bezier(.08,.82,.17,1);animation-timing-function:cubic-bezier(.08,.82,.17,1)}.zoom-down-leave{-webkit-animation-timing-function:cubic-bezier(.78,.14,.15,.86);animation-timing-function:cubic-bezier(.78,.14,.15,.86)}.zoom-left-appear,.zoom-left-enter,.zoom-left-leave{-webkit-animation-duration:.2s;animation-duration:.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-play-state:paused;animation-play-state:paused}.zoom-left-appear.zoom-left-appear-active,.zoom-left-enter.zoom-left-enter-active{-webkit-animation-name:antZoomLeftIn;animation-name:antZoomLeftIn;-webkit-animation-play-state:running;animation-play-state:running}.zoom-left-leave.zoom-left-leave-active{-webkit-animation-name:antZoomLeftOut;animation-name:antZoomLeftOut;-webkit-animation-play-state:running;animation-play-state:running;pointer-events:none}.zoom-left-appear,.zoom-left-enter{-webkit-transform:scale(0);-ms-transform:scale(0);transform:scale(0);-webkit-animation-timing-function:cubic-bezier(.08,.82,.17,1);animation-timing-function:cubic-bezier(.08,.82,.17,1)}.zoom-left-leave{-webkit-animation-timing-function:cubic-bezier(.78,.14,.15,.86);animation-timing-function:cubic-bezier(.78,.14,.15,.86)}.zoom-right-appear,.zoom-right-enter,.zoom-right-leave{-webkit-animation-duration:.2s;animation-duration:.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-play-state:paused;animation-play-state:paused}.zoom-right-appear.zoom-right-appear-active,.zoom-right-enter.zoom-right-enter-active{-webkit-animation-name:antZoomRightIn;animation-name:antZoomRightIn;-webkit-animation-play-state:running;animation-play-state:running}.zoom-right-leave.zoom-right-leave-active{-webkit-animation-name:antZoomRightOut;animation-name:antZoomRightOut;-webkit-animation-play-state:running;animation-play-state:running;pointer-events:none}.zoom-right-appear,.zoom-right-enter{-webkit-transform:scale(0);-ms-transform:scale(0);transform:scale(0);-webkit-animation-timing-function:cubic-bezier(.08,.82,.17,1);animation-timing-function:cubic-bezier(.08,.82,.17,1)}.zoom-right-leave{-webkit-animation-timing-function:cubic-bezier(.78,.14,.15,.86);animation-timing-function:cubic-bezier(.78,.14,.15,.86)}@-webkit-keyframes antZoomIn{0%{opacity:0;-webkit-transform:scale(.2);transform:scale(.2)}to{opacity:1;-webkit-transform:scale(1);transform:scale(1)}}@keyframes antZoomIn{0%{opacity:0;-webkit-transform:scale(.2);transform:scale(.2)}to{opacity:1;-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes antZoomOut{0%{-webkit-transform:scale(1);transform:scale(1)}to{opacity:0;-webkit-transform:scale(.2);transform:scale(.2)}}@keyframes antZoomOut{0%{-webkit-transform:scale(1);transform:scale(1)}to{opacity:0;-webkit-transform:scale(.2);transform:scale(.2)}}@-webkit-keyframes antZoomBigIn{0%{opacity:0;-webkit-transform:scale(.8);transform:scale(.8)}to{-webkit-transform:scale(1);transform:scale(1)}}@keyframes antZoomBigIn{0%{opacity:0;-webkit-transform:scale(.8);transform:scale(.8)}to{-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes antZoomBigOut{0%{-webkit-transform:scale(1);transform:scale(1)}to{opacity:0;-webkit-transform:scale(.8);transform:scale(.8)}}@keyframes antZoomBigOut{0%{-webkit-transform:scale(1);transform:scale(1)}to{opacity:0;-webkit-transform:scale(.8);transform:scale(.8)}}@-webkit-keyframes antZoomUpIn{0%{opacity:0;-webkit-transform-origin:50% 0;transform-origin:50% 0;-webkit-transform:scale(.8);transform:scale(.8)}to{-webkit-transform-origin:50% 0;transform-origin:50% 0;-webkit-transform:scale(1);transform:scale(1)}}@keyframes antZoomUpIn{0%{opacity:0;-webkit-transform-origin:50% 0;transform-origin:50% 0;-webkit-transform:scale(.8);transform:scale(.8)}to{-webkit-transform-origin:50% 0;transform-origin:50% 0;-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes antZoomUpOut{0%{-webkit-transform-origin:50% 0;transform-origin:50% 0;-webkit-transform:scale(1);transform:scale(1)}to{opacity:0;-webkit-transform-origin:50% 0;transform-origin:50% 0;-webkit-transform:scale(.8);transform:scale(.8)}}@keyframes antZoomUpOut{0%{-webkit-transform-origin:50% 0;transform-origin:50% 0;-webkit-transform:scale(1);transform:scale(1)}to{opacity:0;-webkit-transform-origin:50% 0;transform-origin:50% 0;-webkit-transform:scale(.8);transform:scale(.8)}}@-webkit-keyframes antZoomLeftIn{0%{opacity:0;-webkit-transform-origin:0 50%;transform-origin:0 50%;-webkit-transform:scale(.8);transform:scale(.8)}to{-webkit-transform-origin:0 50%;transform-origin:0 50%;-webkit-transform:scale(1);transform:scale(1)}}@keyframes antZoomLeftIn{0%{opacity:0;-webkit-transform-origin:0 50%;transform-origin:0 50%;-webkit-transform:scale(.8);transform:scale(.8)}to{-webkit-transform-origin:0 50%;transform-origin:0 50%;-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes antZoomLeftOut{0%{-webkit-transform-origin:0 50%;transform-origin:0 50%;-webkit-transform:scale(1);transform:scale(1)}to{opacity:0;-webkit-transform-origin:0 50%;transform-origin:0 50%;-webkit-transform:scale(.8);transform:scale(.8)}}@keyframes antZoomLeftOut{0%{-webkit-transform-origin:0 50%;transform-origin:0 50%;-webkit-transform:scale(1);transform:scale(1)}to{opacity:0;-webkit-transform-origin:0 50%;transform-origin:0 50%;-webkit-transform:scale(.8);transform:scale(.8)}}@-webkit-keyframes antZoomRightIn{0%{opacity:0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%;-webkit-transform:scale(.8);transform:scale(.8)}to{-webkit-transform-origin:100% 50%;transform-origin:100% 50%;-webkit-transform:scale(1);transform:scale(1)}}@keyframes antZoomRightIn{0%{opacity:0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%;-webkit-transform:scale(.8);transform:scale(.8)}to{-webkit-transform-origin:100% 50%;transform-origin:100% 50%;-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes antZoomRightOut{0%{-webkit-transform-origin:100% 50%;transform-origin:100% 50%;-webkit-transform:scale(1);transform:scale(1)}to{opacity:0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%;-webkit-transform:scale(.8);transform:scale(.8)}}@keyframes antZoomRightOut{0%{-webkit-transform-origin:100% 50%;transform-origin:100% 50%;-webkit-transform:scale(1);transform:scale(1)}to{opacity:0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%;-webkit-transform:scale(.8);transform:scale(.8)}}@-webkit-keyframes antZoomDownIn{0%{opacity:0;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;-webkit-transform:scale(.8);transform:scale(.8)}to{-webkit-transform-origin:50% 100%;transform-origin:50% 100%;-webkit-transform:scale(1);transform:scale(1)}}@keyframes antZoomDownIn{0%{opacity:0;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;-webkit-transform:scale(.8);transform:scale(.8)}to{-webkit-transform-origin:50% 100%;transform-origin:50% 100%;-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes antZoomDownOut{0%{-webkit-transform-origin:50% 100%;transform-origin:50% 100%;-webkit-transform:scale(1);transform:scale(1)}to{opacity:0;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;-webkit-transform:scale(.8);transform:scale(.8)}}@keyframes antZoomDownOut{0%{-webkit-transform-origin:50% 100%;transform-origin:50% 100%;-webkit-transform:scale(1);transform:scale(1)}to{opacity:0;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;-webkit-transform:scale(.8);transform:scale(.8)}}.ant-motion-collapse{overflow:hidden}.ant-motion-collapse-active{-webkit-transition:height .15s cubic-bezier(.645,.045,.355,1),opacity .15s cubic-bezier(.645,.045,.355,1)!important;transition:height .15s cubic-bezier(.645,.045,.355,1),opacity .15s cubic-bezier(.645,.045,.355,1)!important}.ant-layout{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex:1;-webkit-flex:auto;-ms-flex:auto;flex:auto;background:#f0f2f5;min-height:0}.ant-layout,.ant-layout *{-webkit-box-sizing:border-box;box-sizing:border-box}.ant-layout.ant-layout-has-sider{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row}.ant-layout.ant-layout-has-sider.ant-layout,.ant-layout.ant-layout-has-sider.ant-layout-content{overflow-x:hidden}.ant-layout-footer,.ant-layout-header{-webkit-box-flex:0;-webkit-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto}.ant-layout-header{background:#001529;padding:0 50px;height:64px;line-height:64px}.ant-layout-footer{background:#f0f2f5;padding:24px 50px;color:rgba(0,0,0,.65);font-size:14px}.ant-layout-content{-webkit-box-flex:1;-webkit-flex:auto;-ms-flex:auto;flex:auto;min-height:0}.ant-layout-sider{-webkit-transition:all .2s;transition:all .2s;position:relative;background:#001529;min-width:0}.ant-layout-sider-children{height:100%;padding-top:.1px;margin-top:-.1px}.ant-layout-sider-has-trigger{padding-bottom:48px}.ant-layout-sider-right{-webkit-box-ordinal-group:2;-webkit-order:1;-ms-flex-order:1;order:1}.ant-layout-sider-trigger{position:fixed;text-align:center;bottom:0;cursor:pointer;height:48px;line-height:48px;color:#fff;background:#002140;z-index:1;-webkit-transition:all .2s;transition:all .2s}.ant-layout-sider-zero-width*{overflow:hidden}.ant-layout-sider-zero-width-trigger{position:absolute;top:64px;right:-36px;text-align:center;width:36px;height:42px;line-height:42px;background:#001529;color:#fff;font-size:18px;border-radius:0 4px 4px 0;cursor:pointer;-webkit-transition:background .3s ease;transition:background .3s ease}.ant-layout-sider-zero-width-trigger:hover{background:#192c3e}.ant-layout-sider-light{background:#fff}.ant-layout-sider-light .ant-layout-sider-trigger,.ant-layout-sider-light .ant-layout-sider-zero-width-trigger{color:rgba(0,0,0,.65);background:#fff}body,html{height:100%;width:100%;margin:0;padding:0}body,body *,html,html *{-webkit-box-sizing:border-box;-khtml-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;-o-box-sizing:border-box;box-sizing:border-box}body{overflow:hidden;font-size:14px;color:#4a4a4a;font-family:sans-serif}body textarea{vertical-align:top;border:1px solid #bbb;border-radius:3px}body textarea:focus{border-color:#14a1f0}body input,body select,body textarea{color:#4a4a4a}h1{font-size:24px}h2{font-size:18px}h3{font-size:14px}p{margin:0}a{text-decoration:none}button,input{border:0}input{outline:0}input[type=password]{letter-spacing:1px}a:focus,button:focus,input:focus,textarea:focus{outline:none}.field--require{color:#f25f43;margin-left:4px;vertical-align:middle}.body-wrapper{width:75vw;height:100vh;overflow:auto;position:relative}.color--red{color:#f25f43}.color--grey{color:#9b9b9b}.color--blue{color:#14a1f0}.color--black{color:#4a4a4a}.color--white{color:#fff}.background--red{background-color:#d0011b}.background--orange{background-color:#de5200}.background--yellow{background-color:#f5a623}.background--green{background-color:#7ed321}.background--brown{background-color:#b17641}.background--grey{background-color:#ccc}.text--normal{font-weight:400}.text--semibold{font-weight:600}.text--bold{font-weight:700}.text--left{text-align:left}.text--center{text-align:center}.text--right{text-align:right}.display--flex{display:flex}.display--inline-flex{display:inline-flex}.display--inline-block{display:inline-block}.display--block{display:block}.btn--inline{display:inline-block;margin:30px 10px 0!important;min-width:125px!important;text-align:center;height:40px;padding:0;line-height:40px;border-radius:3px;font-size:14px;font-weight:700;cursor:pointer}.btn--remove-item{font-size:18px;color:#f25f43;line-height:36px;cursor:pointer}.btn--add-item{color:#14a1f0;line-height:36px;cursor:pointer}.btn--add-item:hover{text-decoration:underline}.text-align--left{text-align:left}.text-align--center{text-align:center}.text-align--right{text-align:right}.flex-wrap{flex-wrap:wrap}.align-item-center{-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center}.ant-layout{position:relative;min-height:100vh;overflow:auto}.ant-layout .ant-layout-header{top:0;position:sticky!important;z-index:1000!important;height:64px;background:#2a2b50}.ant-layout .ant-layout-header .ant-menu-dark{background:#2a2b50!important}.ant-layout .ant-layout-content{padding:0 50px}.ant-layout .ant-layout-footer{padding:16px;border-top:1px solid #9b9b9b;background:#d6d6d7}.ant-btn{line-height:1.499;display:inline-block;font-weight:400;text-align:center;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;background-image:none;border:1px solid transparent;white-space:nowrap;padding:0 15px;font-size:14px;border-radius:4px;height:32px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-transition:all .3s cubic-bezier(.645,.045,.355,1);transition:all .3s cubic-bezier(.645,.045,.355,1);position:relative;-webkit-box-shadow:0 2px 0 rgba(0,0,0,.015);box-shadow:0 2px 0 rgba(0,0,0,.015);color:rgba(0,0,0,.65);background-color:#fff;border-color:#d9d9d9}.ant-btn.anticon{line-height:1}.ant-btn,.ant-btn:active,.ant-btn:focus{outline:0}.ant-btn:not([disabled]):hover{text-decoration:none}.ant-btn:not([disabled]):active{outline:0;-webkit-box-shadow:none;box-shadow:none}.ant-btn.disabled,.ant-btn[disabled]{cursor:not-allowed}.ant-btn.disabled*,.ant-btn[disabled]*{pointer-events:none}.ant-btn-lg{padding:0 15px;font-size:16px;border-radius:4px;height:40px}.ant-btn-sm{padding:0 7px;font-size:14px;border-radius:4px;height:24px}.ant-btna:only-child{color:currentColor}.ant-btna:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn:focus,.ant-btn:hover{color:#40a9ff;background-color:#fff;border-color:#40a9ff}.ant-btn:focusa:only-child,.ant-btn:hovera:only-child{color:currentColor}.ant-btn:focusa:only-child:after,.ant-btn:hovera:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn.active,.ant-btn:active{color:#096dd9;background-color:#fff;border-color:#096dd9}.ant-btn.activea:only-child,.ant-btn:activea:only-child{color:currentColor}.ant-btn.activea:only-child:after,.ant-btn:activea:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-disabled,.ant-btn-disabled.active,.ant-btn-disabled:active,.ant-btn-disabled:focus,.ant-btn-disabled:hover,.ant-btn.disabled,.ant-btn.disabled.active,.ant-btn.disabled:active,.ant-btn.disabled:focus,.ant-btn.disabled:hover,.ant-btn[disabled],.ant-btn[disabled].active,.ant-btn[disabled]:active,.ant-btn[disabled]:focus,.ant-btn[disabled]:hover{color:rgba(0,0,0,.25);background-color:#f5f5f5;border-color:#d9d9d9;text-shadow:none;-webkit-box-shadow:none;box-shadow:none}.ant-btn-disabled.activea:only-child,.ant-btn-disabled:activea:only-child,.ant-btn-disabled:focusa:only-child,.ant-btn-disabled:hovera:only-child,.ant-btn-disableda:only-child,.ant-btn.disabled.activea:only-child,.ant-btn.disabled:activea:only-child,.ant-btn.disabled:focusa:only-child,.ant-btn.disabled:hovera:only-child,.ant-btn.disableda:only-child,.ant-btn[disabled].activea:only-child,.ant-btn[disabled]:activea:only-child,.ant-btn[disabled]:focusa:only-child,.ant-btn[disabled]:hovera:only-child,.ant-btn[disabled]a:only-child{color:currentColor}.ant-btn-disabled.activea:only-child:after,.ant-btn-disabled:activea:only-child:after,.ant-btn-disabled:focusa:only-child:after,.ant-btn-disabled:hovera:only-child:after,.ant-btn-disableda:only-child:after,.ant-btn.disabled.activea:only-child:after,.ant-btn.disabled:activea:only-child:after,.ant-btn.disabled:focusa:only-child:after,.ant-btn.disabled:hovera:only-child:after,.ant-btn.disableda:only-child:after,.ant-btn[disabled].activea:only-child:after,.ant-btn[disabled]:activea:only-child:after,.ant-btn[disabled]:focusa:only-child:after,.ant-btn[disabled]:hovera:only-child:after,.ant-btn[disabled]a:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn.active,.ant-btn:active,.ant-btn:focus,.ant-btn:hover{background:#fff;text-decoration:none}.ant-btni,.ant-btnspan{pointer-events:none;display:inline-block}.ant-btn-primary{color:#fff;background-color:#1890ff;border-color:#1890ff;text-shadow:0 -1px 0 rgba(0,0,0,.12);-webkit-box-shadow:0 2px 0 rgba(0,0,0,.045);box-shadow:0 2px 0 rgba(0,0,0,.045)}.ant-btn-primarya:only-child{color:currentColor}.ant-btn-primarya:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-primary:focus,.ant-btn-primary:hover{color:#fff;background-color:#40a9ff;border-color:#40a9ff}.ant-btn-primary:focusa:only-child,.ant-btn-primary:hovera:only-child{color:currentColor}.ant-btn-primary:focusa:only-child:after,.ant-btn-primary:hovera:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-primary.active,.ant-btn-primary:active{color:#fff;background-color:#096dd9;border-color:#096dd9}.ant-btn-primary.activea:only-child,.ant-btn-primary:activea:only-child{color:currentColor}.ant-btn-primary.activea:only-child:after,.ant-btn-primary:activea:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-primary-disabled,.ant-btn-primary-disabled.active,.ant-btn-primary-disabled:active,.ant-btn-primary-disabled:focus,.ant-btn-primary-disabled:hover,.ant-btn-primary.disabled,.ant-btn-primary.disabled.active,.ant-btn-primary.disabled:active,.ant-btn-primary.disabled:focus,.ant-btn-primary.disabled:hover,.ant-btn-primary[disabled],.ant-btn-primary[disabled].active,.ant-btn-primary[disabled]:active,.ant-btn-primary[disabled]:focus,.ant-btn-primary[disabled]:hover{color:rgba(0,0,0,.25);background-color:#f5f5f5;border-color:#d9d9d9;text-shadow:none;-webkit-box-shadow:none;box-shadow:none}.ant-btn-primary-disabled.activea:only-child,.ant-btn-primary-disabled:activea:only-child,.ant-btn-primary-disabled:focusa:only-child,.ant-btn-primary-disabled:hovera:only-child,.ant-btn-primary-disableda:only-child,.ant-btn-primary.disabled.activea:only-child,.ant-btn-primary.disabled:activea:only-child,.ant-btn-primary.disabled:focusa:only-child,.ant-btn-primary.disabled:hovera:only-child,.ant-btn-primary.disableda:only-child,.ant-btn-primary[disabled].activea:only-child,.ant-btn-primary[disabled]:activea:only-child,.ant-btn-primary[disabled]:focusa:only-child,.ant-btn-primary[disabled]:hovera:only-child,.ant-btn-primary[disabled]a:only-child{color:currentColor}.ant-btn-primary-disabled.activea:only-child:after,.ant-btn-primary-disabled:activea:only-child:after,.ant-btn-primary-disabled:focusa:only-child:after,.ant-btn-primary-disabled:hovera:only-child:after,.ant-btn-primary-disableda:only-child:after,.ant-btn-primary.disabled.activea:only-child:after,.ant-btn-primary.disabled:activea:only-child:after,.ant-btn-primary.disabled:focusa:only-child:after,.ant-btn-primary.disabled:hovera:only-child:after,.ant-btn-primary.disableda:only-child:after,.ant-btn-primary[disabled].activea:only-child:after,.ant-btn-primary[disabled]:activea:only-child:after,.ant-btn-primary[disabled]:focusa:only-child:after,.ant-btn-primary[disabled]:hovera:only-child:after,.ant-btn-primary[disabled]a:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-group .ant-btn-primary:not(:first-child):not(:last-child){border-right-color:#40a9ff;border-left-color:#40a9ff}.ant-btn-group .ant-btn-primary:not(:first-child):not(:last-child):disabled{border-color:#d9d9d9}.ant-btn-group .ant-btn-primary:first-child:not(:last-child){border-right-color:#40a9ff}.ant-btn-group .ant-btn-primary:first-child:not(:last-child)[disabled]{border-right-color:#d9d9d9}.ant-btn-group .ant-btn-primary+.ant-btn-primary,.ant-btn-group .ant-btn-primary:last-child:not(:first-child){border-left-color:#40a9ff}.ant-btn-group .ant-btn-primary+.ant-btn-primary[disabled],.ant-btn-group .ant-btn-primary:last-child:not(:first-child)[disabled]{border-left-color:#d9d9d9}.ant-btn-ghost{color:rgba(0,0,0,.65);background-color:transparent;border-color:#d9d9d9}.ant-btn-ghosta:only-child{color:currentColor}.ant-btn-ghosta:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-ghost:focus,.ant-btn-ghost:hover{color:#40a9ff;background-color:transparent;border-color:#40a9ff}.ant-btn-ghost:focusa:only-child,.ant-btn-ghost:hovera:only-child{color:currentColor}.ant-btn-ghost:focusa:only-child:after,.ant-btn-ghost:hovera:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-ghost.active,.ant-btn-ghost:active{color:#096dd9;background-color:transparent;border-color:#096dd9}.ant-btn-ghost.activea:only-child,.ant-btn-ghost:activea:only-child{color:currentColor}.ant-btn-ghost.activea:only-child:after,.ant-btn-ghost:activea:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-ghost-disabled,.ant-btn-ghost-disabled.active,.ant-btn-ghost-disabled:active,.ant-btn-ghost-disabled:focus,.ant-btn-ghost-disabled:hover,.ant-btn-ghost.disabled,.ant-btn-ghost.disabled.active,.ant-btn-ghost.disabled:active,.ant-btn-ghost.disabled:focus,.ant-btn-ghost.disabled:hover,.ant-btn-ghost[disabled],.ant-btn-ghost[disabled].active,.ant-btn-ghost[disabled]:active,.ant-btn-ghost[disabled]:focus,.ant-btn-ghost[disabled]:hover{color:rgba(0,0,0,.25);background-color:#f5f5f5;border-color:#d9d9d9;text-shadow:none;-webkit-box-shadow:none;box-shadow:none}.ant-btn-ghost-disabled.activea:only-child,.ant-btn-ghost-disabled:activea:only-child,.ant-btn-ghost-disabled:focusa:only-child,.ant-btn-ghost-disabled:hovera:only-child,.ant-btn-ghost-disableda:only-child,.ant-btn-ghost.disabled.activea:only-child,.ant-btn-ghost.disabled:activea:only-child,.ant-btn-ghost.disabled:focusa:only-child,.ant-btn-ghost.disabled:hovera:only-child,.ant-btn-ghost.disableda:only-child,.ant-btn-ghost[disabled].activea:only-child,.ant-btn-ghost[disabled]:activea:only-child,.ant-btn-ghost[disabled]:focusa:only-child,.ant-btn-ghost[disabled]:hovera:only-child,.ant-btn-ghost[disabled]a:only-child{color:currentColor}.ant-btn-ghost-disabled.activea:only-child:after,.ant-btn-ghost-disabled:activea:only-child:after,.ant-btn-ghost-disabled:focusa:only-child:after,.ant-btn-ghost-disabled:hovera:only-child:after,.ant-btn-ghost-disableda:only-child:after,.ant-btn-ghost.disabled.activea:only-child:after,.ant-btn-ghost.disabled:activea:only-child:after,.ant-btn-ghost.disabled:focusa:only-child:after,.ant-btn-ghost.disabled:hovera:only-child:after,.ant-btn-ghost.disableda:only-child:after,.ant-btn-ghost[disabled].activea:only-child:after,.ant-btn-ghost[disabled]:activea:only-child:after,.ant-btn-ghost[disabled]:focusa:only-child:after,.ant-btn-ghost[disabled]:hovera:only-child:after,.ant-btn-ghost[disabled]a:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-dashed{color:rgba(0,0,0,.65);background-color:#fff;border-color:#d9d9d9;border-style:dashed}.ant-btn-dasheda:only-child{color:currentColor}.ant-btn-dasheda:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-dashed:focus,.ant-btn-dashed:hover{color:#40a9ff;background-color:#fff;border-color:#40a9ff}.ant-btn-dashed:focusa:only-child,.ant-btn-dashed:hovera:only-child{color:currentColor}.ant-btn-dashed:focusa:only-child:after,.ant-btn-dashed:hovera:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-dashed.active,.ant-btn-dashed:active{color:#096dd9;background-color:#fff;border-color:#096dd9}.ant-btn-dashed.activea:only-child,.ant-btn-dashed:activea:only-child{color:currentColor}.ant-btn-dashed.activea:only-child:after,.ant-btn-dashed:activea:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-dashed-disabled,.ant-btn-dashed-disabled.active,.ant-btn-dashed-disabled:active,.ant-btn-dashed-disabled:focus,.ant-btn-dashed-disabled:hover,.ant-btn-dashed.disabled,.ant-btn-dashed.disabled.active,.ant-btn-dashed.disabled:active,.ant-btn-dashed.disabled:focus,.ant-btn-dashed.disabled:hover,.ant-btn-dashed[disabled],.ant-btn-dashed[disabled].active,.ant-btn-dashed[disabled]:active,.ant-btn-dashed[disabled]:focus,.ant-btn-dashed[disabled]:hover{color:rgba(0,0,0,.25);background-color:#f5f5f5;border-color:#d9d9d9;text-shadow:none;-webkit-box-shadow:none;box-shadow:none}.ant-btn-dashed-disabled.activea:only-child,.ant-btn-dashed-disabled:activea:only-child,.ant-btn-dashed-disabled:focusa:only-child,.ant-btn-dashed-disabled:hovera:only-child,.ant-btn-dashed-disableda:only-child,.ant-btn-dashed.disabled.activea:only-child,.ant-btn-dashed.disabled:activea:only-child,.ant-btn-dashed.disabled:focusa:only-child,.ant-btn-dashed.disabled:hovera:only-child,.ant-btn-dashed.disableda:only-child,.ant-btn-dashed[disabled].activea:only-child,.ant-btn-dashed[disabled]:activea:only-child,.ant-btn-dashed[disabled]:focusa:only-child,.ant-btn-dashed[disabled]:hovera:only-child,.ant-btn-dashed[disabled]a:only-child{color:currentColor}.ant-btn-dashed-disabled.activea:only-child:after,.ant-btn-dashed-disabled:activea:only-child:after,.ant-btn-dashed-disabled:focusa:only-child:after,.ant-btn-dashed-disabled:hovera:only-child:after,.ant-btn-dashed-disableda:only-child:after,.ant-btn-dashed.disabled.activea:only-child:after,.ant-btn-dashed.disabled:activea:only-child:after,.ant-btn-dashed.disabled:focusa:only-child:after,.ant-btn-dashed.disabled:hovera:only-child:after,.ant-btn-dashed.disableda:only-child:after,.ant-btn-dashed[disabled].activea:only-child:after,.ant-btn-dashed[disabled]:activea:only-child:after,.ant-btn-dashed[disabled]:focusa:only-child:after,.ant-btn-dashed[disabled]:hovera:only-child:after,.ant-btn-dashed[disabled]a:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-danger{color:#f5222d;background-color:#f5f5f5;border-color:#d9d9d9}.ant-btn-dangera:only-child{color:currentColor}.ant-btn-dangera:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-danger:hover{color:#fff;background-color:#ff4d4f;border-color:#ff4d4f}.ant-btn-danger:hovera:only-child{color:currentColor}.ant-btn-danger:hovera:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-danger:focus{color:#ff4d4f;background-color:#fff;border-color:#ff4d4f}.ant-btn-danger:focusa:only-child{color:currentColor}.ant-btn-danger:focusa:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-danger.active,.ant-btn-danger:active{color:#fff;background-color:#cf1322;border-color:#cf1322}.ant-btn-danger.activea:only-child,.ant-btn-danger:activea:only-child{color:currentColor}.ant-btn-danger.activea:only-child:after,.ant-btn-danger:activea:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-danger-disabled,.ant-btn-danger-disabled.active,.ant-btn-danger-disabled:active,.ant-btn-danger-disabled:focus,.ant-btn-danger-disabled:hover,.ant-btn-danger.disabled,.ant-btn-danger.disabled.active,.ant-btn-danger.disabled:active,.ant-btn-danger.disabled:focus,.ant-btn-danger.disabled:hover,.ant-btn-danger[disabled],.ant-btn-danger[disabled].active,.ant-btn-danger[disabled]:active,.ant-btn-danger[disabled]:focus,.ant-btn-danger[disabled]:hover{color:rgba(0,0,0,.25);background-color:#f5f5f5;border-color:#d9d9d9;text-shadow:none;-webkit-box-shadow:none;box-shadow:none}.ant-btn-danger-disabled.activea:only-child,.ant-btn-danger-disabled:activea:only-child,.ant-btn-danger-disabled:focusa:only-child,.ant-btn-danger-disabled:hovera:only-child,.ant-btn-danger-disableda:only-child,.ant-btn-danger.disabled.activea:only-child,.ant-btn-danger.disabled:activea:only-child,.ant-btn-danger.disabled:focusa:only-child,.ant-btn-danger.disabled:hovera:only-child,.ant-btn-danger.disableda:only-child,.ant-btn-danger[disabled].activea:only-child,.ant-btn-danger[disabled]:activea:only-child,.ant-btn-danger[disabled]:focusa:only-child,.ant-btn-danger[disabled]:hovera:only-child,.ant-btn-danger[disabled]a:only-child{color:currentColor}.ant-btn-danger-disabled.activea:only-child:after,.ant-btn-danger-disabled:activea:only-child:after,.ant-btn-danger-disabled:focusa:only-child:after,.ant-btn-danger-disabled:hovera:only-child:after,.ant-btn-danger-disableda:only-child:after,.ant-btn-danger.disabled.activea:only-child:after,.ant-btn-danger.disabled:activea:only-child:after,.ant-btn-danger.disabled:focusa:only-child:after,.ant-btn-danger.disabled:hovera:only-child:after,.ant-btn-danger.disableda:only-child:after,.ant-btn-danger[disabled].activea:only-child:after,.ant-btn-danger[disabled]:activea:only-child:after,.ant-btn-danger[disabled]:focusa:only-child:after,.ant-btn-danger[disabled]:hovera:only-child:after,.ant-btn-danger[disabled]a:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-circle,.ant-btn-circle-outline{width:32px;padding:0;font-size:16px;border-radius:50%;height:32px}.ant-btn-circle-outline.ant-btn-lg,.ant-btn-circle.ant-btn-lg{width:40px;padding:0;font-size:18px;border-radius:50%;height:40px}.ant-btn-circle-outline.ant-btn-sm,.ant-btn-circle.ant-btn-sm{width:24px;padding:0;font-size:14px;border-radius:50%;height:24px}.ant-btn:before{position:absolute;top:-1px;left:-1px;bottom:-1px;right:-1px;background:#fff;opacity:.35;content:\"\";border-radius:inherit;z-index:1;-webkit-transition:opacity .2s;transition:opacity .2s;pointer-events:none;display:none}.ant-btn .anticon{-webkit-transition:margin-left .3s cubic-bezier(.645,.045,.355,1);transition:margin-left .3s cubic-bezier(.645,.045,.355,1)}.ant-btn .anticon.anticon-minussvg,.ant-btn .anticon.anticon-plussvg{shape-rendering:optimizeSpeed}.ant-btn.ant-btn-loading:before{display:block}.ant-btn.ant-btn-loading:not(.ant-btn-circle):not(.ant-btn-circle-outline):not(.ant-btn-icon-only){padding-left:29px;pointer-events:none;position:relative}.ant-btn.ant-btn-loading:not(.ant-btn-circle):not(.ant-btn-circle-outline):not(.ant-btn-icon-only) .anticon:not(:last-child){margin-left:-14px}.ant-btn-sm.ant-btn-loading:not(.ant-btn-circle):not(.ant-btn-circle-outline):not(.ant-btn-icon-only){padding-left:24px}.ant-btn-sm.ant-btn-loading:not(.ant-btn-circle):not(.ant-btn-circle-outline):not(.ant-btn-icon-only) .anticon{margin-left:-17px}.ant-btn-group{display:inline-block}.ant-btn-group,.ant-btn-group.ant-btn,.ant-btn-groupspan.ant-btn{position:relative}.ant-btn-group.ant-btn.active,.ant-btn-group.ant-btn:active,.ant-btn-group.ant-btn:focus,.ant-btn-group.ant-btn:hover,.ant-btn-groupspan.ant-btn.active,.ant-btn-groupspan.ant-btn:active,.ant-btn-groupspan.ant-btn:focus,.ant-btn-groupspan.ant-btn:hover{z-index:2}.ant-btn-group.ant-btn:disabled,.ant-btn-groupspan.ant-btn:disabled{z-index:0}.ant-btn-group-lg.ant-btn,.ant-btn-group-lgspan.ant-btn{padding:0 15px;font-size:16px;border-radius:0;height:40px;line-height:38px}.ant-btn-group-sm.ant-btn,.ant-btn-group-smspan.ant-btn{padding:0 7px;font-size:14px;border-radius:0;height:24px;line-height:22px}.ant-btn-group-sm.ant-btn.anticon,.ant-btn-group-smspan.ant-btn.anticon{font-size:14px}.ant-btn+.ant-btn-group,.ant-btn-group+.ant-btn,.ant-btn-group+.ant-btn-group,.ant-btn-group .ant-btn+.ant-btn,.ant-btn-group .ant-btn+span,.ant-btn-groupspan+span,.ant-btn-group span+.ant-btn{margin-left:-1px}.ant-btn-group .ant-btn-primary+.ant-btn:not(.ant-btn-primary):not([disabled]){border-left-color:transparent}.ant-btn-group .ant-btn{border-radius:0}.ant-btn-group.ant-btn:first-child,.ant-btn-groupspan:first-child.ant-btn{margin-left:0}.ant-btn-group.ant-btn:only-child,.ant-btn-groupspan:only-child.ant-btn{border-radius:4px}.ant-btn-group.ant-btn:first-child:not(:last-child),.ant-btn-groupspan:first-child:not(:last-child).ant-btn{border-bottom-left-radius:4px;border-top-left-radius:4px}.ant-btn-group.ant-btn:last-child:not(:first-child),.ant-btn-groupspan:last-child:not(:first-child).ant-btn{border-bottom-right-radius:4px;border-top-right-radius:4px}.ant-btn-group-sm.ant-btn:only-child,.ant-btn-group-smspan:only-child.ant-btn{border-radius:4px}.ant-btn-group-sm.ant-btn:first-child:not(:last-child),.ant-btn-group-smspan:first-child:not(:last-child).ant-btn{border-bottom-left-radius:4px;border-top-left-radius:4px}.ant-btn-group-sm.ant-btn:last-child:not(:first-child),.ant-btn-group-smspan:last-child:not(:first-child).ant-btn{border-bottom-right-radius:4px;border-top-right-radius:4px}.ant-btn-group.ant-btn-group{float:left}.ant-btn-group.ant-btn-group:not(:first-child):not(:last-child).ant-btn{border-radius:0}.ant-btn-group.ant-btn-group:first-child:not(:last-child).ant-btn:last-child{border-bottom-right-radius:0;border-top-right-radius:0;padding-right:8px}.ant-btn-group.ant-btn-group:last-child:not(:first-child).ant-btn:first-child{border-bottom-left-radius:0;border-top-left-radius:0;padding-left:8px}.ant-btn:not(.ant-btn-circle):not(.ant-btn-circle-outline).ant-btn-icon-only{padding-left:8px;padding-right:8px}.ant-btn:activespan,.ant-btn:focusspan{position:relative}.ant-btn.anticon+span,.ant-btnspan+.anticon{margin-left:8px}.ant-btn-background-ghost{background:transparent!important;border-color:#fff;color:#fff}.ant-btn-background-ghost.ant-btn-primary{color:#1890ff;background-color:transparent;border-color:#1890ff;text-shadow:none}.ant-btn-background-ghost.ant-btn-primarya:only-child{color:currentColor}.ant-btn-background-ghost.ant-btn-primarya:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-background-ghost.ant-btn-primary:focus,.ant-btn-background-ghost.ant-btn-primary:hover{color:#40a9ff;background-color:transparent;border-color:#40a9ff}.ant-btn-background-ghost.ant-btn-primary:focusa:only-child,.ant-btn-background-ghost.ant-btn-primary:hovera:only-child{color:currentColor}.ant-btn-background-ghost.ant-btn-primary:focusa:only-child:after,.ant-btn-background-ghost.ant-btn-primary:hovera:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-background-ghost.ant-btn-primary.active,.ant-btn-background-ghost.ant-btn-primary:active{color:#096dd9;background-color:transparent;border-color:#096dd9}.ant-btn-background-ghost.ant-btn-primary.activea:only-child,.ant-btn-background-ghost.ant-btn-primary:activea:only-child{color:currentColor}.ant-btn-background-ghost.ant-btn-primary.activea:only-child:after,.ant-btn-background-ghost.ant-btn-primary:activea:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-background-ghost.ant-btn-primary-disabled,.ant-btn-background-ghost.ant-btn-primary-disabled.active,.ant-btn-background-ghost.ant-btn-primary-disabled:active,.ant-btn-background-ghost.ant-btn-primary-disabled:focus,.ant-btn-background-ghost.ant-btn-primary-disabled:hover,.ant-btn-background-ghost.ant-btn-primary.disabled,.ant-btn-background-ghost.ant-btn-primary.disabled.active,.ant-btn-background-ghost.ant-btn-primary.disabled:active,.ant-btn-background-ghost.ant-btn-primary.disabled:focus,.ant-btn-background-ghost.ant-btn-primary.disabled:hover,.ant-btn-background-ghost.ant-btn-primary[disabled],.ant-btn-background-ghost.ant-btn-primary[disabled].active,.ant-btn-background-ghost.ant-btn-primary[disabled]:active,.ant-btn-background-ghost.ant-btn-primary[disabled]:focus,.ant-btn-background-ghost.ant-btn-primary[disabled]:hover{color:rgba(0,0,0,.25);background-color:#f5f5f5;border-color:#d9d9d9;text-shadow:none;-webkit-box-shadow:none;box-shadow:none}.ant-btn-background-ghost.ant-btn-primary-disabled.activea:only-child,.ant-btn-background-ghost.ant-btn-primary-disabled:activea:only-child,.ant-btn-background-ghost.ant-btn-primary-disabled:focusa:only-child,.ant-btn-background-ghost.ant-btn-primary-disabled:hovera:only-child,.ant-btn-background-ghost.ant-btn-primary-disableda:only-child,.ant-btn-background-ghost.ant-btn-primary.disabled.activea:only-child,.ant-btn-background-ghost.ant-btn-primary.disabled:activea:only-child,.ant-btn-background-ghost.ant-btn-primary.disabled:focusa:only-child,.ant-btn-background-ghost.ant-btn-primary.disabled:hovera:only-child,.ant-btn-background-ghost.ant-btn-primary.disableda:only-child,.ant-btn-background-ghost.ant-btn-primary[disabled].activea:only-child,.ant-btn-background-ghost.ant-btn-primary[disabled]:activea:only-child,.ant-btn-background-ghost.ant-btn-primary[disabled]:focusa:only-child,.ant-btn-background-ghost.ant-btn-primary[disabled]:hovera:only-child,.ant-btn-background-ghost.ant-btn-primary[disabled]a:only-child{color:currentColor}.ant-btn-background-ghost.ant-btn-primary-disabled.activea:only-child:after,.ant-btn-background-ghost.ant-btn-primary-disabled:activea:only-child:after,.ant-btn-background-ghost.ant-btn-primary-disabled:focusa:only-child:after,.ant-btn-background-ghost.ant-btn-primary-disabled:hovera:only-child:after,.ant-btn-background-ghost.ant-btn-primary-disableda:only-child:after,.ant-btn-background-ghost.ant-btn-primary.disabled.activea:only-child:after,.ant-btn-background-ghost.ant-btn-primary.disabled:activea:only-child:after,.ant-btn-background-ghost.ant-btn-primary.disabled:focusa:only-child:after,.ant-btn-background-ghost.ant-btn-primary.disabled:hovera:only-child:after,.ant-btn-background-ghost.ant-btn-primary.disableda:only-child:after,.ant-btn-background-ghost.ant-btn-primary[disabled].activea:only-child:after,.ant-btn-background-ghost.ant-btn-primary[disabled]:activea:only-child:after,.ant-btn-background-ghost.ant-btn-primary[disabled]:focusa:only-child:after,.ant-btn-background-ghost.ant-btn-primary[disabled]:hovera:only-child:after,.ant-btn-background-ghost.ant-btn-primary[disabled]a:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-background-ghost.ant-btn-danger{color:#f5222d;background-color:transparent;border-color:#f5222d;text-shadow:none}.ant-btn-background-ghost.ant-btn-dangera:only-child{color:currentColor}.ant-btn-background-ghost.ant-btn-dangera:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-background-ghost.ant-btn-danger:focus,.ant-btn-background-ghost.ant-btn-danger:hover{color:#ff4d4f;background-color:transparent;border-color:#ff4d4f}.ant-btn-background-ghost.ant-btn-danger:focusa:only-child,.ant-btn-background-ghost.ant-btn-danger:hovera:only-child{color:currentColor}.ant-btn-background-ghost.ant-btn-danger:focusa:only-child:after,.ant-btn-background-ghost.ant-btn-danger:hovera:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-background-ghost.ant-btn-danger.active,.ant-btn-background-ghost.ant-btn-danger:active{color:#cf1322;background-color:transparent;border-color:#cf1322}.ant-btn-background-ghost.ant-btn-danger.activea:only-child,.ant-btn-background-ghost.ant-btn-danger:activea:only-child{color:currentColor}.ant-btn-background-ghost.ant-btn-danger.activea:only-child:after,.ant-btn-background-ghost.ant-btn-danger:activea:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-background-ghost.ant-btn-danger-disabled,.ant-btn-background-ghost.ant-btn-danger-disabled.active,.ant-btn-background-ghost.ant-btn-danger-disabled:active,.ant-btn-background-ghost.ant-btn-danger-disabled:focus,.ant-btn-background-ghost.ant-btn-danger-disabled:hover,.ant-btn-background-ghost.ant-btn-danger.disabled,.ant-btn-background-ghost.ant-btn-danger.disabled.active,.ant-btn-background-ghost.ant-btn-danger.disabled:active,.ant-btn-background-ghost.ant-btn-danger.disabled:focus,.ant-btn-background-ghost.ant-btn-danger.disabled:hover,.ant-btn-background-ghost.ant-btn-danger[disabled],.ant-btn-background-ghost.ant-btn-danger[disabled].active,.ant-btn-background-ghost.ant-btn-danger[disabled]:active,.ant-btn-background-ghost.ant-btn-danger[disabled]:focus,.ant-btn-background-ghost.ant-btn-danger[disabled]:hover{color:rgba(0,0,0,.25);background-color:#f5f5f5;border-color:#d9d9d9;text-shadow:none;-webkit-box-shadow:none;box-shadow:none}.ant-btn-background-ghost.ant-btn-danger-disabled.activea:only-child,.ant-btn-background-ghost.ant-btn-danger-disabled:activea:only-child,.ant-btn-background-ghost.ant-btn-danger-disabled:focusa:only-child,.ant-btn-background-ghost.ant-btn-danger-disabled:hovera:only-child,.ant-btn-background-ghost.ant-btn-danger-disableda:only-child,.ant-btn-background-ghost.ant-btn-danger.disabled.activea:only-child,.ant-btn-background-ghost.ant-btn-danger.disabled:activea:only-child,.ant-btn-background-ghost.ant-btn-danger.disabled:focusa:only-child,.ant-btn-background-ghost.ant-btn-danger.disabled:hovera:only-child,.ant-btn-background-ghost.ant-btn-danger.disableda:only-child,.ant-btn-background-ghost.ant-btn-danger[disabled].activea:only-child,.ant-btn-background-ghost.ant-btn-danger[disabled]:activea:only-child,.ant-btn-background-ghost.ant-btn-danger[disabled]:focusa:only-child,.ant-btn-background-ghost.ant-btn-danger[disabled]:hovera:only-child,.ant-btn-background-ghost.ant-btn-danger[disabled]a:only-child{color:currentColor}.ant-btn-background-ghost.ant-btn-danger-disabled.activea:only-child:after,.ant-btn-background-ghost.ant-btn-danger-disabled:activea:only-child:after,.ant-btn-background-ghost.ant-btn-danger-disabled:focusa:only-child:after,.ant-btn-background-ghost.ant-btn-danger-disabled:hovera:only-child:after,.ant-btn-background-ghost.ant-btn-danger-disableda:only-child:after,.ant-btn-background-ghost.ant-btn-danger.disabled.activea:only-child:after,.ant-btn-background-ghost.ant-btn-danger.disabled:activea:only-child:after,.ant-btn-background-ghost.ant-btn-danger.disabled:focusa:only-child:after,.ant-btn-background-ghost.ant-btn-danger.disabled:hovera:only-child:after,.ant-btn-background-ghost.ant-btn-danger.disableda:only-child:after,.ant-btn-background-ghost.ant-btn-danger[disabled].activea:only-child:after,.ant-btn-background-ghost.ant-btn-danger[disabled]:activea:only-child:after,.ant-btn-background-ghost.ant-btn-danger[disabled]:focusa:only-child:after,.ant-btn-background-ghost.ant-btn-danger[disabled]:hovera:only-child:after,.ant-btn-background-ghost.ant-btn-danger[disabled]a:only-child:after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:transparent}.ant-btn-two-chinese-chars:first-letter{letter-spacing:.34em}.ant-btn-two-chinese-chars:not(.anticon){letter-spacing:.34em;margin-right:-.34em}.ant-btn-block{width:100%}.ant-btn:empty{vertical-align:top}a.ant-btn{line-height:30px}a.ant-btn-lg{line-height:38px}a.ant-btn-sm{line-height:22px}.ant-dropdown{font-size:14px;font-variant:tabular-nums;line-height:1.5;color:rgba(0,0,0,.65);-webkit-box-sizing:border-box;box-sizing:border-box;margin:0;padding:0;list-style:none;position:absolute;left:-9999px;top:-9999px;z-index:1050;display:block}.ant-dropdown:before{position:absolute;top:-7px;left:-7px;right:0;bottom:-7px;content:\" \";opacity:.0001}.ant-dropdown-wrap{position:relative}.ant-dropdown-wrap .ant-btn.anticon-down{display:inline-block;font-size:12px;font-size:10px\\9;-webkit-transform:scale(.83333333) rotate(0deg);-ms-transform:scale(.83333333) rotate(0deg);transform:scale(.83333333) rotate(0deg)}:root .ant-dropdown-wrap .ant-btn.anticon-down{font-size:12px}.ant-dropdown-wrap .anticon-down:before{-webkit-transition:-webkit-transform .2s;transition:-webkit-transform .2s;transition:transform .2s;transition:transform .2s,-webkit-transform .2s}.ant-dropdown-wrap-open .anticon-down:before{-webkit-transform:rotate(180deg);-ms-transform:rotate(180deg);transform:rotate(180deg)}.ant-dropdown-hidden,.ant-dropdown-menu-hidden{display:none}.ant-dropdown-menu{outline:none;position:relative;list-style-type:none;padding:4px 0;margin:0;text-align:left;background-color:#fff;border-radius:4px;-webkit-box-shadow:0 2px 8px rgba(0,0,0,.15);box-shadow:0 2px 8px rgba(0,0,0,.15);background-clip:padding-box;-webkit-transform:translateZ(0)}.ant-dropdown-menu-item-group-title{color:rgba(0,0,0,.45);padding:5px 12px;-webkit-transition:all .3s;transition:all .3s}.ant-dropdown-menu-submenu-popup{position:absolute;z-index:1050}.ant-dropdown-menu-submenu-popup.ant-dropdown-menu{-webkit-transform-origin:0 0;-ms-transform-origin:0 0;transform-origin:0 0}.ant-dropdown-menu-item,.ant-dropdown-menu-submenu-title{padding:5px 12px;margin:0;clear:both;font-size:14px;font-weight:400;color:rgba(0,0,0,.65);white-space:nowrap;cursor:pointer;-webkit-transition:all .3s;transition:all .3s;line-height:22px}.ant-dropdown-menu-item.anticon:first-child,.ant-dropdown-menu-submenu-title.anticon:first-child{min-width:12px;margin-right:8px}.ant-dropdown-menu-itema,.ant-dropdown-menu-submenu-titlea{color:rgba(0,0,0,.65);display:block;padding:5px 12px;margin:-5px -12px;-webkit-transition:all .3s;transition:all .3s}.ant-dropdown-menu-itema:focus,.ant-dropdown-menu-submenu-titlea:focus{text-decoration:none}.ant-dropdown-menu-item-selected,.ant-dropdown-menu-item-selecteda,.ant-dropdown-menu-submenu-title-selected,.ant-dropdown-menu-submenu-title-selecteda{color:#1890ff;background-color:#e6f7ff}.ant-dropdown-menu-item:hover,.ant-dropdown-menu-submenu-title:hover{background-color:#e6f7ff}.ant-dropdown-menu-item-disabled,.ant-dropdown-menu-submenu-title-disabled{color:rgba(0,0,0,.25);cursor:not-allowed}.ant-dropdown-menu-item-disabled:hover,.ant-dropdown-menu-submenu-title-disabled:hover{color:rgba(0,0,0,.25);background-color:#fff;cursor:not-allowed}.ant-dropdown-menu-item-divider,.ant-dropdown-menu-submenu-title-divider{height:1px;overflow:hidden;background-color:#e8e8e8;line-height:0;margin:4px 0}.ant-dropdown-menu-item .ant-dropdown-menu-submenu-arrow,.ant-dropdown-menu-submenu-title .ant-dropdown-menu-submenu-arrow{position:absolute;right:8px}.ant-dropdown-menu-item .ant-dropdown-menu-submenu-arrow-icon,.ant-dropdown-menu-submenu-title .ant-dropdown-menu-submenu-arrow-icon{font-style:normal;color:rgba(0,0,0,.45);display:inline-block;font-size:12px;font-size:10px\\9;-webkit-transform:scale(.83333333) rotate(0deg);-ms-transform:scale(.83333333) rotate(0deg);transform:scale(.83333333) rotate(0deg)}:root .ant-dropdown-menu-item .ant-dropdown-menu-submenu-arrow-icon,:root .ant-dropdown-menu-submenu-title .ant-dropdown-menu-submenu-arrow-icon{font-size:12px}.ant-dropdown-menu-submenu-title{padding-right:26px}.ant-dropdown-menu-submenu-vertical{position:relative}.ant-dropdown-menu-submenu-vertical.ant-dropdown-menu{top:0;left:100%;position:absolute;min-width:100%;margin-left:4px;-webkit-transform-origin:0 0;-ms-transform-origin:0 0;transform-origin:0 0}.ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title,.ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title .ant-dropdown-menu-submenu-arrow-icon{color:rgba(0,0,0,.25)}.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomCenter,.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomLeft,.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomRight,.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomCenter,.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomLeft,.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomRight{-webkit-animation-name:antSlideUpIn;animation-name:antSlideUpIn}.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topCenter,.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topLeft,.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topRight,.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topCenter,.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topLeft,.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topRight{-webkit-animation-name:antSlideDownIn;animation-name:antSlideDownIn}.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomCenter,.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomLeft,.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomRight{-webkit-animation-name:antSlideUpOut;animation-name:antSlideUpOut}.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topCenter,.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topLeft,.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topRight{-webkit-animation-name:antSlideDownOut;animation-name:antSlideDownOut}.ant-dropdown-link.anticon.anticon-down,.ant-dropdown-trigger.anticon.anticon-down{display:inline-block;font-size:12px;font-size:10px\\9;-webkit-transform:scale(.83333333) rotate(0deg);-ms-transform:scale(.83333333) rotate(0deg);transform:scale(.83333333) rotate(0deg)}:root .ant-dropdown-link.anticon.anticon-down,:root .ant-dropdown-trigger.anticon.anticon-down{font-size:12px}.ant-dropdown-button{white-space:nowrap}.ant-dropdown-button.ant-btn-group.ant-btn:last-child:not(:first-child){padding-left:8px;padding-right:8px}.ant-dropdown-button .anticon.anticon-down{display:inline-block;font-size:12px;font-size:10px\\9;-webkit-transform:scale(.83333333) rotate(0deg);-ms-transform:scale(.83333333) rotate(0deg);transform:scale(.83333333) rotate(0deg)}:root .ant-dropdown-button .anticon.anticon-down{font-size:12px}.ant-dropdown-menu-dark,.ant-dropdown-menu-dark .ant-dropdown-menu{background:#001529}.ant-dropdown-menu-dark .ant-dropdown-menu-item,.ant-dropdown-menu-dark .ant-dropdown-menu-item .ant-dropdown-menu-submenu-arrow:after,.ant-dropdown-menu-dark .ant-dropdown-menu-itema,.ant-dropdown-menu-dark .ant-dropdown-menu-itema .ant-dropdown-menu-submenu-arrow:after,.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title,.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title .ant-dropdown-menu-submenu-arrow:after{color:hsla(0,0%,100%,.65)}.ant-dropdown-menu-dark .ant-dropdown-menu-item:hover,.ant-dropdown-menu-dark .ant-dropdown-menu-itema:hover,.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title:hover{color:#fff;background:transparent}.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected,.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected:hover,.ant-dropdown-menu-dark .ant-dropdown-menu-item-selecteda{background:#1890ff;color:#fff}.ant-menu{font-size:14px;font-variant:tabular-nums;line-height:1.5;-webkit-box-sizing:border-box;box-sizing:border-box;margin:0;padding:0;outline:none;margin-bottom:0;padding-left:0;list-style:none;-webkit-box-shadow:0 2px 8px rgba(0,0,0,.15);box-shadow:0 2px 8px rgba(0,0,0,.15);color:rgba(0,0,0,.65);background:#fff;line-height:0;-webkit-transition:background .3s,width .2s;transition:background .3s,width .2s;zoom:1}.ant-menu:after,.ant-menu:before{content:\"\";display:table}.ant-menu:after{clear:both}.ant-menu ol,.ant-menu ul{list-style:none;margin:0;padding:0}.ant-menu-hidden{display:none}.ant-menu-item-group-title{color:rgba(0,0,0,.45);font-size:14px;line-height:1.5;padding:8px 16px;-webkit-transition:all .3s;transition:all .3s}.ant-menu-submenu,.ant-menu-submenu-inline{-webkit-transition:border-color .3s cubic-bezier(.645,.045,.355,1),background .3s cubic-bezier(.645,.045,.355,1),padding .15s cubic-bezier(.645,.045,.355,1);transition:border-color .3s cubic-bezier(.645,.045,.355,1),background .3s cubic-bezier(.645,.045,.355,1),padding .15s cubic-bezier(.645,.045,.355,1)}.ant-menu-item:active,.ant-menu-submenu-title:active{background:#e6f7ff}.ant-menu-submenu .ant-menu-sub{cursor:auto;-webkit-transition:background .3s cubic-bezier(.645,.045,.355,1),padding .3s cubic-bezier(.645,.045,.355,1);transition:background .3s cubic-bezier(.645,.045,.355,1),padding .3s cubic-bezier(.645,.045,.355,1)}.ant-menu-itema{display:block;color:rgba(0,0,0,.65)}.ant-menu-itema:hover{color:#1890ff}.ant-menu-itema:focus{text-decoration:none}.ant-menu-itema:before{position:absolute;background-color:transparent;top:0;left:0;bottom:0;right:0;content:\"\"}.ant-menu-item-divider{height:1px;overflow:hidden;background-color:#e8e8e8;line-height:0}.ant-menu-item-active,.ant-menu-item:hover,.ant-menu-submenu-active,.ant-menu-submenu-title:hover,.ant-menu:not(.ant-menu-inline) .ant-menu-submenu-open{color:#1890ff}.ant-menu-horizontal .ant-menu-item,.ant-menu-horizontal .ant-menu-submenu{margin-top:-1px}.ant-menu-horizontal.ant-menu-item-active,.ant-menu-horizontal.ant-menu-item:hover,.ant-menu-horizontal.ant-menu-submenu .ant-menu-submenu-title:hover{background-color:transparent}.ant-menu-item-selected,.ant-menu-item-selecteda,.ant-menu-item-selecteda:hover{color:#1890ff}.ant-menu:not(.ant-menu-horizontal) .ant-menu-item-selected{background-color:#e6f7ff}.ant-menu-inline,.ant-menu-vertical,.ant-menu-vertical-left{border-right:1px solid #e8e8e8}.ant-menu-vertical-right{border-left:1px solid #e8e8e8}.ant-menu-vertical-left.ant-menu-sub,.ant-menu-vertical-right.ant-menu-sub,.ant-menu-vertical.ant-menu-sub{border-right:0;padding:0;-webkit-transform-origin:0 0;-ms-transform-origin:0 0;transform-origin:0 0}.ant-menu-vertical-left.ant-menu-sub .ant-menu-item,.ant-menu-vertical-right.ant-menu-sub .ant-menu-item,.ant-menu-vertical.ant-menu-sub .ant-menu-item{border-right:0;margin-left:0;left:0}.ant-menu-vertical-left.ant-menu-sub .ant-menu-item:after,.ant-menu-vertical-right.ant-menu-sub .ant-menu-item:after,.ant-menu-vertical.ant-menu-sub .ant-menu-item:after{border-right:0}.ant-menu-vertical-left.ant-menu-sub.ant-menu-item,.ant-menu-vertical-left.ant-menu-sub.ant-menu-submenu,.ant-menu-vertical-right.ant-menu-sub.ant-menu-item,.ant-menu-vertical-right.ant-menu-sub.ant-menu-submenu,.ant-menu-vertical.ant-menu-sub.ant-menu-item,.ant-menu-vertical.ant-menu-sub.ant-menu-submenu{-webkit-transform-origin:0 0;-ms-transform-origin:0 0;transform-origin:0 0}.ant-menu-horizontal.ant-menu-sub,.ant-menu-vertical-left.ant-menu-sub,.ant-menu-vertical-right.ant-menu-sub,.ant-menu-vertical.ant-menu-sub{min-width:160px}.ant-menu-item,.ant-menu-submenu-title{cursor:pointer;margin:0;padding:0 20px;position:relative;display:block;white-space:nowrap;-webkit-transition:color .3s cubic-bezier(.645,.045,.355,1),border-color .3s cubic-bezier(.645,.045,.355,1),background .3s cubic-bezier(.645,.045,.355,1),padding .15s cubic-bezier(.645,.045,.355,1);transition:color .3s cubic-bezier(.645,.045,.355,1),border-color .3s cubic-bezier(.645,.045,.355,1),background .3s cubic-bezier(.645,.045,.355,1),padding .15s cubic-bezier(.645,.045,.355,1)}.ant-menu-item .anticon,.ant-menu-submenu-title .anticon{min-width:14px;margin-right:10px;font-size:14px;-webkit-transition:font-size .15s cubic-bezier(.215,.61,.355,1),margin .3s cubic-bezier(.645,.045,.355,1);transition:font-size .15s cubic-bezier(.215,.61,.355,1),margin .3s cubic-bezier(.645,.045,.355,1)}.ant-menu-item .anticon+span,.ant-menu-submenu-title .anticon+span{-webkit-transition:opacity .3s cubic-bezier(.645,.045,.355,1),width .3s cubic-bezier(.645,.045,.355,1);transition:opacity .3s cubic-bezier(.645,.045,.355,1),width .3s cubic-bezier(.645,.045,.355,1);opacity:1}.ant-menu.ant-menu-item-divider{height:1px;margin:1px 0;overflow:hidden;padding:0;line-height:0;background-color:#e8e8e8}.ant-menu-submenu-popup{position:absolute;border-radius:4px;z-index:1050;background:#fff}.ant-menu-submenu-popup .submenu-title-wrapper{padding-right:20px}.ant-menu-submenu-popup:before{position:absolute;top:-7px;left:0;right:0;bottom:0;content:\" \";opacity:.0001}.ant-menu-submenu.ant-menu{background-color:#fff;border-radius:4px}.ant-menu-submenu.ant-menu-submenu-title:after{-webkit-transition:-webkit-transform .3s cubic-bezier(.645,.045,.355,1);transition:-webkit-transform .3s cubic-bezier(.645,.045,.355,1);transition:transform .3s cubic-bezier(.645,.045,.355,1);transition:transform .3s cubic-bezier(.645,.045,.355,1),-webkit-transform .3s cubic-bezier(.645,.045,.355,1)}.ant-menu-submenu-inline.ant-menu-submenu-title .ant-menu-submenu-arrow,.ant-menu-submenu-vertical-left.ant-menu-submenu-title .ant-menu-submenu-arrow,.ant-menu-submenu-vertical-right.ant-menu-submenu-title .ant-menu-submenu-arrow,.ant-menu-submenu-vertical.ant-menu-submenu-title .ant-menu-submenu-arrow{-webkit-transition:-webkit-transform .3s cubic-bezier(.645,.045,.355,1);transition:-webkit-transform .3s cubic-bezier(.645,.045,.355,1);transition:transform .3s cubic-bezier(.645,.045,.355,1);transition:transform .3s cubic-bezier(.645,.045,.355,1),-webkit-transform .3s cubic-bezier(.645,.045,.355,1);position:absolute;top:50%;right:16px;width:10px}.ant-menu-submenu-inline.ant-menu-submenu-title .ant-menu-submenu-arrow:after,.ant-menu-submenu-inline.ant-menu-submenu-title .ant-menu-submenu-arrow:before,.ant-menu-submenu-vertical-left.ant-menu-submenu-title .ant-menu-submenu-arrow:after,.ant-menu-submenu-vertical-left.ant-menu-submenu-title .ant-menu-submenu-arrow:before,.ant-menu-submenu-vertical-right.ant-menu-submenu-title .ant-menu-submenu-arrow:after,.ant-menu-submenu-vertical-right.ant-menu-submenu-title .ant-menu-submenu-arrow:before,.ant-menu-submenu-vertical.ant-menu-submenu-title .ant-menu-submenu-arrow:after,.ant-menu-submenu-vertical.ant-menu-submenu-title .ant-menu-submenu-arrow:before{content:\"\";position:absolute;vertical-align:baseline;background:#fff;background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.65)),to(rgba(0,0,0,.65)));background-image:-webkit-linear-gradient(left,rgba(0,0,0,.65),rgba(0,0,0,.65));background-image:linear-gradient(90deg,rgba(0,0,0,.65),rgba(0,0,0,.65));width:6px;height:1.5px;border-radius:2px;-webkit-transition:background .3s cubic-bezier(.645,.045,.355,1),top .3s cubic-bezier(.645,.045,.355,1),-webkit-transform .3s cubic-bezier(.645,.045,.355,1);transition:background .3s cubic-bezier(.645,.045,.355,1),top .3s cubic-bezier(.645,.045,.355,1),-webkit-transform .3s cubic-bezier(.645,.045,.355,1);transition:background .3s cubic-bezier(.645,.045,.355,1),transform .3s cubic-bezier(.645,.045,.355,1),top .3s cubic-bezier(.645,.045,.355,1);transition:background .3s cubic-bezier(.645,.045,.355,1),transform .3s cubic-bezier(.645,.045,.355,1),top .3s cubic-bezier(.645,.045,.355,1),-webkit-transform .3s cubic-bezier(.645,.045,.355,1)}.ant-menu-submenu-inline.ant-menu-submenu-title .ant-menu-submenu-arrow:before,.ant-menu-submenu-vertical-left.ant-menu-submenu-title .ant-menu-submenu-arrow:before,.ant-menu-submenu-vertical-right.ant-menu-submenu-title .ant-menu-submenu-arrow:before,.ant-menu-submenu-vertical.ant-menu-submenu-title .ant-menu-submenu-arrow:before{-webkit-transform:rotate(45deg) translateY(-2px);-ms-transform:rotate(45deg) translateY(-2px);transform:rotate(45deg) translateY(-2px)}.ant-menu-submenu-inline.ant-menu-submenu-title .ant-menu-submenu-arrow:after,.ant-menu-submenu-vertical-left.ant-menu-submenu-title .ant-menu-submenu-arrow:after,.ant-menu-submenu-vertical-right.ant-menu-submenu-title .ant-menu-submenu-arrow:after,.ant-menu-submenu-vertical.ant-menu-submenu-title .ant-menu-submenu-arrow:after{-webkit-transform:rotate(-45deg) translateY(2px);-ms-transform:rotate(-45deg) translateY(2px);transform:rotate(-45deg) translateY(2px)}.ant-menu-submenu-inline.ant-menu-submenu-title:hover .ant-menu-submenu-arrow:after,.ant-menu-submenu-inline.ant-menu-submenu-title:hover .ant-menu-submenu-arrow:before,.ant-menu-submenu-vertical-left.ant-menu-submenu-title:hover .ant-menu-submenu-arrow:after,.ant-menu-submenu-vertical-left.ant-menu-submenu-title:hover .ant-menu-submenu-arrow:before,.ant-menu-submenu-vertical-right.ant-menu-submenu-title:hover .ant-menu-submenu-arrow:after,.ant-menu-submenu-vertical-right.ant-menu-submenu-title:hover .ant-menu-submenu-arrow:before,.ant-menu-submenu-vertical.ant-menu-submenu-title:hover .ant-menu-submenu-arrow:after,.ant-menu-submenu-vertical.ant-menu-submenu-title:hover .ant-menu-submenu-arrow:before{background:-webkit-gradient(linear,left top,right top,from(#1890ff),to(#1890ff));background:-webkit-linear-gradient(left,#1890ff,#1890ff);background:linear-gradient(90deg,#1890ff,#1890ff)}.ant-menu-submenu-inline.ant-menu-submenu-title .ant-menu-submenu-arrow:before{-webkit-transform:rotate(-45deg) translateX(2px);-ms-transform:rotate(-45deg) translateX(2px);transform:rotate(-45deg) translateX(2px)}.ant-menu-submenu-inline.ant-menu-submenu-title .ant-menu-submenu-arrow:after{-webkit-transform:rotate(45deg) translateX(-2px);-ms-transform:rotate(45deg) translateX(-2px);transform:rotate(45deg) translateX(-2px)}.ant-menu-submenu-open.ant-menu-submenu-inline.ant-menu-submenu-title .ant-menu-submenu-arrow{-webkit-transform:translateY(-2px);-ms-transform:translateY(-2px);transform:translateY(-2px)}.ant-menu-submenu-open.ant-menu-submenu-inline.ant-menu-submenu-title .ant-menu-submenu-arrow:after{-webkit-transform:rotate(-45deg) translateX(-2px);-ms-transform:rotate(-45deg) translateX(-2px);transform:rotate(-45deg) translateX(-2px)}.ant-menu-submenu-open.ant-menu-submenu-inline.ant-menu-submenu-title .ant-menu-submenu-arrow:before{-webkit-transform:rotate(45deg) translateX(2px);-ms-transform:rotate(45deg) translateX(2px);transform:rotate(45deg) translateX(2px)}.ant-menu-vertical-left .ant-menu-submenu-selected,.ant-menu-vertical-left .ant-menu-submenu-selecteda,.ant-menu-vertical-right .ant-menu-submenu-selected,.ant-menu-vertical-right .ant-menu-submenu-selecteda,.ant-menu-vertical .ant-menu-submenu-selected,.ant-menu-vertical .ant-menu-submenu-selecteda{color:#1890ff}.ant-menu-horizontal{border:0;border-bottom:1px solid #e8e8e8;-webkit-box-shadow:none;box-shadow:none;line-height:46px;white-space:nowrap}.ant-menu-horizontal.ant-menu-item,.ant-menu-horizontal.ant-menu-submenu{position:relative;top:1px;display:inline-block;vertical-align:bottom;border-bottom:2px solid transparent}.ant-menu-horizontal.ant-menu-item-active,.ant-menu-horizontal.ant-menu-item-open,.ant-menu-horizontal.ant-menu-item-selected,.ant-menu-horizontal.ant-menu-item:hover,.ant-menu-horizontal.ant-menu-submenu-active,.ant-menu-horizontal.ant-menu-submenu-open,.ant-menu-horizontal.ant-menu-submenu-selected,.ant-menu-horizontal.ant-menu-submenu:hover{border-bottom:2px solid #1890ff;color:#1890ff}.ant-menu-horizontal.ant-menu-itema{display:block;color:rgba(0,0,0,.65)}.ant-menu-horizontal.ant-menu-itema:hover{color:#1890ff}.ant-menu-horizontal.ant-menu-itema:before{bottom:-2px}.ant-menu-horizontal.ant-menu-item-selecteda{color:#1890ff}.ant-menu-horizontal:after{content:\" \";display:block;height:0;clear:both}.ant-menu-inline .ant-menu-item,.ant-menu-vertical-left .ant-menu-item,.ant-menu-vertical-right .ant-menu-item,.ant-menu-vertical .ant-menu-item{position:relative}.ant-menu-inline .ant-menu-item:after,.ant-menu-vertical-left .ant-menu-item:after,.ant-menu-vertical-right .ant-menu-item:after,.ant-menu-vertical .ant-menu-item:after{content:\"\";position:absolute;right:0;top:0;bottom:0;border-right:3px solid #1890ff;-webkit-transform:scaleY(.0001);-ms-transform:scaleY(.0001);transform:scaleY(.0001);opacity:0;-webkit-transition:opacity .15s cubic-bezier(.215,.61,.355,1),-webkit-transform .15s cubic-bezier(.215,.61,.355,1);transition:opacity .15s cubic-bezier(.215,.61,.355,1),-webkit-transform .15s cubic-bezier(.215,.61,.355,1);transition:transform .15s cubic-bezier(.215,.61,.355,1),opacity .15s cubic-bezier(.215,.61,.355,1);transition:transform .15s cubic-bezier(.215,.61,.355,1),opacity .15s cubic-bezier(.215,.61,.355,1),-webkit-transform .15s cubic-bezier(.215,.61,.355,1)}.ant-menu-inline .ant-menu-item,.ant-menu-inline .ant-menu-submenu-title,.ant-menu-vertical-left .ant-menu-item,.ant-menu-vertical-left .ant-menu-submenu-title,.ant-menu-vertical-right .ant-menu-item,.ant-menu-vertical-right .ant-menu-submenu-title,.ant-menu-vertical .ant-menu-item,.ant-menu-vertical .ant-menu-submenu-title{padding:0 16px;font-size:14px;line-height:40px;height:40px;margin-top:4px;margin-bottom:4px;overflow:hidden;text-overflow:ellipsis}.ant-menu-inline .ant-menu-submenu,.ant-menu-vertical-left .ant-menu-submenu,.ant-menu-vertical-right .ant-menu-submenu,.ant-menu-vertical .ant-menu-submenu{padding-bottom:.01px}.ant-menu-inline .ant-menu-item:not(:last-child),.ant-menu-vertical-left .ant-menu-item:not(:last-child),.ant-menu-vertical-right .ant-menu-item:not(:last-child),.ant-menu-vertical .ant-menu-item:not(:last-child){margin-bottom:8px}.ant-menu-inline.ant-menu-item,.ant-menu-inline.ant-menu-submenu.ant-menu-submenu-title,.ant-menu-vertical-left.ant-menu-item,.ant-menu-vertical-left.ant-menu-submenu.ant-menu-submenu-title,.ant-menu-vertical-right.ant-menu-item,.ant-menu-vertical-right.ant-menu-submenu.ant-menu-submenu-title,.ant-menu-vertical.ant-menu-item,.ant-menu-vertical.ant-menu-submenu.ant-menu-submenu-title{line-height:40px;height:40px}.ant-menu-inline{width:100%}.ant-menu-inline .ant-menu-item-selected:after,.ant-menu-inline .ant-menu-selected:after{-webkit-transition:opacity .15s cubic-bezier(.645,.045,.355,1),-webkit-transform .15s cubic-bezier(.645,.045,.355,1);transition:opacity .15s cubic-bezier(.645,.045,.355,1),-webkit-transform .15s cubic-bezier(.645,.045,.355,1);transition:transform .15s cubic-bezier(.645,.045,.355,1),opacity .15s cubic-bezier(.645,.045,.355,1);transition:transform .15s cubic-bezier(.645,.045,.355,1),opacity .15s cubic-bezier(.645,.045,.355,1),-webkit-transform .15s cubic-bezier(.645,.045,.355,1);opacity:1;-webkit-transform:scaleY(1);-ms-transform:scaleY(1);transform:scaleY(1)}.ant-menu-inline .ant-menu-item,.ant-menu-inline .ant-menu-submenu-title{width:calc(100% + 1px)}.ant-menu-inline .ant-menu-submenu-title{padding-right:34px}.ant-menu-inline-collapsed{width:80px}.ant-menu-inline-collapsed.ant-menu-item,.ant-menu-inline-collapsed.ant-menu-item-group.ant-menu-item-group-list.ant-menu-item,.ant-menu-inline-collapsed.ant-menu-item-group.ant-menu-item-group-list.ant-menu-submenu.ant-menu-submenu-title,.ant-menu-inline-collapsed.ant-menu-submenu.ant-menu-submenu-title{left:0;text-overflow:clip;padding:0 32px!important}.ant-menu-inline-collapsed.ant-menu-item-group.ant-menu-item-group-list.ant-menu-item .ant-menu-submenu-arrow,.ant-menu-inline-collapsed.ant-menu-item-group.ant-menu-item-group-list.ant-menu-submenu.ant-menu-submenu-title .ant-menu-submenu-arrow,.ant-menu-inline-collapsed.ant-menu-item .ant-menu-submenu-arrow,.ant-menu-inline-collapsed.ant-menu-submenu.ant-menu-submenu-title .ant-menu-submenu-arrow{display:none}.ant-menu-inline-collapsed.ant-menu-item-group.ant-menu-item-group-list.ant-menu-item .anticon,.ant-menu-inline-collapsed.ant-menu-item-group.ant-menu-item-group-list.ant-menu-submenu.ant-menu-submenu-title .anticon,.ant-menu-inline-collapsed.ant-menu-item .anticon,.ant-menu-inline-collapsed.ant-menu-submenu.ant-menu-submenu-title .anticon{font-size:16px;line-height:40px;margin:0}.ant-menu-inline-collapsed.ant-menu-item-group.ant-menu-item-group-list.ant-menu-item .anticon+span,.ant-menu-inline-collapsed.ant-menu-item-group.ant-menu-item-group-list.ant-menu-submenu.ant-menu-submenu-title .anticon+span,.ant-menu-inline-collapsed.ant-menu-item .anticon+span,.ant-menu-inline-collapsed.ant-menu-submenu.ant-menu-submenu-title .anticon+span{max-width:0;display:inline-block;opacity:0}.ant-menu-inline-collapsed-tooltip{pointer-events:none}.ant-menu-inline-collapsed-tooltip .anticon{display:none}.ant-menu-inline-collapsed-tooltip a{color:hsla(0,0%,100%,.85)}.ant-menu-inline-collapsed .ant-menu-item-group-title{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;padding-left:4px;padding-right:4px}.ant-menu-item-group-list{margin:0;padding:0}.ant-menu-item-group-list .ant-menu-item,.ant-menu-item-group-list .ant-menu-submenu-title{padding:0 16px 0 28px}.ant-menu-root.ant-menu-inline,.ant-menu-root.ant-menu-vertical,.ant-menu-root.ant-menu-vertical-left,.ant-menu-root.ant-menu-vertical-right,.ant-menu-sub.ant-menu-inline{-webkit-box-shadow:none;box-shadow:none}.ant-menu-sub.ant-menu-inline{padding:0;border:0;border-radius:0}.ant-menu-sub.ant-menu-inline.ant-menu-item,.ant-menu-sub.ant-menu-inline.ant-menu-submenu.ant-menu-submenu-title{line-height:40px;height:40px;list-style-type:disc;list-style-position:inside}.ant-menu-sub.ant-menu-inline .ant-menu-item-group-title{padding-left:32px}.ant-menu-item-disabled,.ant-menu-submenu-disabled{color:rgba(0,0,0,.25)!important;cursor:not-allowed;background:none;border-color:transparent!important}.ant-menu-item-disableda,.ant-menu-submenu-disableda{color:rgba(0,0,0,.25)!important;pointer-events:none}.ant-menu-item-disabled.ant-menu-submenu-title,.ant-menu-submenu-disabled.ant-menu-submenu-title{color:rgba(0,0,0,.25)!important;cursor:not-allowed}.ant-menu-item-disabled.ant-menu-submenu-title.ant-menu-submenu-arrow:after,.ant-menu-item-disabled.ant-menu-submenu-title.ant-menu-submenu-arrow:before,.ant-menu-submenu-disabled.ant-menu-submenu-title.ant-menu-submenu-arrow:after,.ant-menu-submenu-disabled.ant-menu-submenu-title.ant-menu-submenu-arrow:before{background:rgba(0,0,0,.25)!important}.ant-menu-dark,.ant-menu-dark .ant-menu-sub{color:hsla(0,0%,100%,.65);background:#001529}.ant-menu-dark .ant-menu-sub .ant-menu-submenu-title .ant-menu-submenu-arrow,.ant-menu-dark .ant-menu-submenu-title .ant-menu-submenu-arrow{opacity:.45;-webkit-transition:all .3s;transition:all .3s}.ant-menu-dark .ant-menu-sub .ant-menu-submenu-title .ant-menu-submenu-arrow:after,.ant-menu-dark .ant-menu-sub .ant-menu-submenu-title .ant-menu-submenu-arrow:before,.ant-menu-dark .ant-menu-submenu-title .ant-menu-submenu-arrow:after,.ant-menu-dark .ant-menu-submenu-title .ant-menu-submenu-arrow:before{background:#fff}.ant-menu-dark.ant-menu-submenu-popup{background:transparent}.ant-menu-dark .ant-menu-inline.ant-menu-sub{background:#000c17;-webkit-box-shadow:0 2px 8px rgba(0,0,0,.45) inset;box-shadow:inset 0 2px 8px rgba(0,0,0,.45)}.ant-menu-dark.ant-menu-horizontal{border-bottom:0}.ant-menu-dark.ant-menu-horizontal.ant-menu-item,.ant-menu-dark.ant-menu-horizontal.ant-menu-submenu{border-color:#001529;border-bottom:0;top:0;margin-top:0}.ant-menu-dark.ant-menu-horizontal.ant-menu-itema:before{bottom:0}.ant-menu-dark .ant-menu-item,.ant-menu-dark .ant-menu-item-group-title,.ant-menu-dark .ant-menu-itema{color:hsla(0,0%,100%,.65)}.ant-menu-dark.ant-menu-inline,.ant-menu-dark.ant-menu-vertical,.ant-menu-dark.ant-menu-vertical-left,.ant-menu-dark.ant-menu-vertical-right{border-right:0}.ant-menu-dark.ant-menu-inline .ant-menu-item,.ant-menu-dark.ant-menu-vertical-left .ant-menu-item,.ant-menu-dark.ant-menu-vertical-right .ant-menu-item,.ant-menu-dark.ant-menu-vertical .ant-menu-item{border-right:0;margin-left:0;left:0}.ant-menu-dark.ant-menu-inline .ant-menu-item:after,.ant-menu-dark.ant-menu-vertical-left .ant-menu-item:after,.ant-menu-dark.ant-menu-vertical-right .ant-menu-item:after,.ant-menu-dark.ant-menu-vertical .ant-menu-item:after{border-right:0}.ant-menu-dark.ant-menu-inline .ant-menu-item,.ant-menu-dark.ant-menu-inline .ant-menu-submenu-title{width:100%}.ant-menu-dark .ant-menu-item-active,.ant-menu-dark .ant-menu-item:hover,.ant-menu-dark .ant-menu-submenu-active,.ant-menu-dark .ant-menu-submenu-open,.ant-menu-dark .ant-menu-submenu-selected,.ant-menu-dark .ant-menu-submenu-title:hover{background-color:transparent;color:#fff}.ant-menu-dark .ant-menu-item-activea,.ant-menu-dark .ant-menu-item:hovera,.ant-menu-dark .ant-menu-submenu-activea,.ant-menu-dark .ant-menu-submenu-opena,.ant-menu-dark .ant-menu-submenu-selecteda,.ant-menu-dark .ant-menu-submenu-title:hovera{color:#fff}.ant-menu-dark .ant-menu-item-active.ant-menu-submenu-title:hover.ant-menu-submenu-arrow,.ant-menu-dark .ant-menu-item-active.ant-menu-submenu-title.ant-menu-submenu-arrow,.ant-menu-dark .ant-menu-item:hover.ant-menu-submenu-title:hover.ant-menu-submenu-arrow,.ant-menu-dark .ant-menu-item:hover.ant-menu-submenu-title.ant-menu-submenu-arrow,.ant-menu-dark .ant-menu-submenu-active.ant-menu-submenu-title:hover.ant-menu-submenu-arrow,.ant-menu-dark .ant-menu-submenu-active.ant-menu-submenu-title.ant-menu-submenu-arrow,.ant-menu-dark .ant-menu-submenu-open.ant-menu-submenu-title:hover.ant-menu-submenu-arrow,.ant-menu-dark .ant-menu-submenu-open.ant-menu-submenu-title.ant-menu-submenu-arrow,.ant-menu-dark .ant-menu-submenu-selected.ant-menu-submenu-title:hover.ant-menu-submenu-arrow,.ant-menu-dark .ant-menu-submenu-selected.ant-menu-submenu-title.ant-menu-submenu-arrow,.ant-menu-dark .ant-menu-submenu-title:hover.ant-menu-submenu-title:hover.ant-menu-submenu-arrow,.ant-menu-dark .ant-menu-submenu-title:hover.ant-menu-submenu-title.ant-menu-submenu-arrow{opacity:1}.ant-menu-dark .ant-menu-item-active.ant-menu-submenu-title:hover.ant-menu-submenu-arrow:after,.ant-menu-dark .ant-menu-item-active.ant-menu-submenu-title:hover.ant-menu-submenu-arrow:before,.ant-menu-dark .ant-menu-item-active.ant-menu-submenu-title.ant-menu-submenu-arrow:after,.ant-menu-dark .ant-menu-item-active.ant-menu-submenu-title.ant-menu-submenu-arrow:before,.ant-menu-dark .ant-menu-item:hover.ant-menu-submenu-title:hover.ant-menu-submenu-arrow:after,.ant-menu-dark .ant-menu-item:hover.ant-menu-submenu-title:hover.ant-menu-submenu-arrow:before,.ant-menu-dark .ant-menu-item:hover.ant-menu-submenu-title.ant-menu-submenu-arrow:after,.ant-menu-dark .ant-menu-item:hover.ant-menu-submenu-title.ant-menu-submenu-arrow:before,.ant-menu-dark .ant-menu-submenu-active.ant-menu-submenu-title:hover.ant-menu-submenu-arrow:after,.ant-menu-dark .ant-menu-submenu-active.ant-menu-submenu-title:hover.ant-menu-submenu-arrow:before,.ant-menu-dark .ant-menu-submenu-active.ant-menu-submenu-title.ant-menu-submenu-arrow:after,.ant-menu-dark .ant-menu-submenu-active.ant-menu-submenu-title.ant-menu-submenu-arrow:before,.ant-menu-dark .ant-menu-submenu-open.ant-menu-submenu-title:hover.ant-menu-submenu-arrow:after,.ant-menu-dark .ant-menu-submenu-open.ant-menu-submenu-title:hover.ant-menu-submenu-arrow:before,.ant-menu-dark .ant-menu-submenu-open.ant-menu-submenu-title.ant-menu-submenu-arrow:after,.ant-menu-dark .ant-menu-submenu-open.ant-menu-submenu-title.ant-menu-submenu-arrow:before,.ant-menu-dark .ant-menu-submenu-selected.ant-menu-submenu-title:hover.ant-menu-submenu-arrow:after,.ant-menu-dark .ant-menu-submenu-selected.ant-menu-submenu-title:hover.ant-menu-submenu-arrow:before,.ant-menu-dark .ant-menu-submenu-selected.ant-menu-submenu-title.ant-menu-submenu-arrow:after,.ant-menu-dark .ant-menu-submenu-selected.ant-menu-submenu-title.ant-menu-submenu-arrow:before,.ant-menu-dark .ant-menu-submenu-title:hover.ant-menu-submenu-title:hover.ant-menu-submenu-arrow:after,.ant-menu-dark .ant-menu-submenu-title:hover.ant-menu-submenu-title:hover.ant-menu-submenu-arrow:before,.ant-menu-dark .ant-menu-submenu-title:hover.ant-menu-submenu-title.ant-menu-submenu-arrow:after,.ant-menu-dark .ant-menu-submenu-title:hover.ant-menu-submenu-title.ant-menu-submenu-arrow:before{background:#fff}.ant-menu-dark .ant-menu-item-selected{border-right:0;color:#fff}.ant-menu-dark .ant-menu-item-selected:after{border-right:0}.ant-menu-dark .ant-menu-item-selecteda,.ant-menu-dark .ant-menu-item-selecteda:hover{color:#fff}.ant-menu-submenu-popup.ant-menu-dark .ant-menu-item-selected,.ant-menu.ant-menu-dark .ant-menu-item-selected{background-color:#1890ff}.ant-menu-dark .ant-menu-item-disabled,.ant-menu-dark .ant-menu-item-disableda,.ant-menu-dark .ant-menu-submenu-disabled,.ant-menu-dark .ant-menu-submenu-disableda{opacity:.8;color:hsla(0,0%,100%,.35)!important}.ant-menu-dark .ant-menu-item-disabled.ant-menu-submenu-title,.ant-menu-dark .ant-menu-submenu-disabled.ant-menu-submenu-title{color:hsla(0,0%,100%,.35)!important}.ant-menu-dark .ant-menu-item-disabled.ant-menu-submenu-title.ant-menu-submenu-arrow:after,.ant-menu-dark .ant-menu-item-disabled.ant-menu-submenu-title.ant-menu-submenu-arrow:before,.ant-menu-dark .ant-menu-submenu-disabled.ant-menu-submenu-title.ant-menu-submenu-arrow:after,.ant-menu-dark .ant-menu-submenu-disabled.ant-menu-submenu-title.ant-menu-submenu-arrow:before{background:hsla(0,0%,100%,.35)!important}.ant-tooltip{font-size:14px;font-variant:tabular-nums;line-height:1.5;color:rgba(0,0,0,.65);-webkit-box-sizing:border-box;box-sizing:border-box;margin:0;padding:0;list-style:none;position:absolute;z-index:1060;display:block;visibility:visible;max-width:250px}.ant-tooltip-hidden{display:none}.ant-tooltip-placement-top,.ant-tooltip-placement-topLeft,.ant-tooltip-placement-topRight{padding-bottom:8px}.ant-tooltip-placement-right,.ant-tooltip-placement-rightBottom,.ant-tooltip-placement-rightTop{padding-left:8px}.ant-tooltip-placement-bottom,.ant-tooltip-placement-bottomLeft,.ant-tooltip-placement-bottomRight{padding-top:8px}.ant-tooltip-placement-left,.ant-tooltip-placement-leftBottom,.ant-tooltip-placement-leftTop{padding-right:8px}.ant-tooltip-inner{padding:6px 8px;color:#fff;text-align:left;text-decoration:none;background-color:rgba(0,0,0,.75);border-radius:4px;-webkit-box-shadow:0 2px 8px rgba(0,0,0,.15);box-shadow:0 2px 8px rgba(0,0,0,.15);min-height:32px;word-wrap:break-word}.ant-tooltip-arrow{position:absolute;width:0;height:0;border-color:transparent;border-style:solid}.ant-tooltip-placement-top .ant-tooltip-arrow,.ant-tooltip-placement-topLeft .ant-tooltip-arrow,.ant-tooltip-placement-topRight .ant-tooltip-arrow{bottom:3px;border-width:5px 5px 0;border-top-color:rgba(0,0,0,.75)}.ant-tooltip-placement-top .ant-tooltip-arrow{left:50%;margin-left:-5px}.ant-tooltip-placement-topLeft .ant-tooltip-arrow{left:16px}.ant-tooltip-placement-topRight .ant-tooltip-arrow{right:16px}.ant-tooltip-placement-right .ant-tooltip-arrow,.ant-tooltip-placement-rightBottom .ant-tooltip-arrow,.ant-tooltip-placement-rightTop .ant-tooltip-arrow{left:3px;border-width:5px 5px 5px 0;border-right-color:rgba(0,0,0,.75)}.ant-tooltip-placement-right .ant-tooltip-arrow{top:50%;margin-top:-5px}.ant-tooltip-placement-rightTop .ant-tooltip-arrow{top:8px}.ant-tooltip-placement-rightBottom .ant-tooltip-arrow{bottom:8px}.ant-tooltip-placement-left .ant-tooltip-arrow,.ant-tooltip-placement-leftBottom .ant-tooltip-arrow,.ant-tooltip-placement-leftTop .ant-tooltip-arrow{right:3px;border-width:5px 0 5px 5px;border-left-color:rgba(0,0,0,.75)}.ant-tooltip-placement-left .ant-tooltip-arrow{top:50%;margin-top:-5px}.ant-tooltip-placement-leftTop .ant-tooltip-arrow{top:8px}.ant-tooltip-placement-leftBottom .ant-tooltip-arrow{bottom:8px}.ant-tooltip-placement-bottom .ant-tooltip-arrow,.ant-tooltip-placement-bottomLeft .ant-tooltip-arrow,.ant-tooltip-placement-bottomRight .ant-tooltip-arrow{top:3px;border-width:0 5px 5px;border-bottom-color:rgba(0,0,0,.75)}.ant-tooltip-placement-bottom .ant-tooltip-arrow{left:50%;margin-left:-5px}.ant-tooltip-placement-bottomLeft .ant-tooltip-arrow{left:16px}.ant-tooltip-placement-bottomRight .ant-tooltip-arrow{right:16px}.ant-notification{font-size:14px;font-variant:tabular-nums;line-height:1.5;color:rgba(0,0,0,.65);-webkit-box-sizing:border-box;box-sizing:border-box;margin:0;padding:0;list-style:none;position:fixed;z-index:1010;width:384px;max-width:calc(100vw - 32px);margin-right:24px}.ant-notification-bottomLeft,.ant-notification-topLeft{margin-left:24px;margin-right:0}.ant-notification-bottomLeft .ant-notification-fade-appear.ant-notification-fade-appear-active,.ant-notification-bottomLeft .ant-notification-fade-enter.ant-notification-fade-enter-active,.ant-notification-topLeft .ant-notification-fade-appear.ant-notification-fade-appear-active,.ant-notification-topLeft .ant-notification-fade-enter.ant-notification-fade-enter-active{-webkit-animation-name:NotificationLeftFadeIn;animation-name:NotificationLeftFadeIn}.ant-notification-close-icon{font-size:14px;cursor:pointer}.ant-notification-notice{padding:16px 24px;border-radius:4px;-webkit-box-shadow:0 4px 12px rgba(0,0,0,.15);box-shadow:0 4px 12px rgba(0,0,0,.15);background:#fff;line-height:1.5;position:relative;margin-bottom:16px;overflow:hidden}.ant-notification-notice-message{font-size:16px;color:rgba(0,0,0,.85);margin-bottom:8px;line-height:24px;display:inline-block}.ant-notification-notice-message-single-line-auto-margin{width:calc(384px - 24px * 2 - 24px - 48px - 100%);background-color:transparent;pointer-events:none;display:block;max-width:4px}.ant-notification-notice-message-single-line-auto-margin:before{content:\"\";display:block}.ant-notification-notice-description{font-size:14px}.ant-notification-notice-closable .ant-notification-notice-message{padding-right:24px}.ant-notification-notice-with-icon .ant-notification-notice-message{font-size:16px;margin-left:48px;margin-bottom:4px}.ant-notification-notice-with-icon .ant-notification-notice-description{margin-left:48px;font-size:14px}.ant-notification-notice-icon{position:absolute;font-size:24px;line-height:24px;margin-left:4px}.ant-notification-notice-icon-success{color:#52c41a}.ant-notification-notice-icon-info{color:#1890ff}.ant-notification-notice-icon-warning{color:#faad14}.ant-notification-notice-icon-error{color:#f5222d}.ant-notification-notice-close{position:absolute;right:22px;top:16px;color:rgba(0,0,0,.45);outline:none}a.ant-notification-notice-close:focus{text-decoration:none}.ant-notification-notice-close:hover{color:rgba(0,0,0,.67)}.ant-notification-notice-btn{float:right;margin-top:16px}.ant-notification .notification-fade-effect{-webkit-animation-duration:.24s;animation-duration:.24s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-timing-function:cubic-bezier(.645,.045,.355,1);animation-timing-function:cubic-bezier(.645,.045,.355,1)}.ant-notification-fade-appear,.ant-notification-fade-enter{opacity:0;-webkit-animation-play-state:paused;animation-play-state:paused}.ant-notification-fade-appear,.ant-notification-fade-enter,.ant-notification-fade-leave{-webkit-animation-duration:.24s;animation-duration:.24s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-timing-function:cubic-bezier(.645,.045,.355,1);animation-timing-function:cubic-bezier(.645,.045,.355,1)}.ant-notification-fade-leave{-webkit-animation-duration:.2s;animation-duration:.2s;-webkit-animation-play-state:paused;animation-play-state:paused}.ant-notification-fade-appear.ant-notification-fade-appear-active,.ant-notification-fade-enter.ant-notification-fade-enter-active{-webkit-animation-name:NotificationFadeIn;animation-name:NotificationFadeIn;-webkit-animation-play-state:running;animation-play-state:running}.ant-notification-fade-leave.ant-notification-fade-leave-active{-webkit-animation-name:NotificationFadeOut;animation-name:NotificationFadeOut;-webkit-animation-play-state:running;animation-play-state:running}@-webkit-keyframes NotificationFadeIn{0%{opacity:0;left:384px}to{left:0;opacity:1}}@keyframes NotificationFadeIn{0%{opacity:0;left:384px}to{left:0;opacity:1}}@-webkit-keyframes NotificationLeftFadeIn{0%{opacity:0;right:384px}to{right:0;opacity:1}}@keyframes NotificationLeftFadeIn{0%{opacity:0;right:384px}to{right:0;opacity:1}}@-webkit-keyframes NotificationFadeOut{0%{opacity:1;margin-bottom:16px;padding-top:16px 24px;padding-bottom:16px 24px;max-height:150px}to{opacity:0;margin-bottom:0;padding-top:0;padding-bottom:0;max-height:0}}@keyframes NotificationFadeOut{0%{opacity:1;margin-bottom:16px;padding-top:16px 24px;padding-bottom:16px 24px;max-height:150px}to{opacity:0;margin-bottom:0;padding-top:0;padding-bottom:0;max-height:0}}.logo{background-color:transparent!important}.menu-avatar{width:250px;text-align:center}.menu-avatar__item{width:100%;border-bottom:1px solid #b1d7e6;text-align:left}.menu-avatar__item a{padding:10px;font-size:15px}.menu-avatar__item a svg{margin-right:10px}.menu-avatar__item-last{text-align:left;padding:10px;font-size:15px}.menu-avatar__item-last svg{margin-right:8px!important}.menu-avatar .viblo-accounts{display:flex;flex-direction:row;cursor:auto;margin:10px 0}.menu-avatar .viblo-accounts img{width:60px;height:60px;margin-right:8px;border-radius:50%}.menu-avatar .viblo-accounts__information{display:flex;flex-direction:column;flex-wrap:wrap}.menu-avatar .viblo-accounts__information__full-name{word-break:break-word}.menu-avatar .viblo-accounts__information__full-name p{font-size:15px;color:#007bff;white-space:pre-wrap;word-wrap:break-word}.menu-avatar .viblo-accounts__information__user-name{word-break:break-word}.menu-avatar .viblo-accounts__information__user-name p{font-size:13px;white-space:pre-wrap;word-wrap:break-word}.menu-avatar .viblo-accounts__information a{display:flex;justify-content:center;align-items:center;width:60px;height:30px;font-size:14px;border-radius:4px;color:#fff;background-color:#409eff;border-color:#409eff;cursor:pointer;margin-top:5px}.ant-menu-item a{color:#fff!important}.ant-menu-submenu-popup.ant-menu-dark .ant-menu-item-selected,.ant-menu.ant-menu-dark .ant-menu-item-selected{background-color:transparent}.header__main.ant-layout-header{position:fixed!important}.header__main.ant-layout-header .avatar-user{width:40px;height:40px;border-radius:50%}.header__main.ant-layout-header .ant-menu .language button{background:none;border:none}.header__main.ant-layout-header .ant-menu .language button img{height:100%;margin-right:2px}.header__main.ant-layout-header .ant-menu .language button i svg{color:#fff}.flag-dropdown{width:60px}.flag-dropdown li{border-bottom:1px solid #b1d7e6}.flag-dropdown li img{width:34px;height:32px}.flag-dropdown li:last-child{border-bottom:none}.ant-modal{font-size:14px;font-variant:tabular-nums;line-height:1.5;color:rgba(0,0,0,.65);-webkit-box-sizing:border-box;box-sizing:border-box;margin:0;padding:0;list-style:none;position:relative;width:auto;margin:0 auto;top:100px;padding-bottom:24px}.ant-modal-wrap{position:fixed;overflow:auto;top:0;right:0;bottom:0;left:0;z-index:1000;-webkit-overflow-scrolling:touch;outline:0}.ant-modal-title{margin:0;font-size:16px;line-height:22px;font-weight:500;color:rgba(0,0,0,.85)}.ant-modal-content{position:relative;background-color:#fff;border:0;border-radius:4px;background-clip:padding-box;-webkit-box-shadow:0 4px 12px rgba(0,0,0,.15);box-shadow:0 4px 12px rgba(0,0,0,.15)}.ant-modal-close{cursor:pointer;border:0;background:transparent;position:absolute;right:0;top:0;z-index:10;font-weight:700;line-height:1;text-decoration:none;-webkit-transition:color .3s;transition:color .3s;color:rgba(0,0,0,.45);outline:0;padding:0}.ant-modal-close-x{display:block;font-style:normal;vertical-align:baseline;text-align:center;text-transform:none;text-rendering:auto;width:56px;height:56px;line-height:56px;font-size:16px}.ant-modal-close:focus,.ant-modal-close:hover{color:rgba(0,0,0,.75);text-decoration:none}.ant-modal-header{padding:16px 24px;border-radius:4px 4px 0 0;background:#fff;color:rgba(0,0,0,.65);border-bottom:1px solid #e8e8e8}.ant-modal-body{padding:24px;font-size:14px;line-height:1.5;word-wrap:break-word}.ant-modal-footer{border-top:1px solid #e8e8e8;padding:10px 16px;text-align:right;border-radius:0 0 4px 4px}.ant-modal-footer button+button{margin-left:8px;margin-bottom:0}.ant-modal.zoom-appear,.ant-modal.zoom-enter{-webkit-animation-duration:.3s;animation-duration:.3s;-webkit-transform:none;-ms-transform:none;transform:none;opacity:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ant-modal-mask{position:fixed;top:0;right:0;left:0;bottom:0;background-color:rgba(0,0,0,.65);height:100%;z-index:1000;filter:alpha(opacity=50)}.ant-modal-mask-hidden{display:none}.ant-modal-open{overflow:hidden}.ant-modal-centered{text-align:center}.ant-modal-centered:before{content:\"\";display:inline-block;height:100%;vertical-align:middle;width:0}.ant-modal-centered .ant-modal{display:inline-block;vertical-align:middle;top:0;text-align:left}@media (max-width:767px){.ant-modal{max-width:calc(100vw - 16px);margin:8px auto}.ant-modal-centered .ant-modal{-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1}}.ant-modal-confirm .ant-modal-close,.ant-modal-confirm .ant-modal-header{display:none}.ant-modal-confirm .ant-modal-body{padding:32px 32px 24px}.ant-modal-confirm-body-wrapper{zoom:1}.ant-modal-confirm-body-wrapper:after,.ant-modal-confirm-body-wrapper:before{content:\"\";display:table}.ant-modal-confirm-body-wrapper:after{clear:both}.ant-modal-confirm-body .ant-modal-confirm-title{color:rgba(0,0,0,.85);font-weight:500;font-size:16px;line-height:1.4;display:block;overflow:hidden}.ant-modal-confirm-body .ant-modal-confirm-content{margin-left:38px;font-size:14px;color:rgba(0,0,0,.65);margin-top:8px}.ant-modal-confirm-body.anticon{font-size:22px;margin-right:16px;float:left}.ant-modal-confirm .ant-modal-confirm-btns{margin-top:24px;float:right}.ant-modal-confirm .ant-modal-confirm-btns button+button{margin-left:8px;margin-bottom:0}.ant-modal-confirm-error .ant-modal-confirm-body.anticon{color:#f5222d}.ant-modal-confirm-confirm .ant-modal-confirm-body.anticon,.ant-modal-confirm-warning .ant-modal-confirm-body.anticon{color:#faad14}.ant-modal-confirm-info .ant-modal-confirm-body.anticon{color:#1890ff}.ant-modal-confirm-success .ant-modal-confirm-body.anticon{color:#52c41a}.footer-dashboard{height:200px}.footer-dashboard__container{max-width:1108px;width:100%;height:100%;margin:auto;color:#fff}.footer-dashboard__container__top{display:flex;flex-flow:row;height:75%;padding-bottom:16px}.footer-dashboard__container__top__item{flex-grow:1;flex-basis:0}.footer-dashboard__container__top__item__title{margin-bottom:10px}.footer-dashboard__container__top__item__title p{font-weight:700!important;text-transform:uppercase;font-size:1rem}.footer-dashboard__container__top__item__title .row{width:45px;height:1px;background:#fff}.footer-dashboard__container__top__item__content .link{margin-bottom:-15px;margin-top:2px!important;display:flex;align-items:center}.footer-dashboard__container__top__item__content .link svg{width:14px;height:14px}.footer-dashboard__container__top__item__content .link svg g{fill:#fff}.footer-dashboard__container__top__item__content div{margin-top:10px}.footer-dashboard__container__top__item__content div a{color:#fff}.footer-dashboard__container__top__item__content div a svg{width:19px!important;height:19px!important}.footer-dashboard__container__top__item__content div svg{margin-right:5px;width:12px!important;height:14px}.footer-dashboard__container__top__item__content .contact{display:flex!important;align-items:center!important}.footer-dashboard__container .row-split{width:100%;height:1px;background:#a0a0a5;margin-top:10px}.footer-dashboard__container__bottom{display:flex;flex-wrap:wrap;height:15%;margin-top:13px}.footer-dashboard__container__bottom__left{flex:0 0 66%;max-width:66%}.footer-dashboard__container__bottom__right{display:flex;flex:0 0 34%;max-width:34%;justify-content:space-between!important}.footer-dashboard__container__bottom__right a{color:#fff}.footer-dashboard__container__bottom__right span:hover{cursor:pointer}.ant-modal-body .feedback__form__title{display:flex;flex-direction:column;text-align:left;margin-bottom:20px}.ant-modal-body .feedback__form__title label{margin-bottom:10px}.ant-modal-body .feedback__form__title label:before{content:\"*\";color:#f56c6c;margin-right:4px}.ant-modal-body .feedback__form__title input{width:100%;border:1px solid #dcdfe6;height:35px;border-radius:4px;padding:0 8px}.ant-modal-body .feedback__form__title p{color:red;font-size:13px}.ant-modal-body .feedback__form__content{text-align:left}.ant-modal-body .feedback__form__content .error{border:1px solid red}.ant-modal-body .feedback__form__content textarea{width:100%;height:100px;padding:2px 8px}.ant-modal-body .feedback__form__content p{color:red;font-size:13px}.ant-modal-body .feedback__form__content__title{margin-bottom:10px}.ant-modal-body .feedback__form__content__title:before{content:\"*\";color:#f56c6c;margin-right:4px}.ant-modal-body .feedback__text{text-align:left;margin-top:10px;margin-bottom:10px}.ant-modal-body .feedback__information{display:flex;width:100%;margin-bottom:10px}.ant-modal-body .feedback__information__name{text-align:left;display:flex;flex-direction:column;flex:0 0 50%;margin-right:25px}.ant-modal-body .feedback__information__name input{width:90%;border:1px solid #dcdfe6;height:35px;border-radius:4px;padding:0 8px}.ant-modal-body .feedback__information__email{text-align:left;display:flex;flex-direction:column;flex:0 0 50%}.ant-modal-body .feedback__information__email input{width:90%;border:1px solid #dcdfe6;height:35px;border-radius:4px;padding:0 8px}.ant-modal-body .feedback__button-submit{text-align:left;margin-top:20px}.ant-modal-body .feedback__button-submit input{width:52px;height:38px;color:#fff;background-color:#5488c7;border-color:#5488c7;border-radius:4px;cursor:pointer;text-align:center}.ant-layout-footer{background:#2a2b50!important}.animation-container{font-weight:800;font-size:8em;opacity:1}.animation-container svg{width:90%;display:block;top:50%;margin:-8% 0 0 5%;position:fixed}.animation-container svg .text{width:100%;fill:transparent;stroke-width:1;stroke-linejoin:round;stroke-dasharray:90,310;stroke-dashoffset:0;-webkit-animation:text 8s infinite linear;animation:text 8s infinite linear}.animation-container svg .text:nth-child(4n+1){stroke:#5488c7;-webkit-animation-delay:-2s;animation-delay:-2s}.animation-container svg .text:nth-child(4n+2){stroke:#5488c7;-webkit-animation-delay:-4s;animation-delay:-4s}.animation-container svg .text:nth-child(4n+3){stroke:#5488c7;-webkit-animation-delay:-6s;animation-delay:-6s}.animation-container svg .text:nth-child(4n+4){stroke:#5488c7;-webkit-animation-delay:-8s;animation-delay:-8s}@-webkit-keyframes text{to{stroke-dashoffset:-400}}.content-loading{width:100%;max-width:1108px;background:#fff;box-shadow:0 1px 8px rgba(0,0,0,.1);margin:0 auto;margin-top:44px;height:100vh;display:flex;justify-content:center;flex-flow:column}.content-loading .text{text-align:center;margin-top:30px;font-weight:700;font-size:17px;padding-left:30px}.content-loading .spinner{margin:0 auto;width:40px;height:40px;position:relative}.content-loading .cube1,.content-loading .cube2{background-color:#5488c7;width:15px;height:15px;position:absolute;top:0;left:0;-webkit-animation:sk-cubemove 1.8s infinite ease-in-out;animation:sk-cubemove 1.8s infinite ease-in-out}.content-loading .cube2{-webkit-animation-delay:-.9s;animation-delay:-.9s}@-webkit-keyframes sk-cubemove{25%{-webkit-transform:translateX(42px) rotate(-90deg) scale(.5)}50%{-webkit-transform:translateX(42px) translateY(42px) rotate(-180deg)}75%{-webkit-transform:translateX(0) translateY(42px) rotate(-270deg) scale(.5)}to{-webkit-transform:rotate(-1turn)}}@keyframes sk-cubemove{25%{transform:translateX(42px) rotate(-90deg) scale(.5);-webkit-transform:translateX(42px) rotate(-90deg) scale(.5)}50%{transform:translateX(42px) translateY(42px) rotate(-179deg);-webkit-transform:translateX(42px) translateY(42px) rotate(-179deg)}50.1%{transform:translateX(42px) translateY(42px) rotate(-180deg);-webkit-transform:translateX(42px) translateY(42px) rotate(-180deg)}75%{transform:translateX(0) translateY(42px) rotate(-270deg) scale(.5);-webkit-transform:translateX(0) translateY(42px) rotate(-270deg) scale(.5)}to{transform:rotate(-1turn);-webkit-transform:rotate(-1turn)}}.resumeContainer .resumeContent .headingPartActive .part__content,.resumeContainer .resumeContent .rowPartActive .partContent{z-index:10}.resumeContainer .resumeContent .headingPartActive .part__content:before,.resumeContainer .resumeContent .rowPartActive .partContent:before{content:\" \";display:block;position:absolute;top:-1rem;right:-1rem;bottom:-1rem;left:-1rem;border-radius:5px;border:2px solid #ebebeb}.show{display:block}.hide{display:none}.ant-layout .ant-layout-content{padding:0}.resume-preview .resumeContainer .resumeContent{min-height:0!important;max-width:none!important;width:952px;height:1530px;overflow:hidden}.resume-preview{position:absolute;top:0;left:0;width:100%;height:100vh;z-index:2000;background:#dcdcdc}.resume-preview .resumeContainer{position:relative;margin-top:0;background:#dcdcdc;padding:12px}.resume-preview .resumeContainer .resumeContent .quill-editor{outline:none}.resume-preview .resumeContainer .resumeContent .quill-editor:hover{background:none}.resume-preview .resumeContainer .resumeContent .time .quill-editor,.resume-preview .resumeContainer .template03 .template03-education__time .quill-editor,.resume-preview .resumeContainer .template03 .template03-work-experience__time .quill-editor,.resume-preview .resumeContainer .template04 .template04-education__item__timeline .quill-editor,.resume-preview .resumeContainer .template04 .template04-workingExperience__content__timeline .quill-editor{flex:inherit!important}.resumeContainer{width:100%;display:flex;flex-direction:column;justify-content:center;margin-top:24px}.resumeContainer .resumeContent{min-height:1448px;width:100%;max-width:1108px;background:#fff;margin-top:20px;box-shadow:0 1px 8px rgba(0,0,0,.1);position:relative}.resumeContainer .resumeContent .pageIndex{position:absolute;width:32px;height:34px;background:#288ad3;bottom:0;right:20px;display:flex;justify-content:center;align-items:center;z-index:2}.resumeContainer .resumeContent .pageIndex p{font-size:1.4rem;color:#fff}.resumeContainer .resumeContent .part{width:100%;position:relative;padding-top:16px}.resumeContainer .resumeContent .part .partContent{position:relative;z-index:9}.resumeContainer .resumeContent .part.focus .part__content--heading .rowTools{display:block}.resumeContainer .resumeContent .part.focusContent .part__content--heading:before{content:\"\";position:absolute;width:100%;height:100%;top:0;left:0;border:1px solid #ccc}.resumeContainer .resumeContent .part .part__content--contents .rows .row.focus .rowTools{display:block}.resumeContainer .resumeContent .rowPartActive .row{position:relative}.resumeContainer .resumeContent .rowPartActive .row.rowActive,.resumeContainer .resumeContent .rowPartActive .row.rowActive .label,.resumeContainer .resumeContent .rowPartActive .row.rowActive .value{z-index:9}.resumeContainer .resumeContent .rowPartActive .row.rowActive:after{content:\" \";display:block;position:absolute;top:-.75rem;left:-.75rem;right:-1.8rem;bottom:-1rem;background:hsla(0,0%,95%,.7)}.resumeContainer .resumeContent .headingPartActive:before{background:hsla(0,0%,95%,.7);border:none;border-radius:0;border-top-right-radius:5px;border-bottom-right-radius:5px}.resumeContainer .resumeContent .headingPartActive .heading h3,.resumeContainer .resumeContent .headingPartActive .label,.resumeContainer .resumeContent .headingPartActive .value{border-color:#ccc!important}.resumeContainer .resumeContent .headingPartActive .heading{position:relative}.resumeContainer .resumeContent .headingPartActive .heading h3{position:relative;z-index:9}.ant-menu{max-width:1147px;margin:0 auto}.template02 .resumeContent__top{width:100%}@import url(https://fonts.googleapis.com/css?family=Roboto);@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.part__content--heading{display:flex;flex-direction:row;align-content:baseline}.part__content--heading img{width:18px}.part__content--heading h1{flex:1;margin-left:12px;font-family:iCiel Gotham Ultra;font-size:18px;padding-top:3px;padding-left:4px;text-transform:uppercase;margin-bottom:0;font-weight:bolder}.template02 .heading-line .row:before,.template02 .horizon-line:before{content:\"\";height:100%;width:1px;position:absolute;left:-19px;border-left:1px solid #666}.template02 .heading-line .row:after,.template02 .horizon-line:after{content:\"\";display:block;border-radius:50%;background:#fff;position:absolute;width:12px;height:12px;border:1px solid #666;top:18px;left:-25px}.body-wrapper{background-color:#dcdcdc}.template02{margin:24px auto;position:relative;max-width:1024px;display:flex;padding:42px}.template02 .new_section{margin-top:20px}.template02 .new_section button{cursor:pointer;background-color:#001529;color:#fff}.template02.resumeContent .part{padding:24px 0}.template02.resumeContent .part:not(:last-child){border-bottom:1px solid #bbb}.template02.resumeContent .part-combined{display:flex;flex-direction:row}.template02 .resumeContent__page-index{position:absolute;width:32px;height:34px;background:#666464;bottom:0;right:20px;display:flex;justify-content:center;align-items:center;z-index:2}.template02 .resumeContent__page-index span{font-size:1rem;color:#fff}.template02 .part-vertical{width:50%}.template02 .part-vertical .achivement{margin-top:50px}.buttonDrawer{border:medium none;color:#fff;right:0;position:fixed;top:40%;width:55px;text-shadow:0 0 1px #227270}.subMenu{position:relative}.subMenu:hover .subMenu__show{display:block}.subMenu__show{left:-185%;position:absolute;z-index:6;flex-wrap:nowrap;margin:auto;display:none}@-moz-document url-prefix(){.template02 p{word-wrap:anywhere}}.PartCombine{display:block;position:relative}.PartCombine .rowTool{height:100%;position:absolute;top:0}.PartCombine .rowTool:hover .rowTool__relative a.btn{background:#999;color:#212121}.PartCombine .rowTool .tooltip{display:none}.PartCombine .rowTool.left{left:-38px;width:38px}.PartCombine .rowTool.right{right:-38px;width:38px}.PartCombine .rowTool.right .rowTool__relative{align-items:center}.PartCombine .rowTool .rowTool__relative{height:100%;display:flex;justify-content:center}.PartCombine .rowTool .rowTool__relative a.btn{width:22px;height:22px;background:#00000015;border-radius:50%;display:flex;justify-content:center;align-items:center;color:#21212115}.PartCombine .rowTool .rowTool__relative a.btn:hover{color:#fff}.PartCombine .rowTool .rowTool__relative .middleTool{height:100%;flex-direction:column;justify-content:center;align-items:center;opacity:.4;transition:all .2s ease-in-out}.PartCombine .rowTool .rowTool__relative .middleTool:hover{opacity:1}.PartCombine .rowTool .rowTool__relative .middleTool a.btnMidle{margin-bottom:12px}.PartCombine .rowTool .rowTool__relative .topTool{position:absolute;top:-28px}.PartCombine .rowTool .rowTool__relative .bottomTool{position:absolute;bottom:-28px}.resumeContainer .select-section{width:30px;height:150px;position:fixed;top:35%;left:calc((100% - 1200px) / 2)}.resumeContainer .select-section .icon-item{width:30px;height:30px;border-radius:100%;background:#d6d6dd;display:flex;justify-content:center;margin-bottom:5px;cursor:pointer}.resumeContainer .select-section .icon-item:hover{background:#8ebee6}.resumeContainer .select-section .icon-item svg{width:15px;height:auto}.resumeContainer .select-section .hasItem,.resumeContainer .select-section .icon-list:hover,.resumeContainer .select-section .icon-list:hover .icon-item{background:#8ebee6}@media only screen and (max-height:708px) and (min-width:1240px){.resumeContainer .select-section{display:flex;width:60px;flex-wrap:wrap;left:calc((100% - 1260px) / 2)}.resumeContainer .select-temp04{width:30px!important;left:calc((100% - 1228px) / 2)}}.quill-editor-wrapper{display:flex;flex-direction:row}.quill-editor-wrapper .quill-editor-addon{background:#fff;border:1px solid #ccc;border-right:none;padding:0 8px;display:flex;align-items:center;border-top-left-radius:3px;border-bottom-left-radius:3px;background:#fafafa}.quill-editor{flex:1;position:relative;border:1px solid transparent;padding:2px 4px;word-break:break-word}.quill-editor.row-1{min-height:24px}.quill-editor.row-2{min-height:48px}.quill-editor.row-3{min-height:72px}.quill-editor.row-4{min-height:96px}.quill-editor.row-5{min-height:120px}.quill-editor:hover{background:#cdebf650;min-width:fit-content}.quill-editor.focus,.quill-editor:hover{outline:1px dashed #269ad1}.quill-editor.focus .ql-toolbar{display:block;background:#269ad150}.quill-editor.focus.hide-toolbar .ql-toolbar{display:none}.quill-editor.hasPreAddon{border-top-left-radius:0!important;border-bottom-left-radius:0!important}.quill-editor .ql-toolbar{display:none;position:absolute;height:34px;top:-34px;right:-1px}.quill-editor .ql-toolbar.ql-snow{padding:4px}.quill-editor .ql-toolbar .ql-formats:last-child{margin-right:0}.quill-editor .ql-container.ql-snow{border:none}.quill-editor .ql-container .ql-editor{padding:0;min-width:33px}.quill-editor .ql-container .ql-editor ol,.quill-editor .ql-container .ql-editor ul{padding-left:1rem}.quill-editor .ql-container .ql-editor ol li,.quill-editor .ql-container .ql-editor ul li{padding-left:0}.quill-editor .ql-container .ql-editor ol li:not(.ql-direction-rtl):before,.quill-editor .ql-container .ql-editor ul li:not(.ql-direction-rtl):before{margin-left:0;margin-right:0;text-align:initial}.quill-editor .ql-blank:before{min-width:80px}/*! * Quill Editor v1.3.0 * https://quilljs.com/ * Copyright (c) 2014, Jason Chen * Copyright (c) 2013, salesforce.com */.ql-container{box-sizing:border-box;font-family:Helvetica,Arial,sans-serif;font-size:13px;height:100%;margin:0;position:relative}.ql-container.ql-disabled .ql-tooltip{visibility:hidden}.ql-container.ql-disabled .ql-editor ul[data-checked]li:before{pointer-events:none}.ql-clipboard{left:-100000px;height:1px;overflow-y:hidden;position:absolute;top:50%}.ql-clipboard p{margin:0;padding:0}.ql-editor{box-sizing:border-box;line-height:1.42;height:100%;outline:none;overflow-y:auto;padding:12px 15px;tab-size:4;-moz-tab-size:4;text-align:left;white-space:pre-wrap;word-wrap:break-word}.ql-editor*{cursor:text}.ql-editor blockquote,.ql-editor h1,.ql-editor h2,.ql-editor h3,.ql-editor h4,.ql-editor h5,.ql-editor h6,.ql-editor ol,.ql-editor p,.ql-editor pre,.ql-editor ul{margin:0;padding:0;counter-reset:list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol,.ql-editor ul{padding-left:1.5em}.ql-editor olli,.ql-editor ulli{list-style-type:none}.ql-editor ulli:before{content:\"\\2022\"}.ql-editor ul[data-checked=false],.ql-editor ul[data-checked=true]{pointer-events:none}.ql-editor ul[data-checked=false]li *,.ql-editor ul[data-checked=true]li *{pointer-events:all}.ql-editor ul[data-checked=false]li:before,.ql-editor ul[data-checked=true]li:before{color:#777;cursor:pointer;pointer-events:all}.ql-editor ul[data-checked=true]li:before{content:\"\\2611\"}.ql-editor ul[data-checked=false]li:before{content:\"\\2610\"}.ql-editor li:before{display:inline-block;white-space:nowrap;width:1.2em}.ql-editor li:not(.ql-direction-rtl):before{margin-left:-1.5em;margin-right:.3em;text-align:right}.ql-editor li.ql-direction-rtl:before{margin-left:.3em;margin-right:-1.5em}.ql-editor ol li:not(.ql-direction-rtl),.ql-editor ul li:not(.ql-direction-rtl){padding-left:1.5em}.ql-editor ol li.ql-direction-rtl,.ql-editor ul li.ql-direction-rtl{padding-right:1.5em}.ql-editor ol li{counter-reset:list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;counter-increment:list-0}.ql-editor ol li:before{content:counter(list-0,decimal) \". \"}.ql-editor ol li.ql-indent-1{counter-increment:list-1}.ql-editor ol li.ql-indent-1:before{content:counter(list-1,lower-alpha) \". \"}.ql-editor ol li.ql-indent-1{counter-reset:list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-2{counter-increment:list-2}.ql-editor ol li.ql-indent-2:before{content:counter(list-2,lower-roman) \". \"}.ql-editor ol li.ql-indent-2{counter-reset:list-3 list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-3{counter-increment:list-3}.ql-editor ol li.ql-indent-3:before{content:counter(list-3,decimal) \". \"}.ql-editor ol li.ql-indent-3{counter-reset:list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-4{counter-increment:list-4}.ql-editor ol li.ql-indent-4:before{content:counter(list-4,lower-alpha) \". \"}.ql-editor ol li.ql-indent-4{counter-reset:list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-5{counter-increment:list-5}.ql-editor ol li.ql-indent-5:before{content:counter(list-5,lower-roman) \". \"}.ql-editor ol li.ql-indent-5{counter-reset:list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-6{counter-increment:list-6}.ql-editor ol li.ql-indent-6:before{content:counter(list-6,decimal) \". \"}.ql-editor ol li.ql-indent-6{counter-reset:list-7 list-8 list-9}.ql-editor ol li.ql-indent-7{counter-increment:list-7}.ql-editor ol li.ql-indent-7:before{content:counter(list-7,lower-alpha) \". \"}.ql-editor ol li.ql-indent-7{counter-reset:list-8 list-9}.ql-editor ol li.ql-indent-8{counter-increment:list-8}.ql-editor ol li.ql-indent-8:before{content:counter(list-8,lower-roman) \". \"}.ql-editor ol li.ql-indent-8{counter-reset:list-9}.ql-editor ol li.ql-indent-9{counter-increment:list-9}.ql-editor ol li.ql-indent-9:before{content:counter(list-9,decimal) \". \"}.ql-editor .ql-indent-1:not(.ql-direction-rtl){padding-left:3em}.ql-editor li.ql-indent-1:not(.ql-direction-rtl){padding-left:4.5em}.ql-editor .ql-indent-1.ql-direction-rtl.ql-align-right{padding-right:3em}.ql-editor li.ql-indent-1.ql-direction-rtl.ql-align-right{padding-right:4.5em}.ql-editor .ql-indent-2:not(.ql-direction-rtl){padding-left:6em}.ql-editor li.ql-indent-2:not(.ql-direction-rtl){padding-left:7.5em}.ql-editor .ql-indent-2.ql-direction-rtl.ql-align-right{padding-right:6em}.ql-editor li.ql-indent-2.ql-direction-rtl.ql-align-right{padding-right:7.5em}.ql-editor .ql-indent-3:not(.ql-direction-rtl){padding-left:9em}.ql-editor li.ql-indent-3:not(.ql-direction-rtl){padding-left:10.5em}.ql-editor .ql-indent-3.ql-direction-rtl.ql-align-right{padding-right:9em}.ql-editor li.ql-indent-3.ql-direction-rtl.ql-align-right{padding-right:10.5em}.ql-editor .ql-indent-4:not(.ql-direction-rtl){padding-left:12em}.ql-editor li.ql-indent-4:not(.ql-direction-rtl){padding-left:13.5em}.ql-editor .ql-indent-4.ql-direction-rtl.ql-align-right{padding-right:12em}.ql-editor li.ql-indent-4.ql-direction-rtl.ql-align-right{padding-right:13.5em}.ql-editor .ql-indent-5:not(.ql-direction-rtl){padding-left:15em}.ql-editor li.ql-indent-5:not(.ql-direction-rtl){padding-left:16.5em}.ql-editor .ql-indent-5.ql-direction-rtl.ql-align-right{padding-right:15em}.ql-editor li.ql-indent-5.ql-direction-rtl.ql-align-right{padding-right:16.5em}.ql-editor .ql-indent-6:not(.ql-direction-rtl){padding-left:18em}.ql-editor li.ql-indent-6:not(.ql-direction-rtl){padding-left:19.5em}.ql-editor .ql-indent-6.ql-direction-rtl.ql-align-right{padding-right:18em}.ql-editor li.ql-indent-6.ql-direction-rtl.ql-align-right{padding-right:19.5em}.ql-editor .ql-indent-7:not(.ql-direction-rtl){padding-left:21em}.ql-editor li.ql-indent-7:not(.ql-direction-rtl){padding-left:22.5em}.ql-editor .ql-indent-7.ql-direction-rtl.ql-align-right{padding-right:21em}.ql-editor li.ql-indent-7.ql-direction-rtl.ql-align-right{padding-right:22.5em}.ql-editor .ql-indent-8:not(.ql-direction-rtl){padding-left:24em}.ql-editor li.ql-indent-8:not(.ql-direction-rtl){padding-left:25.5em}.ql-editor .ql-indent-8.ql-direction-rtl.ql-align-right{padding-right:24em}.ql-editor li.ql-indent-8.ql-direction-rtl.ql-align-right{padding-right:25.5em}.ql-editor .ql-indent-9:not(.ql-direction-rtl){padding-left:27em}.ql-editor li.ql-indent-9:not(.ql-direction-rtl){padding-left:28.5em}.ql-editor .ql-indent-9.ql-direction-rtl.ql-align-right{padding-right:27em}.ql-editor li.ql-indent-9.ql-direction-rtl.ql-align-right{padding-right:28.5em}.ql-editor .ql-video{display:block;max-width:100%}.ql-editor .ql-video.ql-align-center{margin:0 auto}.ql-editor .ql-video.ql-align-right{margin:0 0 0 auto}.ql-editor .ql-bg-black{background-color:#000}.ql-editor .ql-bg-red{background-color:#e60000}.ql-editor .ql-bg-orange{background-color:#f90}.ql-editor .ql-bg-yellow{background-color:#ff0}.ql-editor .ql-bg-green{background-color:#008a00}.ql-editor .ql-bg-blue{background-color:#06c}.ql-editor .ql-bg-purple{background-color:#93f}.ql-editor .ql-color-white{color:#fff}.ql-editor .ql-color-red{color:#e60000}.ql-editor .ql-color-orange{color:#f90}.ql-editor .ql-color-yellow{color:#ff0}.ql-editor .ql-color-green{color:#008a00}.ql-editor .ql-color-blue{color:#06c}.ql-editor .ql-color-purple{color:#93f}.ql-editor .ql-font-serif{font-family:Georgia,Times New Roman,serif}.ql-editor .ql-font-monospace{font-family:Monaco,Courier New,monospace}.ql-editor .ql-size-small{font-size:.75em}.ql-editor .ql-size-large{font-size:1.5em}.ql-editor .ql-size-huge{font-size:2.5em}.ql-editor .ql-direction-rtl{direction:rtl;text-align:inherit}.ql-editor .ql-align-center{text-align:center}.ql-editor .ql-align-justify{text-align:justify}.ql-editor .ql-align-right{text-align:right}.ql-editor .ql-embed-selected{border:1px solid #777;user-select:none}.ql-editor.ql-blank:before{color:rgba(0,0,0,.6);content:attr(data-placeholder);font-style:italic;pointer-events:none;position:absolute}.ql-snow.ql-toolbar:after,.ql-snow .ql-toolbar:after{clear:both;content:\"\";display:table}.ql-snow.ql-toolbar button,.ql-snow .ql-toolbar button{background:none;border:none;cursor:pointer;display:inline-block;float:left;height:24px;padding:3px 5px;width:28px}.ql-snow.ql-toolbar button svg,.ql-snow .ql-toolbar button svg{float:left;height:100%}.ql-snow.ql-toolbar button:active:hover,.ql-snow .ql-toolbar button:active:hover{outline:none}.ql-snow.ql-toolbar input.ql-image[type=file],.ql-snow .ql-toolbar input.ql-image[type=file]{display:none}.ql-snow.ql-toolbar .ql-picker-item.ql-selected,.ql-snow .ql-toolbar .ql-picker-item.ql-selected,.ql-snow.ql-toolbar .ql-picker-item:hover,.ql-snow .ql-toolbar .ql-picker-item:hover,.ql-snow.ql-toolbar .ql-picker-label.ql-active,.ql-snow .ql-toolbar .ql-picker-label.ql-active,.ql-snow.ql-toolbar .ql-picker-label:hover,.ql-snow .ql-toolbar .ql-picker-label:hover,.ql-snow.ql-toolbar button.ql-active,.ql-snow .ql-toolbar button.ql-active,.ql-snow.ql-toolbar button:focus,.ql-snow .ql-toolbar button:focus,.ql-snow.ql-toolbar button:hover,.ql-snow .ql-toolbar button:hover{color:#06c}.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-fill,.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-fill,.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-fill,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-fill,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-fill,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-fill,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-fill,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-fill,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,.ql-snow.ql-toolbar button.ql-active .ql-fill,.ql-snow .ql-toolbar button.ql-active .ql-fill,.ql-snow.ql-toolbar button.ql-active .ql-stroke.ql-fill,.ql-snow .ql-toolbar button.ql-active .ql-stroke.ql-fill,.ql-snow.ql-toolbar button:focus .ql-fill,.ql-snow .ql-toolbar button:focus .ql-fill,.ql-snow.ql-toolbar button:focus .ql-stroke.ql-fill,.ql-snow .ql-toolbar button:focus .ql-stroke.ql-fill,.ql-snow.ql-toolbar button:hover .ql-fill,.ql-snow .ql-toolbar button:hover .ql-fill,.ql-snow.ql-toolbar button:hover .ql-stroke.ql-fill,.ql-snow .ql-toolbar button:hover .ql-stroke.ql-fill{fill:#06c}.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke,.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke,.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke-miter,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke-miter,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke-miter,.ql-snow.ql-toolbar button.ql-active .ql-stroke,.ql-snow .ql-toolbar button.ql-active .ql-stroke,.ql-snow.ql-toolbar button.ql-active .ql-stroke-miter,.ql-snow .ql-toolbar button.ql-active .ql-stroke-miter,.ql-snow.ql-toolbar button:focus .ql-stroke,.ql-snow .ql-toolbar button:focus .ql-stroke,.ql-snow.ql-toolbar button:focus .ql-stroke-miter,.ql-snow .ql-toolbar button:focus .ql-stroke-miter,.ql-snow.ql-toolbar button:hover .ql-stroke,.ql-snow .ql-toolbar button:hover .ql-stroke,.ql-snow.ql-toolbar button:hover .ql-stroke-miter,.ql-snow .ql-toolbar button:hover .ql-stroke-miter{stroke:#06c}@media (pointer:coarse){.ql-snow.ql-toolbar button:hover:not(.ql-active),.ql-snow .ql-toolbar button:hover:not(.ql-active){color:#444}.ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-fill,.ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-fill,.ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill,.ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill{fill:#444}.ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke,.ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke,.ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter,.ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter{stroke:#444}}.ql-snow,.ql-snow *{box-sizing:border-box}.ql-snow .ql-hidden{display:none}.ql-snow .ql-out-bottom,.ql-snow .ql-out-top{visibility:hidden}.ql-snow .ql-tooltip{position:absolute;transform:translateY(10px)}.ql-snow .ql-tooltip a{cursor:pointer;text-decoration:none}.ql-snow .ql-tooltip.ql-flip{transform:translateY(-10px)}.ql-snow .ql-formats{display:inline-block;vertical-align:middle}.ql-snow .ql-formats:after{clear:both;content:\"\";display:table}.ql-snow .ql-stroke{fill:none;stroke:#444;stroke-linecap:round;stroke-linejoin:round;stroke-width:2}.ql-snow .ql-stroke-miter{fill:none;stroke:#444;stroke-miterlimit:10;stroke-width:2}.ql-snow .ql-fill,.ql-snow .ql-stroke.ql-fill{fill:#444}.ql-snow .ql-empty{fill:none}.ql-snow .ql-even{fill-rule:evenodd}.ql-snow .ql-stroke.ql-thin,.ql-snow .ql-thin{stroke-width:1}.ql-snow .ql-transparent{opacity:.4}.ql-snow .ql-direction svg:last-child{display:none}.ql-snow .ql-direction.ql-active svg:last-child{display:inline}.ql-snow .ql-direction.ql-active svg:first-child{display:none}.ql-snow .ql-editor h1{font-size:2em}.ql-snow .ql-editor h2{font-size:1.5em}.ql-snow .ql-editor h3{font-size:1.17em}.ql-snow .ql-editor h4{font-size:1em}.ql-snow .ql-editor h5{font-size:.83em}.ql-snow .ql-editor h6{font-size:.67em}.ql-snow .ql-editor a{text-decoration:underline}.ql-snow .ql-editor blockquote{border-left:4px solid #ccc;margin-bottom:5px;margin-top:5px;padding-left:16px}.ql-snow .ql-editor code,.ql-snow .ql-editor pre{background-color:#f0f0f0;border-radius:3px}.ql-snow .ql-editor pre{white-space:pre-wrap;margin-bottom:5px;margin-top:5px;padding:5px 10px}.ql-snow .ql-editor code{font-size:85%;padding-bottom:2px;padding-top:2px}.ql-snow .ql-editor code:after,.ql-snow .ql-editor code:before{content:\"\\A0\";letter-spacing:-2px}.ql-snow .ql-editor pre.ql-syntax{background-color:#23241f;color:#f8f8f2;overflow:visible}.ql-snow .ql-editor img{max-width:100%}.ql-snow .ql-picker{color:#444;display:inline-block;float:left;font-size:14px;font-weight:500;height:24px;position:relative;vertical-align:middle}.ql-snow .ql-picker-label{cursor:pointer;display:inline-block;height:100%;padding-left:8px;padding-right:2px;position:relative;width:100%}.ql-snow .ql-picker-label:before{display:inline-block;line-height:22px}.ql-snow .ql-picker-options{background-color:#fff;display:none;min-width:100%;padding:4px 8px;position:absolute;white-space:nowrap}.ql-snow .ql-picker-options .ql-picker-item{cursor:pointer;display:block;padding-bottom:5px;padding-top:5px}.ql-snow .ql-picker.ql-expanded .ql-picker-label{color:#ccc;z-index:2}.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-fill{fill:#ccc}.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-stroke{stroke:#ccc}.ql-snow .ql-picker.ql-expanded .ql-picker-options{display:block;margin-top:-1px;top:100%;z-index:1}.ql-snow .ql-color-picker,.ql-snow .ql-icon-picker{width:28px}.ql-snow .ql-color-picker .ql-picker-label,.ql-snow .ql-icon-picker .ql-picker-label{padding:2px 4px}.ql-snow .ql-color-picker .ql-picker-label svg,.ql-snow .ql-icon-picker .ql-picker-label svg{right:4px}.ql-snow .ql-icon-picker .ql-picker-options{padding:4px 0}.ql-snow .ql-icon-picker .ql-picker-item{height:24px;width:24px;padding:2px 4px}.ql-snow .ql-color-picker .ql-picker-options{padding:3px 5px;width:152px}.ql-snow .ql-color-picker .ql-picker-item{border:1px solid transparent;float:left;height:16px;margin:2px;padding:0;width:16px}.ql-snow .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg{position:absolute;margin-top:-9px;right:0;top:50%;width:18px}.ql-snow .ql-picker.ql-font .ql-picker-item[data-label]:not([data-label=\"\"]):before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-label]:not([data-label=\"\"]):before,.ql-snow .ql-picker.ql-header .ql-picker-item[data-label]:not([data-label=\"\"]):before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-label]:not([data-label=\"\"]):before,.ql-snow .ql-picker.ql-size .ql-picker-item[data-label]:not([data-label=\"\"]):before,.ql-snow .ql-picker.ql-size .ql-picker-label[data-label]:not([data-label=\"\"]):before{content:attr(data-label)}.ql-snow .ql-picker.ql-header{width:98px}.ql-snow .ql-picker.ql-header .ql-picker-item:before,.ql-snow .ql-picker.ql-header .ql-picker-label:before{content:\"Normal\"}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"1\"]:before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"1\"]:before{content:\"Heading 1\"}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"2\"]:before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"2\"]:before{content:\"Heading 2\"}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"3\"]:before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"3\"]:before{content:\"Heading 3\"}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"4\"]:before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"4\"]:before{content:\"Heading 4\"}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"5\"]:before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"5\"]:before{content:\"Heading 5\"}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"6\"]:before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"6\"]:before{content:\"Heading 6\"}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"1\"]:before{font-size:2em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"2\"]:before{font-size:1.5em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"3\"]:before{font-size:1.17em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"4\"]:before{font-size:1em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"5\"]:before{font-size:.83em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"6\"]:before{font-size:.67em}.ql-snow .ql-picker.ql-font{width:108px}.ql-snow .ql-picker.ql-font .ql-picker-item:before,.ql-snow .ql-picker.ql-font .ql-picker-label:before{content:\"Sans Serif\"}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]:before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=serif]:before{content:\"Serif\"}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]:before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=monospace]:before{content:\"Monospace\"}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]:before{font-family:Georgia,Times New Roman,serif}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]:before{font-family:Monaco,Courier New,monospace}.ql-snow .ql-picker.ql-size{width:98px}.ql-snow .ql-picker.ql-size .ql-picker-item:before,.ql-snow .ql-picker.ql-size .ql-picker-label:before{content:\"Normal\"}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]:before,.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=small]:before{content:\"Small\"}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]:before,.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=large]:before{content:\"Large\"}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]:before,.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=huge]:before{content:\"Huge\"}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]:before{font-size:10px}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]:before{font-size:18px}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]:before{font-size:32px}.ql-snow .ql-color-picker.ql-background .ql-picker-item{background-color:#fff}.ql-snow .ql-color-picker.ql-color .ql-picker-item{background-color:#000}.ql-toolbar.ql-snow{border:1px solid #ccc;box-sizing:border-box;font-family:Helvetica Neue,Helvetica,Arial,sans-serif;padding:8px}.ql-toolbar.ql-snow .ql-formats{margin-right:15px}.ql-toolbar.ql-snow .ql-picker-label{border:1px solid transparent}.ql-toolbar.ql-snow .ql-picker-options{border:1px solid transparent;box-shadow:0 2px 8px rgba(0,0,0,.2)}.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-label,.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-options{border-color:#ccc}.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item.ql-selected,.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item:hover{border-color:#000}.ql-toolbar.ql-snow+.ql-container.ql-snow{border-top:0}.ql-snow .ql-tooltip{background-color:#fff;border:1px solid #ccc;box-shadow:0 0 5px #ddd;color:#444;padding:5px 12px;white-space:nowrap}.ql-snow .ql-tooltip:before{content:\"Visit URL:\";line-height:26px;margin-right:8px}.ql-snow .ql-tooltip input[type=text]{display:none;border:1px solid #ccc;font-size:13px;height:26px;margin:0;padding:3px 5px;width:170px}.ql-snow .ql-tooltip a.ql-preview{display:inline-block;max-width:200px;overflow-x:hidden;text-overflow:ellipsis;vertical-align:top}.ql-snow .ql-tooltip a.ql-action:after{border-right:1px solid #ccc;content:\"Edit\";margin-left:16px;padding-right:8px}.ql-snow .ql-tooltip a.ql-remove:before{content:\"Remove\";margin-left:8px}.ql-snow .ql-tooltip a{line-height:26px}.ql-snow .ql-tooltip.ql-editing a.ql-preview,.ql-snow .ql-tooltip.ql-editing a.ql-remove{display:none}.ql-snow .ql-tooltip.ql-editing input[type=text]{display:inline-block}.ql-snow .ql-tooltip.ql-editing a.ql-action:after{border-right:0;content:\"Save\";padding-right:0}.ql-snow .ql-tooltip[data-mode=link]:before{content:\"Enter link:\"}.ql-snow .ql-tooltip[data-mode=formula]:before{content:\"Enter formula:\"}.ql-snow .ql-tooltip[data-mode=video]:before{content:\"Enter video:\"}.ql-snow a{color:#06c}.ql-container.ql-snow{border:1px solid #ccc}.target{padding:2px}.target .part__content--heading svg{width:24px;height:24px}.target .part__icon-wraper{display:flex;justify-content:center}.target .part__icon-wraper svg{width:24px;height:24px}.target .part__icon-wraper svg.ic-2{width:70%}.target .part__content--contents{margin-left:30px;margin-top:12px}.target .part__content--contents p{font-family:Roboto,sans-serif;font-size:15px;color:#666}.target .part__content--contents .rows .row{flex:1}.target.focus .rowTools{display:block}.target.focus .rowTools .rowTool__relative{justify-content:space-around}.target.focus .rowTools .rowTool__relative a.btn{margin:0}.rowPartTools{display:none}.rowPartTools:before{content:\"\";height:calc(100% + 30px);background:transparent;top:-30px;border:1px solid #269ad1;background:#269ad120}.rowPartTools .rowTool,.rowPartTools:before{position:absolute;width:calc(100% + 32px);left:0}.rowPartTools .rowTool{height:10px;top:-70px}.rowPartTools .rowTool .tooltip{display:none}.rowPartTools .rowTool.left{width:calc(100% + 32px)}.rowPartTools .rowTool .rowTool__relative{height:calc(100% + 30px);display:flex;justify-content:flex-start;background:#269ad120;border:1px solid #269ad1;border-bottom:none;padding-left:10px}.rowPartTools .rowTool .rowTool__relative a.btn{width:22px;height:22px;background:rgba(4,39,71,.432);border-radius:50%;display:flex;justify-content:center;align-items:center;color:#fff}.rowPartTools .rowTool .rowTool__relative a.btn:hover{color:#fff}.rowPartTools .rowTool .rowTool__relative .middleTool{height:100%;display:flex;justify-content:center;align-items:center}.rowPartTools .rowTool .rowTool__relative .middleTool a.btn{margin:0 10px}.rowTools{display:none}.rowTools:before{content:\"\";width:100%;background:rgba(62,148,228,.2);left:0}.rowTools .rowTool,.rowTools:before{position:absolute;height:100%;top:0}.rowTools .rowTool .tooltip{display:none}.rowTools .rowTool.left{left:-32px}.rowTools .rowTool.left,.rowTools .rowTool.right{width:32px;background:rgba(62,148,228,.2);z-index:99}.rowTools .rowTool.right{right:-32px}.rowTools .rowTool.right .rowTool__relative{align-items:center}.rowTools .rowTool .rowTool__relative{height:100%;display:flex;justify-content:center}.rowTools .rowTool .rowTool__relative a.btn{width:22px;height:22px;background:rgba(4,39,71,.432);border-radius:50%;display:flex;justify-content:center;align-items:center;color:#fff}.rowTools .rowTool .rowTool__relative a.btn:hover{color:rgba(241,8,136,.432)}.rowTools .rowTool .rowTool__relative .middleTool{height:100%;display:flex;flex-direction:column;justify-content:center;align-items:center}.rowTools .rowTool .rowTool__relative .middleTool a.btn{margin:12px 0}.rowTools .rowTool .rowTool__relative .middleTool a.btn:first-child{margin-bottom:12px}.rowTools .rowTool .rowTool__relative .topTool{position:absolute;top:-28px}.rowTools .rowTool .rowTool__relative .bottomTool{position:absolute;bottom:-28px}.template02-working-experience.focus-part{display:flex;flex-direction:column;position:relative}.template02-working-experience.focus-part .rowPartTools{display:block}.template02 .education,.working-experience{flex:1}.template02 .education .part__content--heading svg,.working-experience .part__content--heading svg{width:24px;height:24px}.template02 .education .part__icon-wraper,.working-experience .part__icon-wraper{display:flex;align-items:center;box-sizing:border-box;width:25px}.template02 .education .part__icon-wraper svg,.working-experience .part__icon-wraper svg{width:24px;height:24px}.template02 .education .part__content--contents,.working-experience .part__content--contents{padding-left:30px}.template02 .education .part__content--contents .rows .row,.working-experience .part__content--contents .rows .row{display:flex;flex-direction:column;position:relative}.template02 .education .part__content--contents .rows .row .quill-editor,.working-experience .part__content--contents .rows .row .quill-editor{padding:1px 2px}.template02 .education .part__content--contents .rows .row .time,.working-experience .part__content--contents .rows .row .time{display:flex;flex-direction:row;align-items:center;padding-top:12px}.template02 .education .part__content--contents .rows .row .time .quill-editor,.working-experience .part__content--contents .rows .row .time .quill-editor{font-family:iCiel Gotham Medium;font-size:12px;color:#181818}.template02 .education .part__content--contents .rows .row .title .ql-editor,.working-experience .part__content--contents .rows .row .title .ql-editor{text-transform:uppercase;font-size:16px;font-weight:500;font-family:iCiel Gotham Medium}.template02 .education .part__content--contents .rows .row .title .ql-blank,.working-experience .part__content--contents .rows .row .title .ql-blank{font-size:13px;text-transform:none;font-family:Roboto,sans-serif}.template02 .education .part__content--contents .rows .row .company .ql-editor,.template02 .education .part__content--contents .rows .row .school .ql-editor,.working-experience .part__content--contents .rows .row .company .ql-editor,.working-experience .part__content--contents .rows .row .template02 .education .school .ql-editor{font-size:12px;letter-spacing:1.3px;font-family:iCiel Gotham Ultra}.template02 .education .part__content--contents .rows .row .company .ql-blank,.template02 .education .part__content--contents .rows .row .school .ql-blank,.working-experience .part__content--contents .rows .row .company .ql-blank,.working-experience .part__content--contents .rows .row .template02 .education .school .ql-blank{font-size:13px;font-weight:700;font-family:Roboto,sans-serif}.template02 .education .part__content--contents .rows .row .description .ql-editor,.working-experience .part__content--contents .rows .row .description .ql-editor{font-family:Roboto,sans-serif;font-size:15px;color:#666}.template02 .education .part__content--contents .rows .row .description .ql-blank,.working-experience .part__content--contents .rows .row .description .ql-blank{font-size:13px;font-weight:none}.template02 .tempate02-education.focus-part{display:flex;flex-direction:column;position:relative}.template02 .tempate02-education.focus-part .rowPartTools{display:block}.template02 .education .part__content--heading img{width:24px}.template02 .education .part__content--heading svg{width:24px;height:24px}.template02 .education .part__content--contents .row{padding-bottom:12px}.template02 .education .part__content--contents .row .rowTools .left .middleTool .btn{width:22px;height:22px;margin:5px}.template02 .education svg.ic-2{width:25px;margin-top:-13px}.row .btnAdd{cursor:pointer;width:120px;margin-top:5px;margin-right:16px;border:1px dashed #666;background:#fff}.rowToolInfor{display:none;position:absolute}.rowToolInfor__btnDelete{position:absolute;right:-25px;top:0;width:30px;color:red;background:rgba(62,148,228,.2);z-index:99;height:100%}.rowToolInfor__btnDelete button{cursor:pointer;background:rgba(4,39,71,.432);border-radius:50%;color:#fff}.rowToolInfor__btnAdd{position:absolute;top:30px;right:50px;width:40px;color:blue;z-index:99;background:rgba(62,148,228,.2);height:100%}.rowToolInfor__btnAdd button{cursor:pointer;background:rgba(4,39,71,.432);border-radius:50%;color:#fff}.ant-modal-content .ant-modal-body .add-row{display:flex;height:40px;margin-bottom:8px}.ant-modal-content .ant-modal-body .add-row label{display:flex;justify-content:center;justify-items:center;flex:0 0 70%;font-size:16px;background:#fff;padding:10px}.ant-modal-content .ant-modal-body .add-row .button-add{margin-left:35px;height:100%}.ant-modal-content .ant-modal-body .add-row .button-add button{width:70px;height:40px;cursor:pointer;border-radius:10px;background:#72d05e;color:#fff}.template02 .information{flex:0 0 45%}.template02 .information .part__content--contents .rows{position:relative}.template02 .information .part__content--contents .rows .row{display:flex;flex-direction:row;justify-content:flex-end;align-items:baseline}.template02 .information .part__content--contents .rows .row .label{width:40px;display:flex;justify-content:center;align-items:center}.template02 .information .part__content--contents .rows .row .label svg{color:#666464}.template02 .information .part__content--contents .rows .row .value{flex:1}.template02 .information .part__content--contents .rows .row .value .quill-editor{width:100%;padding:4px}.template02 .information .part__content--contents .rows .row .value .quill-editor a{cursor:pointer}.template02 .information .part__content--contents .rows .row .value .quill-editor p{font-family:iCiel Gotham Medium;font-size:14px}.template02 .information .part__content--contents .rows .row .value .ql-editor{text-align:right}.template02 .information .part__content--contents .rows .row .btnAdd{cursor:pointer;width:120px;margin-top:5px;margin-right:16px;border:1px dashed #666;background:#fff}.template02 .information .part__content--contents .rows .focus .rowToolInfor,.template02 .information .part__content--contents .rows .row:hover .rowToolInfor{display:block}.template02 .information .ql-editor.ql-blank:before{right:5px}@-moz-document url-prefix(){.template02 .information .part__content--contents .rows .row .value .quill-editor p{word-wrap:anywhere}}.ant-rate{font-size:14px;font-variant:tabular-nums;line-height:1.5;color:rgba(0,0,0,.65);-webkit-box-sizing:border-box;box-sizing:border-box;line-height:unset;margin:0;padding:0;list-style:none;font-size:20px;display:inline-block;color:#fadb14;outline:none}.ant-rate-disabled .ant-rate-star{cursor:default}.ant-rate-disabled .ant-rate-star:hover{-webkit-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}.ant-rate-star{margin:0;padding:0;display:inline-block;margin-right:8px;position:relative;-webkit-transition:all .3s;transition:all .3s;color:inherit;cursor:pointer}.ant-rate-stardiv:focus{outline:0}.ant-rate-stardiv:focus,.ant-rate-stardiv:hover{-webkit-transform:scale(1.1);-ms-transform:scale(1.1);transform:scale(1.1)}.ant-rate-star-first,.ant-rate-star-second{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-transition:all .3s;transition:all .3s;color:#e8e8e8}.ant-rate-star-first .anticon,.ant-rate-star-second .anticon{vertical-align:middle}.ant-rate-star-first{position:absolute;left:0;top:0;width:50%;height:100%;overflow:hidden;opacity:0}.ant-rate-star-half .ant-rate-star-first,.ant-rate-star-half .ant-rate-star-second{opacity:1}.ant-rate-star-full .ant-rate-star-second,.ant-rate-star-half .ant-rate-star-first{color:inherit}.ant-rate-text{margin-left:8px;display:inline-block;font-size:14px}.template02 .template02-language.focus-part{display:flex;flex-direction:column;position:relative}.template02 .template02-language.focus-part .rowPartTools{display:block}.template02 .language{flex:1;align-items:stretch;display:flex;flex-direction:column}.template02 .language .part__content--heading svg{width:24px;height:24px}.template02 .language .part__content--heading svg.ic-2{width:30px;margin-top:-10px}.template02 .language .part__content--heading{display:flex;flex-direction:row;align-content:baseline}.template02 .language .part__content--contents{position:relative;display:flex;flex-direction:row;flex:1;padding-top:4px}.template02 .language .part__content--contents .horizon-line{width:30px}.template02 .language .part__content--contents .horizon-line:before{left:8px}.template02 .language .part__content--contents .horizon-line:after{left:2px}.template02 .language .part__content--contents .rows{flex:1}.template02 .language .part__content--contents .rows .row{display:flex;flex-direction:row;position:relative}.template02 .language .part__content--contents .rows .row:not(:last-child){margin-bottom:7px}.template02 .language .part__content--contents .rows .row .label{flex:1}.template02 .language .part__content--contents .rows .row .value{flex:1;flex-direction:row}.template02 .language .part__content--contents .rows .row .value .quill-editor{max-width:60px;display:inline-flex}.template02 .language .part__content--contents .rows .row .value .ant-rate{color:#666464}.template02 .language .part__content--contents .rows .row .quill-editor{padding:4px}.template02 .language .part__content--contents .rows .row .quill-editor p{font-family:Roboto,sans-serif;font-size:15px}.template02 .language .part__content--contents .rows .row .rowTools svg{width:12px!important;height:12px!important}.template02 .language .part__content--contents .rows .row .rowTools .left .btn{width:16px;height:16px}.template02 .language .part__content--contents .rows .row .rowTools .left .middleTool .btn{width:16px;height:16px;margin:0}.template02 .template02-hobby.focus-part{display:flex;flex-direction:column;position:relative}.template02 .template02-hobby.focus-part .rowPartTools{display:block}.template02 .template02-hobby.focus-part .rowPartTools:before{height:calc(100% + 40px)}.template02 .hobby{flex:1}.template02 .hobby .part__content--heading svg{width:24px;height:24px}.template02 .hobby .part__content--heading svg.ic-2{width:25px;margin-top:-5px}.template02 .hobby .part__content--contents{position:relative;display:flex;flex-direction:row;flex:1;padding-top:4px}.template02 .hobby .part__content--contents .horizon-line{width:30px}.template02 .hobby .part__content--contents .horizon-line:before{left:8px}.template02 .hobby .part__content--contents .horizon-line:after{display:none}.template02 .hobby .part__content--contents .rows{display:flex;flex-direction:row;flex-wrap:wrap;justify-content:space-between;margin-left:16px}.template02 .hobby .part__content--contents .rows .row{display:flex;flex-direction:row;align-items:center;min-width:240px;width:100%;position:relative}.template02 .hobby .part__content--contents .rows .row:first-child{margin-top:12px}.template02 .hobby .part__content--contents .rows .row:not(:last-child){margin-bottom:12px}.template02 .hobby .part__content--contents .rows .row .icon{margin-right:12px;width:32px;padding-top:4px}.template02 .hobby .part__content--contents .rows .row .icon img{height:24px}.template02 .hobby .part__content--contents .rows .row .value{flex:1}.template02 .hobby .part__content--contents .rows .row .value .quill-editor{padding:4px;width:calc(100% - 32px)}.template02 .hobby .part__content--contents .rows .row .rowTools svg{width:10px!important;height:10px!important}.template02 .hobby .part__content--contents .rows .row .rowTools .left .btn{width:16px!important;height:16px!important}.template02 .hobby .part__content--contents .rows .row .rowTools .left .middleTool .btn{width:14px!important;height:14px!important;margin:0!important}.template02-working-experience.focus-part{display:flex;flex-direction:column;position:relative}.template02-working-experience.focus-part .rowPartTools{display:block}.working-experience{flex:1}.working-experience .part__content--heading svg{width:24px;height:24px}.working-experience .part__icon-wraper{display:flex;align-items:center;box-sizing:border-box;width:25px}.working-experience .part__icon-wraper svg{width:24px;height:24px}.working-experience .part__content--contents{padding-left:30px}.working-experience .part__content--contents .rows .row{display:flex;flex-direction:column;position:relative}.working-experience .part__content--contents .rows .row .quill-editor{padding:1px 2px}.working-experience .part__content--contents .rows .row .time{display:flex;flex-direction:row;align-items:center;padding-top:12px}.working-experience .part__content--contents .rows .row .time .quill-editor{font-family:iCiel Gotham Medium;font-size:12px;color:#181818}.working-experience .part__content--contents .rows .row .title .ql-editor{text-transform:uppercase;font-size:16px;font-weight:500;font-family:iCiel Gotham Medium}.working-experience .part__content--contents .rows .row .title .ql-blank{font-size:13px;text-transform:none;font-family:Roboto,sans-serif}.working-experience .part__content--contents .rows .row .company .ql-editor{font-size:12px;letter-spacing:1.3px;font-family:iCiel Gotham Ultra}.working-experience .part__content--contents .rows .row .company .ql-blank{font-size:13px;font-weight:700;font-family:Roboto,sans-serif}.working-experience .part__content--contents .rows .row .description .ql-editor{font-family:Roboto,sans-serif;font-size:15px;color:#666}.working-experience .part__content--contents .rows .row .description .ql-blank{font-size:13px;font-weight:none}.template02 .introduction{flex:0 0 55%;flex:1;color:#212121;display:flex;flex-direction:column;justify-content:center}.template02 .introduction__message{color:#4a4a4a;font-family:iCiel Gotham Medium;font-size:16px;font-weight:500;letter-spacing:2.69px;line-height:16px;text-transform:uppercase;margin-left:48px}.template02 .introduction__name{color:#000;display:flex;flex-direction:row;align-items:baseline;margin-top:10px}.template02 .introduction__name img{width:32px}.template02 .introduction__name svg{width:24px;height:24px}.template02 .introduction__name .quill-editor-wrapper{width:100%}.template02 .introduction__name .quill-editor-wrapper .quill-editor{margin-left:12px;flex:1}.template02 .introduction__name .quill-editor-wrapper .quill-editor .ql-container .ql-editor{text-transform:uppercase;font-family:iCiel Gotham Ultra;font-size:32px;font-weight:900;letter-spacing:2.69px}.template02 .introduction__name .quill-editor{margin-left:12px;flex:1}.template02 .introduction__name .quill-editor .ql-container .ql-editor{text-transform:uppercase;font-family:iCiel Gotham Ultra;font-size:32px;font-weight:900;letter-spacing:2.69px}.template02 .introduction .quill-editor{padding:4px}.template02 .introduction .quill-editor p{display:flex;align-content:center}.template02 .introduction .quill-editor:hover{min-width:auto}.template02 .avatarcv{width:100%;height:150px;text-align:center}.template02 .avatarcv img{width:130px;margin-top:14px;border-radius:50%;border:5px solid #a39d9d}.template02-working-skill.focus-part{display:flex;flex-direction:column;position:relative}.template02-working-skill.focus-part .rowPartTools{display:block}.skill{flex:1;align-items:stretch;display:flex;flex-direction:column}.skill .part__content--heading svg{width:24px;height:24px}.skill .part__content--contents{position:relative;display:flex;flex-direction:row;flex:1}.skill .part__content--contents .horizon-line{width:30px}.skill .part__content--contents .horizon-line:before{left:8px}.skill .part__content--contents .horizon-line:after{left:2px}.skill .part__content--contents .rows{flex:1}.skill .part__content--contents .rows .row{display:flex;flex-direction:row;position:relative}.skill .part__content--contents .rows .row:not(:last-child){margin-bottom:7px}.skill .part__content--contents .rows .row .label{flex:1}.skill .part__content--contents .rows .row .value{flex:1;flex-direction:row}.skill .part__content--contents .rows .row .value .quill-editor{max-width:60px;display:inline-flex}.skill .part__content--contents .rows .row .value .ant-rate{color:#666464}.skill .part__content--contents .rows .row .quill-editor{padding:4px}.skill .part__content--contents .rows .row .quill-editor p{font-family:Roboto,sans-serif;font-size:15px}.skill .part__content--contents .rows .row .rowTools svg{width:12px!important;height:12px!important}.skill .part__content--contents .rows .row .rowTools .left .btn{width:16px;height:16px}.skill .part__content--contents .rows .row .rowTools .left .middleTool .btn{width:16px;height:16px;margin:0}.other{padding:2px}.other .part__icon-wraper{display:flex;justify-content:center;margin-right:-18px}.other .part__icon-wraper svg{width:24px;height:24px}.other .part__icon-wraper svg.ic-2{width:70%}.other h1 .ql-editor{flex:1;margin-left:12px;font-family:iCiel Gotham Ultra;font-size:18px;padding-top:3px;padding-left:4px;text-transform:uppercase;margin-bottom:0}.other .part__content--heading{align-items:center!important}.other .part__content--contents{margin-left:30px;margin-top:12px}.other .part__content--contents p{font-family:Roboto,sans-serif;font-size:15px;color:#666}.other .part__content--contents .rows .row{flex:1}.other.focus .rowTools{display:block}.other.focus .rowTools .rowTool__relative{justify-content:space-around}.other.focus .rowTools .rowTool__relative a.btn{margin:0}.template02-working-experience.focus-part{display:flex;flex-direction:column;position:relative}.template02-working-experience.focus-part .rowPartTools{display:block}.template05 .education,.working-experience{flex:1}.template05 .education .part__content--heading svg,.working-experience .part__content--heading svg{width:24px;height:24px}.template05 .education .part__icon-wraper,.working-experience .part__icon-wraper{display:flex;align-items:center;box-sizing:border-box;width:25px}.template05 .education .part__icon-wraper svg,.working-experience .part__icon-wraper svg{width:24px;height:24px}.template05 .education .part__content--contents,.working-experience .part__content--contents{padding-left:30px}.template05 .education .part__content--contents .rows .row,.working-experience .part__content--contents .rows .row{display:flex;flex-direction:column;position:relative}.template05 .education .part__content--contents .rows .row .quill-editor,.working-experience .part__content--contents .rows .row .quill-editor{padding:1px 2px}.template05 .education .part__content--contents .rows .row .time,.working-experience .part__content--contents .rows .row .time{display:flex;flex-direction:row;align-items:center;padding-top:12px}.template05 .education .part__content--contents .rows .row .time .quill-editor,.working-experience .part__content--contents .rows .row .time .quill-editor{font-family:iCiel Gotham Medium;font-size:12px;color:#181818}.template05 .education .part__content--contents .rows .row .title .ql-editor,.working-experience .part__content--contents .rows .row .title .ql-editor{text-transform:uppercase;font-size:16px;font-weight:500;font-family:iCiel Gotham Medium}.template05 .education .part__content--contents .rows .row .title .ql-blank,.working-experience .part__content--contents .rows .row .title .ql-blank{font-size:13px;text-transform:none;font-family:Roboto,sans-serif}.template05 .education .part__content--contents .rows .row .company .ql-editor,.template05 .education .part__content--contents .rows .row .school .ql-editor,.working-experience .part__content--contents .rows .row .company .ql-editor,.working-experience .part__content--contents .rows .row .template05 .education .school .ql-editor{font-size:12px;letter-spacing:1.3px;font-family:iCiel Gotham Ultra}.template05 .education .part__content--contents .rows .row .company .ql-blank,.template05 .education .part__content--contents .rows .row .school .ql-blank,.working-experience .part__content--contents .rows .row .company .ql-blank,.working-experience .part__content--contents .rows .row .template05 .education .school .ql-blank{font-size:13px;font-weight:700;font-family:Roboto,sans-serif}.template05 .education .part__content--contents .rows .row .description .ql-editor,.working-experience .part__content--contents .rows .row .description .ql-editor{font-family:Roboto,sans-serif;font-size:15px;color:#666}.template05 .education .part__content--contents .rows .row .description .ql-blank,.working-experience .part__content--contents .rows .row .description .ql-blank{font-size:13px;font-weight:none}.template05 .tempate05-education.focus-part{display:flex;flex-direction:column;position:relative}.template05 .tempate05-education.focus-part .rowPartTools{display:block}.template05 .education .part__content--heading svg{width:24px;height:24px}.template05 .education .part__content--heading img{width:24px}.template05 .education .time .time__achievement .ql-editor{min-width:80px}.tempate02-education.focus-part{display:flex;flex-direction:column;position:relative}.tempate02-education.focus-part .rowPartTools{display:block}.time .time__achievement .ql-editor{min-width:70px}.template02-working-experience.focus-part{display:flex;flex-direction:column;position:relative}.template02-working-experience.focus-part .rowPartTools{display:block}.working-experience{flex:1}.working-experience .part__content--heading svg{width:24px;height:24px}.working-experience .part__icon-wraper{display:flex;align-items:center;box-sizing:border-box;width:25px}.working-experience .part__icon-wraper svg{width:24px;height:24px}.working-experience .part__content--contents{padding-left:30px}.working-experience .part__content--contents .rows .row{display:flex;flex-direction:column;position:relative}.working-experience .part__content--contents .rows .row .quill-editor{padding:1px 2px}.working-experience .part__content--contents .rows .row .time{display:flex;flex-direction:row;align-items:center;padding-top:12px}.working-experience .part__content--contents .rows .row .time .quill-editor{font-family:iCiel Gotham Medium;font-size:12px;color:#181818}.working-experience .part__content--contents .rows .row .title .ql-editor{text-transform:uppercase;font-size:16px;font-weight:500;font-family:iCiel Gotham Medium}.working-experience .part__content--contents .rows .row .title .ql-blank{font-size:13px;text-transform:none;font-family:Roboto,sans-serif;font-weight:700}.working-experience .part__content--contents .rows .row .company .ql-editor{font-size:12px;letter-spacing:1.3px;font-family:iCiel Gotham Ultra}.working-experience .part__content--contents .rows .row .company .ql-blank{font-size:13px;font-weight:400!important;font-family:Roboto,sans-serif}.working-experience .part__content--contents .rows .row .description .ql-editor{font-family:Roboto,sans-serif;font-size:15px;color:#666}.working-experience .part__content--contents .rows .row .description .ql-blank{font-size:13px;font-weight:none}.PartCombine .rowTool.left{left:-35px!important;top:15px!important;width:38px}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template03__introduction{text-align:center;padding:0 0 28px}.template03__introduction__name{color:#61b500}.template03__introduction__name .quill{display:inline-block;padding:20px 20px 10px;min-width:500px}.template03__introduction__name .ql-editor{font-size:36px;text-transform:uppercase;font-weight:700;text-align:center;line-height:100%;overflow-y:unset;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:2px}.template03__introduction__name .ql-editor.ql-blank:before{left:30%}.template03__introduction__job{color:#181818}.template03__introduction__job .ql-editor{font-size:18px;text-align:center;line-height:100%;font-weight:500;overflow-y:unset;font-family:Iciel Gotham Medium,sans-serif}.template03__introduction__job .quill{display:inline-block;padding:10px;min-width:500px}.template03__introduction__job .ql-editor.ql-blank:before{left:46%}.ant-upload-select-picture-card i{font-size:32px;color:#999}.ant-upload-select-picture-card .ant-upload-text{margin-top:8px;color:#666}.clearfix{height:500px;overflow:auto}.clearfix button{cursor:pointer;width:100px;height:30px;color:#8a2be2;background-color:#faebd7;border:1px solid #8a2be2}.clearfix form{margin-left:11px!important;display:flex}.clearfix form label{width:83%}.clearfix form input{display:none}.clearfix .gallery-picture{display:flex;flex-wrap:wrap;padding-top:20px;width:100%}.clearfix .gallery-picture__item{position:relative;cursor:pointer;margin:5px 5px 5px 0;width:151px;height:151px;border:1px solid #ddd;margin-left:10px!important}.clearfix .gallery-picture__item img{width:100%;height:100%}.clearfix .gallery-picture__item:hover img{border:1px dotted blue}.clearfix .gallery-picture__item:hover span{display:block;position:absolute;margin-top:-152px;color:coral;margin-left:136px;font-size:16px}.clearfix .gallery-picture__item span{display:none}.clearfix .choose-image__preview img{margin-top:5px;width:149px;height:149px}.clearfix .choose-image label{cursor:pointer;display:flex;justify-content:center;align-items:center;flex-direction:column;border:1px solid #86e0b6;width:97%;height:30px}.clearfix .choose-image label svg{font-size:20px}.clearfix .choose-image label svg path{fill:#5fb958}.ant-modal-content .ant-modal-body{text-align:center;background:#f0f8ff}.ant-modal-content .ant-modal-body .range-slider{margin-top:10px;display:flex;justify-content:center;align-items:center}.ant-modal-content .ant-modal-body .range-slider input{margin-left:20px!important}.ant-modal-content .ant-modal-body .rotate{margin-top:10px;display:flex;justify-content:center;align-items:center;flex-wrap:wrap}.ant-modal-content .ant-modal-body .rotate__button{margin-left:78px}.ant-modal-content .ant-modal-body .rotate__button button{margin-right:20px;width:60px;height:26px;border:1px solid #e070b7;color:#e070b7}.ant-modal-content .ant-modal-body .preview{margin-top:20px}.ant-modal-content .ant-modal-body .preview button{height:26px;border:1px solid #e070b7;color:#e070b7}.ant-modal-content .ant-modal-body .preview button svg{margin-right:5px}.ant-modal-content .ant-modal-body .preview img{margin-left:70px}.ant-modal-content .ant-modal-body input[type=range]{height:16px;-webkit-appearance:none;margin:10px 0;width:100%}.ant-modal-content .ant-modal-body input[type=range]:focus{outline:none}.ant-modal-content .ant-modal-body input[type=range]::-webkit-slider-runnable-track{width:100%;height:10px;cursor:pointer;animate:.2s;box-shadow:1px 1px 1px #50555c;background:#8fdde7;border-radius:36px;border:0 solid #8b6d6d}.ant-modal-content .ant-modal-body input[type=range]::-webkit-slider-thumb{box-shadow:0 0 0 #c49f9f;border:0 solid #bb9494;height:10px;width:27px;border-radius:22px;background:#23b1e9;cursor:pointer;-webkit-appearance:none;margin-top:0}.ant-modal-content .ant-modal-body input[type=range]:focus::-webkit-slider-runnable-track{background:#8fdde7}.template04 .avatar{position:relative;padding-top:32px}.template04 .avatar img{margin:auto;display:block;width:200px;height:200px;border-radius:50%}.template04 .avatar img:hover .upload{display:block;z-index:9}.template04 .avatar:hover .upload{display:block;z-index:9;transition-duration:.5s}.template04 .avatar:hover .upload i{display:block;color:#fff}.template04 .avatar .upload{display:none;position:absolute;margin-left:80.5px;top:50%;width:200px;height:50%;border-radius:0 0 9rem 9rem;background:#481f1f6e}.template04 .avatar .upload i{z-index:9;font-size:30px;position:absolute;top:30px;left:46%;cursor:pointer;color:#a39d9d;display:none}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template03__information{display:grid;grid-template-columns:repeat(26,1fr);column-gap:20;padding:0 20px 50px}.template03__information__left,.template03__information__right{grid-column:9 span;display:flex;flex-flow:column;justify-content:center}.template03__information__left .row .btnAdd,.template03__information__right .row .btnAdd{margin-left:10px}.template03__information__center{grid-column:8 span;margin:0 auto}.template03__information__left{margin-left:5%}.template03__information__center .avatar{position:relative}.template03__information__center .avatar img{border:5px solid #61b500;padding-top:0;display:block;width:250px;height:250px;border-radius:50%}.template03__information__center .avatar img:hover .upload{display:block;z-index:9}.template03__information__center .avatar .gradient{display:none}.template03__information__center .avatar:hover .upload{position:absolute;top:50%;width:100%;height:50%;border-radius:0 0 9rem 9rem;border-top:none;background:#481f1f6e}.template03__information__center .avatar:hover .upload i{display:block;color:#fff}.template03__information__center .avatar .upload i{z-index:9;font-size:30px;position:absolute;top:30px;left:46%;cursor:pointer;color:#a39d9d;display:none}.template03__information__content{display:flex;align-items:center;margin:5px 0;justify-content:center}.template03__information__content .label{font-size:24px;color:#61b500;margin-right:5px;width:50px;text-align:center}.template03__information__content .value,.template03__information__content .value .quill{width:100%}.template03__information__content .value .ql-editor{color:#666;font-size:16px;font-weight:100;font-family:Iciel Gotham Medium,sans-serif;letter-spacing:1.4px}.template03__information__content .value .ql-editor a{cursor:pointer}.template03__information__content:hover .rowToolInfor{display:block;right:37%}.template03__information__content:hover .rowToolInfor__btnDelete{top:-10px}.template03__information .focus .rowToolInfor{display:block;right:37%}.template03__information .focus .rowToolInfor__btnDelete{top:-10px}@-moz-document url-prefix(){.template03__information__content .value .quill-editor .ql-container p{word-wrap:anywhere}}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template03__target .template03__target__header{display:flex;align-items:center;margin-bottom:20px}.template03__target .template03__target__header .template03__target__icon-wraper{width:32px;height:32px;border-radius:100%;border:2px solid #61b500;display:flex;justify-content:center;align-items:center;margin-right:15px}.template03__target .template03__target__header .template03__target__icon-wraper svg{width:18px!important;height:18px!important}.template03__target .template03__target__header .template03__target__icon-wraper svg g{fill:#61b500!important}.template03__target .template03__target__header .template03__target__icon-wraper svg.ic-2{width:55%!important}.template03__target .template03__target__header .template03__target__icon-wraper svg.ic-2 path{fill:#61b500}.template03__target .template03__target__header h2{color:#61b500;text-transform:uppercase}.template03__target .template03__target__header h2,.template03__target .template03__target__header h2 .ql-editor{margin-bottom:0;margin-top:5px;font-weight:bolder;flex-grow:2;font-size:18px;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:1.2px}.template03__target__content{margin-left:45px}.template03__target__content .quill{color:#666}.template03__target__content .quill .ql-editor{font-size:16px;line-height:1.5;font-family:Roboto,sans-serif}.template03__target__header img{width:18px;height:16px}.ant-timeline{font-variant:tabular-nums;line-height:1.5;color:rgba(0,0,0,.65);-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}.ant-timeline,.ant-timeline-item{font-size:14px;list-style:none;margin:0}.ant-timeline-item{position:relative;padding:0 0 20px}.ant-timeline-item-tail{position:absolute;left:4px;top:.75em;height:100%;border-left:2px solid #e8e8e8}.ant-timeline-item-pending .ant-timeline-item-head{font-size:12px}.ant-timeline-item-pending .ant-timeline-item-tail{display:none}.ant-timeline-item-head{position:absolute;width:10px;height:10px;background-color:#fff;border-radius:100px;border:2px solid transparent}.ant-timeline-item-head-blue{border-color:#1890ff;color:#1890ff}.ant-timeline-item-head-red{border-color:#f5222d;color:#f5222d}.ant-timeline-item-head-green{border-color:#52c41a;color:#52c41a}.ant-timeline-item-head-custom{position:absolute;text-align:center;line-height:1;margin-top:0;border:0;height:auto;border-radius:0;padding:3px 1px;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);top:5.5px;left:5px;width:auto}.ant-timeline-item-content{margin:0 0 0 18px;position:relative;top:-6px}.ant-timeline-item-last.ant-timeline-item-tail{display:none}.ant-timeline-item-last.ant-timeline-item-content{min-height:48px}.ant-timeline.ant-timeline-alternate .ant-timeline-item-head,.ant-timeline.ant-timeline-alternate .ant-timeline-item-head-custom,.ant-timeline.ant-timeline-alternate .ant-timeline-item-tail,.ant-timeline.ant-timeline-right .ant-timeline-item-head,.ant-timeline.ant-timeline-right .ant-timeline-item-head-custom,.ant-timeline.ant-timeline-right .ant-timeline-item-tail{left:50%}.ant-timeline.ant-timeline-alternate .ant-timeline-item-head,.ant-timeline.ant-timeline-right .ant-timeline-item-head{margin-left:-4px}.ant-timeline.ant-timeline-alternate .ant-timeline-item-head-custom,.ant-timeline.ant-timeline-right .ant-timeline-item-head-custom{margin-left:1px}.ant-timeline.ant-timeline-alternate .ant-timeline-item-left .ant-timeline-item-content,.ant-timeline.ant-timeline-right .ant-timeline-item-left .ant-timeline-item-content{text-align:left;left:50%;width:50%}.ant-timeline.ant-timeline-alternate .ant-timeline-item-right .ant-timeline-item-content,.ant-timeline.ant-timeline-right .ant-timeline-item-right .ant-timeline-item-content{text-align:right;right:50%;margin-right:18px;width:50%;left:-30px}.ant-timeline.ant-timeline-right .ant-timeline-item-right .ant-timeline-item-head,.ant-timeline.ant-timeline-right .ant-timeline-item-right .ant-timeline-item-head-custom,.ant-timeline.ant-timeline-right .ant-timeline-item-right .ant-timeline-item-tail{left:100%}.ant-timeline.ant-timeline-right .ant-timeline-item-right .ant-timeline-item-content{right:0;width:100%;left:-30px}.ant-timeline.ant-timeline-pending .ant-timeline-item-last .ant-timeline-item-tail{border-left:2px dotted #e8e8e8;display:block}.ant-timeline.ant-timeline-reverse .ant-timeline-item-last .ant-timeline-item-tail{display:none}.ant-timeline.ant-timeline-reverse .ant-timeline-item-pending .ant-timeline-item-tail{border-left:2px dotted #e8e8e8;display:block}.ant-timeline.ant-timeline-reverse .ant-timeline-item-pending .ant-timeline-item-content{min-height:48px}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template03-working-experience.focus-part{display:flex;flex-direction:column;position:relative}.template03-working-experience.focus-part .template03-work-experience .rowPartTools:first-child{display:block}.template03-work-experience .template03-work-experience__header{display:flex;align-items:center;margin-bottom:20px}.template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper{width:32px;height:32px;border-radius:100%;border:2px solid #61b500;display:flex;justify-content:center;align-items:center;margin-right:15px}.template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg{width:18px!important;height:18px!important}.template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg g{fill:#61b500!important}.template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg.ic-2{width:55%!important}.template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg.ic-2 path{fill:#61b500}.template03-work-experience .template03-work-experience__header h2{color:#61b500;text-transform:uppercase}.template03-work-experience .template03-work-experience__header h2,.template03-work-experience .template03-work-experience__header h2 .ql-editor{margin-bottom:0;margin-top:5px;font-weight:bolder;flex-grow:2;font-size:18px;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:1.2px}.template03-work-experience .template03-work-experience__timeline .ant-timeline-item-head{border-color:#61b500;color:#61b500}.template03-work-experience .template03-work-experience__time{display:flex;align-items:baseline}.template03-work-experience .template03-work-experience__time span{color:#666;font-weight:bolder;font-family:Roboto,sans-serif}.template03-work-experience .template03-work-experience__time .quill{color:#666}.template03-work-experience .template03-work-experience__time .quill .ql-editor{font-size:14px;font-weight:500;font-family:Roboto,sans-serif}.template03-work-experience .template03-work-experience__time .achievement .ql-editor{min-width:70px}.template03-work-experience .template03-work-experience__title .quill{color:#61b500;font-weight:700}.template03-work-experience .template03-work-experience__title .quill .ql-editor{font-size:18px;font-family:Iciel Gotham Medium,sans-serif;letter-spacing:1px}.template03-work-experience .template03-work-experience__title .quill .ql-blank{font-size:14px}.template03-work-experience .template03-work-experience__sub-ttl .quill{color:#181818}.template03-work-experience .template03-work-experience__sub-ttl .quill .ql-editor{font-size:14px;font-family:Iciel Gotham Medium,sans-serif;letter-spacing:1px}.template03-work-experience .template03-work-experience__description .quill{color:#666}.template03-work-experience .template03-work-experience__description .quill .ql-editor{font-size:15px;font-family:Roboto,sans-serif}.template03-work-experience .template03-work-experience__content{margin-left:50px}.template03-work-experience .template03-work-experience__transperent .ant-timeline-item-head{background-color:transparent}.template03-work-experience .template03-work-experience__transperent .ant-timeline-item-head-blue{border-color:transparent;color:transparent}.template03-work-experience .template03-work-experience__transperent .ant-timeline-item-content{min-height:0}.template03-work-experience .focus{display:flex;flex-direction:column;position:relative;z-index:9}.template03-work-experience .focus .rowTools{display:block}.template03-work-experience .focus .rowTools .left,.template03-work-experience .focus .rowTools .right,.template03-work-experience .focus .rowTools:before{top:-15px}.template03-work-experience__header img{width:18px;height:16px}.template03-work-experience__content{margin-left:10px!important}.template03-work-experience__content .row .rowTools .left{left:-50px!important;width:50px!important}.template03-work-experience__content .row .ant-timeline-item-content{margin:0 0 0 34px}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template03-education.focus-part{display:flex;flex-direction:column;position:relative}.template03-education.focus-part .template03-education .rowPartTools:first-child{display:block}.template03-education .template03-education__header{display:flex;align-items:center;margin-bottom:20px}.template03-education .template03-education__header .template03-education__icon-wraper{width:32px;height:32px;border-radius:100%;border:2px solid #61b500;display:flex;justify-content:center;align-items:center;margin-right:15px}.template03-education .template03-education__header .template03-education__icon-wraper svg{width:18px!important;height:18px!important}.template03-education .template03-education__header .template03-education__icon-wraper svg g{fill:#61b500!important}.template03-education .template03-education__header .template03-education__icon-wraper svg.ic-2{width:55%!important}.template03-education .template03-education__header .template03-education__icon-wraper svg.ic-2 path{fill:#61b500}.template03-education .template03-education__header h2{color:#61b500;text-transform:uppercase}.template03-education .template03-education__header h2,.template03-education .template03-education__header h2 .ql-editor{margin-bottom:0;margin-top:5px;font-weight:bolder;flex-grow:2;font-size:18px;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:1.2px}.template03-education .template03-education__timeline .ant-timeline-item-head{border-color:#61b500;color:#61b500}.template03-education .template03-education__time{display:flex;align-items:baseline}.template03-education .template03-education__time span{color:#666;font-weight:bolder;font-family:Roboto,sans-serif}.template03-education .template03-education__time .quill{color:#666}.template03-education .template03-education__time .quill .ql-editor{font-size:14px;font-weight:500;font-family:Roboto,sans-serif}.template03-education .template03-education__time .achievement .ql-editor{min-width:70px}.template03-education .template03-education__title .quill{color:#61b500;font-weight:700}.template03-education .template03-education__title .quill .ql-editor{font-size:18px;font-family:Iciel Gotham Medium,sans-serif;letter-spacing:1px}.template03-education .template03-education__title .quill .ql-blank{font-size:14px}.template03-education .template03-education__sub-ttl .quill{color:#181818}.template03-education .template03-education__sub-ttl .quill .ql-editor{font-size:14px;font-family:Iciel Gotham Medium,sans-serif;letter-spacing:1px}.template03-education .template03-education__description .quill{color:#666}.template03-education .template03-education__description .quill .ql-editor{font-size:15px;font-family:Roboto,sans-serif}.template03-education .template03-education__content{margin-left:50px}.template03-education .template03-education__transperent .ant-timeline-item-head{background-color:transparent}.template03-education .template03-education__transperent .ant-timeline-item-head-blue{border-color:transparent;color:transparent}.template03-education .template03-education__transperent .ant-timeline-item-content{min-height:0}.template03-education .focus{display:flex;flex-direction:column;position:relative;z-index:9}.template03-education .focus .rowTools{display:block}.template03-education .focus .rowTools .left,.template03-education .focus .rowTools .right,.template03-education .focus .rowTools:before{top:-15px}.template03-education__icon-wraper svg{width:85%}.template03-education__icon-wraper svg g{fill:none}.template03-education__icon-wraper svg path:not(:first-child){fill:#61b500}.template03-education__icon-wraper svg.ic-2{width:55%!important}.template03-education__icon-wraper svg.ic-2 path{fill:#61b500}.template03-education__header img{width:18px;height:16px}.template03-education__content{margin-left:10px!important}.template03-education__content .row .rowTools .left{left:-50px!important;width:50px!important}.template03-education__content .row .ant-timeline-item-content{margin:0 0 0 34px}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template03-working-skill.focus-part{display:flex;flex-direction:column;position:relative}.template03-working-skill.focus-part .template03-working-skill .rowPartTools:first-child{display:block}.template03-working-skill .template03-working-skill__header{display:flex;align-items:center;margin-bottom:20px}.template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper{width:32px;height:32px;border-radius:100%;border:2px solid #61b500;display:flex;justify-content:center;align-items:center;margin-right:15px}.template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper svg{width:18px!important;height:18px!important}.template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper svg g{fill:#61b500!important}.template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper svg.ic-2{width:55%!important}.template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper svg.ic-2 path{fill:#61b500}.template03-working-skill .template03-working-skill__header h2{color:#61b500;text-transform:uppercase}.template03-working-skill .template03-working-skill__header h2,.template03-working-skill .template03-working-skill__header h2 .ql-editor{margin-bottom:0;margin-top:5px;font-weight:bolder;flex-grow:2;font-size:18px;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:1.2px}.template03-working-skill .template03-working-skill__item{display:flex;align-items:baseline;margin-bottom:15px}.template03-working-skill .template03-working-skill__label{flex:0 0 160px}.template03-working-skill .template03-working-skill__label .ql-editor{color:#666;font-size:15px;font-family:Roboto,sans-serif}.template03-working-skill .template03-working-skill__value{flex:1;text-align:right}.template03-working-skill .template03-working-skill__value .ant-rate{font-size:16px}.template03-working-skill .template03-working-skill__value .ant-rate-star-full,.template03-working-skill .template03-working-skill__value .ant-rate-star-half{color:#61b500}.template03-working-skill .focus{display:flex;flex-direction:column;position:relative;z-index:9}.template03-working-skill .focus .rowTools{display:block}.template03-working-skill .focus .rowTools .left,.template03-working-skill .focus .rowTools .right,.template03-working-skill .focus .rowTools:before{top:-7px}.template03-working-skill__icon-wraper svg{width:60%!important}.template03-working-skill__value{flex:1;text-align:right}.template03-working-skill__header img{width:18px;height:16px}.template03-working-skill__label{flex:0 0 98px!important}.template03-working-skill__content{margin-left:45px}.template03-working-skill__content .rowTools svg{width:12px!important;height:12px!important}.template03-working-skill__content .rowTools .left{left:-44px!important;width:44px!important}.template03-working-skill__content .rowTools .left .btn{width:16px!important;height:16px!important}.template03-working-skill__content .rowTools .left .middleTool .btn{width:16px;height:16px;margin:2px!important}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template03-language.focus-part{display:flex;flex-direction:column;position:relative}.template03-language.focus-part .template03-language .rowPartTools:first-child{display:block}.template03-language .template03-language__header{display:flex;align-items:center;margin-bottom:20px}.template03-language .template03-language__header .template03-language__icon-wraper{width:32px;height:32px;border-radius:100%;border:2px solid #61b500;display:flex;justify-content:center;align-items:center;margin-right:15px}.template03-language .template03-language__header .template03-language__icon-wraper svg{width:18px!important;height:18px!important}.template03-language .template03-language__header .template03-language__icon-wraper svg g{fill:#61b500!important}.template03-language .template03-language__header .template03-language__icon-wraper svg.ic-2{width:55%!important}.template03-language .template03-language__header .template03-language__icon-wraper svg.ic-2 path{fill:#61b500}.template03-language .template03-language__header h2{color:#61b500;text-transform:uppercase}.template03-language .template03-language__header h2,.template03-language .template03-language__header h2 .ql-editor{margin-bottom:0;margin-top:5px;font-weight:bolder;flex-grow:2;font-size:18px;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:1.2px}.template03-language .template03-working-skill__item{display:flex;align-items:baseline;margin-bottom:15px}.template03-language .template03-working-skill__label{flex:0 0 160px}.template03-language .template03-working-skill__label .ql-editor{color:#666;font-size:15px;font-family:Roboto,sans-serif}.template03-language .template03-working-skill__value{flex:1;text-align:right}.template03-language .template03-working-skill__value .ant-rate{font-size:16px}.template03-language .template03-working-skill__value .ant-rate-star-full,.template03-language .template03-working-skill__value .ant-rate-star-half{color:#61b500}.template03-language .focus{display:flex;flex-direction:column;position:relative;z-index:9}.template03-language .focus .rowTools{display:block}.template03-language .focus .rowTools .left,.template03-language .focus .rowTools .right,.template03-language .focus .rowTools:before{top:-7px}.template03-language__icon-wraper svg{width:70%!important}.template03-language__header img{width:18px;height:16px}.template03-language__label{flex:0 0 98px!important}.template03-language__content{margin-left:45px}.template03-language__content .rowTools svg{width:12px!important;height:12px!important}.template03-language__content .rowTools .left{left:-44px!important;width:44px!important}.template03-language__content .rowTools .left .btn{width:16px!important;height:16px!important}.template03-language__content .rowTools .left .middleTool .btn{width:16px;height:16px;margin:2px!important}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template03-hobby.focus-part{display:flex;flex-direction:column;position:relative}.template03-hobby.focus-part .template03-hobby .rowPartTools:first-child{display:block}.template03-hobby .template03-hobby__header{display:flex;align-items:center;margin-bottom:20px}.template03-hobby .template03-hobby__header .template03-hobby__icon-wraper{width:32px;height:32px;border-radius:100%;border:2px solid #61b500;display:flex;justify-content:center;align-items:center;margin-right:15px}.template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg{width:18px!important;height:18px!important}.template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg g{fill:#61b500!important}.template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg.ic-2{width:55%!important}.template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg.ic-2 path{fill:#61b500}.template03-hobby .template03-hobby__header h2{color:#61b500;text-transform:uppercase}.template03-hobby .template03-hobby__header h2,.template03-hobby .template03-hobby__header h2 .ql-editor{margin-bottom:0;margin-top:5px;font-weight:bolder;flex-grow:2;font-size:18px;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:1.2px}.template03-hobby__icon-wraper svg{width:60%!important}.template03-hobby__item{margin-bottom:5px}.template03-hobby__item .row:not(:last-child){margin-bottom:4px}.template03-hobby__item .ql-editor{color:#666;font-size:15px;font-family:Roboto,sans-serif}.template03-hobby .focus{display:flex;flex-direction:column;position:relative;z-index:9}.template03-hobby .focus .rowTools{display:block}.template03-hobby .focus .rowTools .left,.template03-hobby .focus .rowTools .right,.template03-hobby .focus .rowTools:before{top:0}.template03-hobby__header img{width:18px;height:16px}.template03-hobby__label{flex:0 0 98px!important}.template03-hobby__content{margin-left:45px}.template03-hobby__content .rowTools svg{width:10px!important;height:10px!important}.template03-hobby__content .rowTools .left{left:-44px!important;width:44px!important}.template03-hobby__content .rowTools .left .btn{width:16px!important;height:16px!important}.template03-hobby__content .rowTools .left .middleTool .btn{width:14px!important;height:14px!important;margin:0!important}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template03__other{margin:0 25px 25px;background-color:#f2f9ed;box-sizing:border-box;padding:28px 24px;padding:0;margin:0}.template03__other .template03__other__header{display:flex;align-items:center;margin-bottom:20px}.template03__other .template03__other__header .template03__other__icon-wraper{width:32px;height:32px;border-radius:100%;border:2px solid #61b500;display:flex;justify-content:center;align-items:center;margin-right:15px}.template03__other .template03__other__header .template03__other__icon-wraper svg{width:18px!important;height:18px!important}.template03__other .template03__other__header .template03__other__icon-wraper svg g{fill:#61b500!important}.template03__other .template03__other__header .template03__other__icon-wraper svg.ic-2{width:55%!important}.template03__other .template03__other__header .template03__other__icon-wraper svg.ic-2 path{fill:#61b500}.template03__other .template03__other__header h2{color:#61b500;text-transform:uppercase}.template03__other .template03__other__header h2,.template03__other .template03__other__header h2 .ql-editor{margin-bottom:0;margin-top:5px;font-weight:bolder;flex-grow:2;font-size:18px;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:1.2px}.template03__other__content{margin-left:0}.template03__other__content .quill{color:#666}.template03__other__content .quill .ql-editor{font-size:16px;line-height:1.5;font-family:Roboto,sans-serif}.template03__other__content .quill-editor{border-color:#f2f9ed}.template03__other__content .quill-editor:hover{border-color:#666}.template03__other__icon-wraper svg{width:85%}.template03__other__icon-wraper svg path:not(:first-child){fill:#61b500}.template03__other__icon-wraper svg.ic-2{width:55%!important}.template03__other__icon-wraper svg.ic-2 path{fill:#61b500}.template03__other__header img{width:18px;height:16px}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template03-education.focus-part{display:flex;flex-direction:column;position:relative}.template03-education.focus-part .template03-education .rowPartTools:first-child{display:block}.template03-education .template03-education__header{display:flex;align-items:center;margin-bottom:20px}.template03-education .template03-education__header .template03-education__icon-wraper{width:32px;height:32px;border-radius:100%;border:2px solid #61b500;display:flex;justify-content:center;align-items:center;margin-right:15px}.template03-education .template03-education__header .template03-education__icon-wraper svg{width:18px!important;height:18px!important}.template03-education .template03-education__header .template03-education__icon-wraper svg g{fill:#61b500!important}.template03-education .template03-education__header .template03-education__icon-wraper svg.ic-2{width:55%!important}.template03-education .template03-education__header .template03-education__icon-wraper svg.ic-2 path{fill:#61b500}.template03-education .template03-education__header h2{color:#61b500;text-transform:uppercase}.template03-education .template03-education__header h2,.template03-education .template03-education__header h2 .ql-editor{margin-bottom:0;margin-top:5px;font-weight:bolder;flex-grow:2;font-size:18px;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:1.2px}.template03-education .template03-education__timeline .ant-timeline-item-head{border-color:#61b500;color:#61b500}.template03-education .template03-education__time{display:flex;align-items:baseline}.template03-education .template03-education__time span{color:#666;font-weight:bolder;font-family:Roboto,sans-serif}.template03-education .template03-education__time .quill{color:#666}.template03-education .template03-education__time .quill .ql-editor{font-size:14px;font-weight:500;font-family:Roboto,sans-serif}.template03-education .template03-education__time .achievement .ql-editor{min-width:70px}.template03-education .template03-education__title .quill{color:#61b500;font-weight:700}.template03-education .template03-education__title .quill .ql-editor{font-size:18px;font-family:Iciel Gotham Medium,sans-serif;letter-spacing:1px}.template03-education .template03-education__title .quill .ql-blank{font-size:14px}.template03-education .template03-education__sub-ttl .quill{color:#181818}.template03-education .template03-education__sub-ttl .quill .ql-editor{font-size:14px;font-family:Iciel Gotham Medium,sans-serif;letter-spacing:1px}.template03-education .template03-education__description .quill{color:#666}.template03-education .template03-education__description .quill .ql-editor{font-size:15px;font-family:Roboto,sans-serif}.template03-education .template03-education__content{margin-left:50px}.template03-education .template03-education__transperent .ant-timeline-item-head{background-color:transparent}.template03-education .template03-education__transperent .ant-timeline-item-head-blue{border-color:transparent;color:transparent}.template03-education .template03-education__transperent .ant-timeline-item-content{min-height:0}.template03-education .focus{display:flex;flex-direction:column;position:relative;z-index:9}.template03-education .focus .rowTools{display:block}.template03-education .focus .rowTools .left,.template03-education .focus .rowTools .right,.template03-education .focus .rowTools:before{top:-15px}.template03-education__icon-wraper svg{width:85%}.template03-education__icon-wraper svg g{fill:none!important}.template03-education__icon-wraper svg path:not(:first-child){fill:#61b500}.template03-education__icon-wraper svg.ic-2{width:55%!important}.template03-education__icon-wraper svg.ic-2 path{fill:#61b500}.template03-education__header img{width:18px;height:16px}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template03-working-experience.focus-part{display:flex;flex-direction:column;position:relative}.template03-working-experience.focus-part .template03-work-experience .rowPartTools:first-child{display:block}.template03-work-experience .template03-work-experience__header{display:flex;align-items:center;margin-bottom:20px}.template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper{width:32px;height:32px;border-radius:100%;border:2px solid #61b500;display:flex;justify-content:center;align-items:center;margin-right:15px}.template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg{width:18px!important;height:18px!important}.template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg g{fill:#61b500!important}.template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg.ic-2{width:55%!important}.template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg.ic-2 path{fill:#61b500}.template03-work-experience .template03-work-experience__header h2{color:#61b500;text-transform:uppercase}.template03-work-experience .template03-work-experience__header h2,.template03-work-experience .template03-work-experience__header h2 .ql-editor{margin-bottom:0;margin-top:5px;font-weight:bolder;flex-grow:2;font-size:18px;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:1.2px}.template03-work-experience .template03-work-experience__timeline .ant-timeline-item-head{border-color:#61b500;color:#61b500}.template03-work-experience .template03-work-experience__time{display:flex;align-items:baseline}.template03-work-experience .template03-work-experience__time span{color:#666;font-weight:bolder;font-family:Roboto,sans-serif}.template03-work-experience .template03-work-experience__time .quill{color:#666}.template03-work-experience .template03-work-experience__time .quill .ql-editor{font-size:14px;font-weight:500;font-family:Roboto,sans-serif}.template03-work-experience .template03-work-experience__time .achievement .ql-editor{min-width:70px}.template03-work-experience .template03-work-experience__title .quill{color:#61b500;font-weight:700}.template03-work-experience .template03-work-experience__title .quill .ql-editor{font-size:18px;font-family:Iciel Gotham Medium,sans-serif;letter-spacing:1px}.template03-work-experience .template03-work-experience__title .quill .ql-blank{font-size:14px}.template03-work-experience .template03-work-experience__sub-ttl .quill{color:#181818}.template03-work-experience .template03-work-experience__sub-ttl .quill .ql-editor{font-size:14px;font-family:Iciel Gotham Medium,sans-serif;letter-spacing:1px}.template03-work-experience .template03-work-experience__description .quill{color:#666}.template03-work-experience .template03-work-experience__description .quill .ql-editor{font-size:15px;font-family:Roboto,sans-serif}.template03-work-experience .template03-work-experience__content{margin-left:50px}.template03-work-experience .template03-work-experience__transperent .ant-timeline-item-head{background-color:transparent}.template03-work-experience .template03-work-experience__transperent .ant-timeline-item-head-blue{border-color:transparent;color:transparent}.template03-work-experience .template03-work-experience__transperent .ant-timeline-item-content{min-height:0}.template03-work-experience .focus{display:flex;flex-direction:column;position:relative;z-index:9}.template03-work-experience .focus .rowTools{display:block}.template03-work-experience .focus .rowTools .left,.template03-work-experience .focus .rowTools .right,.template03-work-experience .focus .rowTools:before{top:-15px}.template03-work-experience__header img{width:18px;height:16px}.template03-work-experience__content{margin-left:10px!important}.template03-work-experience__content .row .rowTools .left{left:-50px!important;width:50px!important}.template03-work-experience__content .row .ant-timeline-item-content{margin:0 0 0 34px}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.theme-F44336 .template03__footer,.theme-F44336 .template03__header{background-color:#f44336!important}.theme-F44336 .template03-education .template03-education__header h2,.theme-F44336 .template03-education .template03-education__title .quill .ql-editor,.theme-F44336 .template03-hobby .template03-hobby__header h2,.theme-F44336 .template03-language .template03-language__header h2,.theme-F44336 .template03-language .template03-working-skill__value .ant-rate-star-full,.theme-F44336 .template03-language .template03-working-skill__value .ant-rate-star-half,.theme-F44336 .template03-work-experience .template03-work-experience__header h2,.theme-F44336 .template03-work-experience .template03-work-experience__title .quill .ql-editor,.theme-F44336 .template03-working-skill .template03-working-skill__header h2,.theme-F44336 .template03-working-skill .template03-working-skill__value .ant-rate-star-full,.theme-F44336 .template03-working-skill .template03-working-skill__value .ant-rate-star-half,.theme-F44336 .template03__information__content .label,.theme-F44336 .template03__introduction__name,.theme-F44336 .template03__other .template03__other__header h2,.theme-F44336 .template03__target .template03__target__header h2{color:#f44336!important}.theme-F44336 .template03-education .template03-education__header .template03-education__icon-wraper svg g,.theme-F44336 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg.ic-2 path,.theme-F44336 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg g,.theme-F44336 .template03-language .template03-language__header .template03-language__icon-wraper svg.ic-2 path,.theme-F44336 .template03-language .template03-language__header .template03-language__icon-wraper svg g,.theme-F44336 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg.ic-2 path,.theme-F44336 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg g,.theme-F44336 .template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper svg g,.theme-F44336 .template03__target .template03__target__header .template03__target__icon-wraper svg.ic-2 path,.theme-F44336 .template03__target .template03__target__header .template03__target__icon-wraper svg g{fill:#f44336!important}.theme-F44336 .template03-education .template03-education__header .template03-education__icon-wraper svg.ic-2 path,.theme-F44336 .template03-education .template03-education__header .template03-education__icon-wraper svg path:not(:first-child){fill:#f44336}.theme-F44336 .template03-education .template03-education__header .template03-education__icon-wraper,.theme-F44336 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper,.theme-F44336 .template03-language .template03-language__header .template03-language__icon-wraper,.theme-F44336 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper,.theme-F44336 .template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper,.theme-F44336 .template03__information__center .avatar img,.theme-F44336 .template03__target .template03__target__header .template03__target__icon-wraper{border-color:#f44336!important}.theme-F44336 .template03__box,.theme-F44336 .template03__other,.theme-F44336 .template03__target{background-color:#fcd9d6!important}.theme-F44336 .template03__other__content .quill .ql-editor,.theme-F44336 .template03__target__content .quill .ql-editor{color:#000!important;border-color:#fcd9d6!important}.theme-F44336 .template03-education .template03-education__description .focus,.theme-F44336 .template03-education .template03-education__sub-ttl .focus,.theme-F44336 .template03-education .template03-education__time .focus,.theme-F44336 .template03-education .template03-education__title .focus,.theme-F44336 .template03-hobby__item .focus,.theme-F44336 .template03-language .template03-working-skill__label .focus,.theme-F44336 .template03-work-experience .template03-work-experience__description .focus,.theme-F44336 .template03-work-experience .template03-work-experience__sub-ttl .focus,.theme-F44336 .template03-work-experience .template03-work-experience__time .focus,.theme-F44336 .template03-work-experience .template03-work-experience__title .focus,.theme-F44336 .template03-working-skill .template03-working-skill__label .focus,.theme-F44336 .template03__other__content .focus,.theme-F44336 .template03__target__content .focus{border-color:#181818!important}.theme-F44336 .template03-education .template03-education__timeline .ant-timeline-item-tail,.theme-F44336 .template03-work-experience .template03-work-experience__timeline .ant-timeline-item-tail{border-color:#fff!important}.theme-F44336 .template03-education .template03-education__description .quill .ql-editor,.theme-F44336 .template03-hobby__item .ql-editor,.theme-F44336 .template03-language .template03-working-skill__label .ql-editor,.theme-F44336 .template03-work-experience .template03-work-experience__description .quill .ql-editor,.theme-F44336 .template03-working-skill .template03-working-skill__label .ql-editor{color:#000!important}.theme-F44336 .template03-education .template03-education__time .quill .ql-editor,.theme-F44336 .template03-work-experience .template03-work-experience__time .quill .ql-editor{color:#181818!important}.theme-F44336 .template03-education .template03-education__timeline .ant-timeline-item-head,.theme-F44336 .template03-work-experience .template03-work-experience__timeline .ant-timeline-item-head{border-color:#f44336!important;color:#f44336!important}.theme-E10002 .template03__footer,.theme-E10002 .template03__header{background-color:#e10002!important}.theme-E10002 .template03-education .template03-education__header h2,.theme-E10002 .template03-education .template03-education__title .quill .ql-editor,.theme-E10002 .template03-hobby .template03-hobby__header h2,.theme-E10002 .template03-language .template03-language__header h2,.theme-E10002 .template03-language .template03-working-skill__value .ant-rate-star-full,.theme-E10002 .template03-language .template03-working-skill__value .ant-rate-star-half,.theme-E10002 .template03-work-experience .template03-work-experience__header h2,.theme-E10002 .template03-work-experience .template03-work-experience__title .quill .ql-editor,.theme-E10002 .template03-working-skill .template03-working-skill__header h2,.theme-E10002 .template03-working-skill .template03-working-skill__value .ant-rate-star-full,.theme-E10002 .template03-working-skill .template03-working-skill__value .ant-rate-star-half,.theme-E10002 .template03__information__content .label,.theme-E10002 .template03__introduction__name,.theme-E10002 .template03__other .template03__other__header h2,.theme-E10002 .template03__target .template03__target__header h2{color:#e10002!important}.theme-E10002 .template03-education .template03-education__header .template03-education__icon-wraper svg g,.theme-E10002 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg.ic-2 path,.theme-E10002 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg g,.theme-E10002 .template03-language .template03-language__header .template03-language__icon-wraper svg.ic-2 path,.theme-E10002 .template03-language .template03-language__header .template03-language__icon-wraper svg g,.theme-E10002 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg.ic-2 path,.theme-E10002 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg g,.theme-E10002 .template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper svg g,.theme-E10002 .template03__target .template03__target__header .template03__target__icon-wraper svg.ic-2 path,.theme-E10002 .template03__target .template03__target__header .template03__target__icon-wraper svg g{fill:#e10002!important}.theme-E10002 .template03-education .template03-education__header .template03-education__icon-wraper svg.ic-2 path,.theme-E10002 .template03-education .template03-education__header .template03-education__icon-wraper svg path:not(:first-child){fill:#e10002}.theme-E10002 .template03-education .template03-education__header .template03-education__icon-wraper,.theme-E10002 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper,.theme-E10002 .template03-language .template03-language__header .template03-language__icon-wraper,.theme-E10002 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper,.theme-E10002 .template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper,.theme-E10002 .template03__information__center .avatar img,.theme-E10002 .template03__target .template03__target__header .template03__target__icon-wraper{border-color:#e10002!important}.theme-E10002 .template03__box,.theme-E10002 .template03__other,.theme-E10002 .template03__target{background-color:#f9cccc!important}.theme-E10002 .template03__other__content .quill .ql-editor,.theme-E10002 .template03__target__content .quill .ql-editor{color:#000!important;border-color:#f9cccc!important}.theme-E10002 .template03-education .template03-education__description .focus,.theme-E10002 .template03-education .template03-education__sub-ttl .focus,.theme-E10002 .template03-education .template03-education__time .focus,.theme-E10002 .template03-education .template03-education__title .focus,.theme-E10002 .template03-hobby__item .focus,.theme-E10002 .template03-language .template03-working-skill__label .focus,.theme-E10002 .template03-work-experience .template03-work-experience__description .focus,.theme-E10002 .template03-work-experience .template03-work-experience__sub-ttl .focus,.theme-E10002 .template03-work-experience .template03-work-experience__time .focus,.theme-E10002 .template03-work-experience .template03-work-experience__title .focus,.theme-E10002 .template03-working-skill .template03-working-skill__label .focus,.theme-E10002 .template03__other__content .focus,.theme-E10002 .template03__target__content .focus{border-color:#666!important}.theme-E10002 .template03-education .template03-education__timeline .ant-timeline-item-tail,.theme-E10002 .template03-work-experience .template03-work-experience__timeline .ant-timeline-item-tail{border-color:#fff!important}.theme-E10002 .template03-education .template03-education__description .quill .ql-editor,.theme-E10002 .template03-hobby__item .ql-editor,.theme-E10002 .template03-language .template03-working-skill__label .ql-editor,.theme-E10002 .template03-work-experience .template03-work-experience__description .quill .ql-editor,.theme-E10002 .template03-working-skill .template03-working-skill__label .ql-editor{color:#000!important}.theme-E10002 .template03-education .template03-education__time .quill .ql-editor,.theme-E10002 .template03-work-experience .template03-work-experience__time .quill .ql-editor{color:#666!important}.theme-E10002 .template03-education .template03-education__timeline .ant-timeline-item-head,.theme-E10002 .template03-work-experience .template03-work-experience__timeline .ant-timeline-item-head{border-color:#e10002!important;color:#e10002!important}.theme-FF9904 .template03__footer,.theme-FF9904 .template03__header{background-color:#ff9904!important}.theme-FF9904 .template03-education .template03-education__header h2,.theme-FF9904 .template03-education .template03-education__title .quill .ql-editor,.theme-FF9904 .template03-hobby .template03-hobby__header h2,.theme-FF9904 .template03-language .template03-language__header h2,.theme-FF9904 .template03-language .template03-working-skill__value .ant-rate-star-full,.theme-FF9904 .template03-language .template03-working-skill__value .ant-rate-star-half,.theme-FF9904 .template03-work-experience .template03-work-experience__header h2,.theme-FF9904 .template03-work-experience .template03-work-experience__title .quill .ql-editor,.theme-FF9904 .template03-working-skill .template03-working-skill__header h2,.theme-FF9904 .template03-working-skill .template03-working-skill__value .ant-rate-star-full,.theme-FF9904 .template03-working-skill .template03-working-skill__value .ant-rate-star-half,.theme-FF9904 .template03__information__content .label,.theme-FF9904 .template03__introduction__name,.theme-FF9904 .template03__other .template03__other__header h2,.theme-FF9904 .template03__target .template03__target__header h2{color:#ff9904!important}.theme-FF9904 .template03-education .template03-education__header .template03-education__icon-wraper svg g,.theme-FF9904 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg.ic-2 path,.theme-FF9904 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg g,.theme-FF9904 .template03-language .template03-language__header .template03-language__icon-wraper svg.ic-2 path,.theme-FF9904 .template03-language .template03-language__header .template03-language__icon-wraper svg g,.theme-FF9904 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg.ic-2 path,.theme-FF9904 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg g,.theme-FF9904 .template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper svg g,.theme-FF9904 .template03__target .template03__target__header .template03__target__icon-wraper svg.ic-2 path,.theme-FF9904 .template03__target .template03__target__header .template03__target__icon-wraper svg g{fill:#ff9904!important}.theme-FF9904 .template03-education .template03-education__header .template03-education__icon-wraper svg.ic-2 path,.theme-FF9904 .template03-education .template03-education__header .template03-education__icon-wraper svg path:not(:first-child){fill:#ff9904}.theme-FF9904 .template03-education .template03-education__header .template03-education__icon-wraper,.theme-FF9904 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper,.theme-FF9904 .template03-language .template03-language__header .template03-language__icon-wraper,.theme-FF9904 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper,.theme-FF9904 .template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper,.theme-FF9904 .template03__information__center .avatar img,.theme-FF9904 .template03__target .template03__target__header .template03__target__icon-wraper{border-color:#ff9904!important}.theme-FF9904 .template03__box,.theme-FF9904 .template03__other,.theme-FF9904 .template03__target{background-color:#ffeacc!important}.theme-FF9904 .template03__other__content .quill .ql-editor,.theme-FF9904 .template03__target__content .quill .ql-editor{color:#000!important;border-color:#ffeacc!important}.theme-FF9904 .template03-education .template03-education__description .focus,.theme-FF9904 .template03-education .template03-education__sub-ttl .focus,.theme-FF9904 .template03-education .template03-education__time .focus,.theme-FF9904 .template03-education .template03-education__title .focus,.theme-FF9904 .template03-hobby__item .focus,.theme-FF9904 .template03-language .template03-working-skill__label .focus,.theme-FF9904 .template03-work-experience .template03-work-experience__description .focus,.theme-FF9904 .template03-work-experience .template03-work-experience__sub-ttl .focus,.theme-FF9904 .template03-work-experience .template03-work-experience__time .focus,.theme-FF9904 .template03-work-experience .template03-work-experience__title .focus,.theme-FF9904 .template03-working-skill .template03-working-skill__label .focus,.theme-FF9904 .template03__other__content .focus,.theme-FF9904 .template03__target__content .focus{border-color:#666!important}.theme-FF9904 .template03-education .template03-education__timeline .ant-timeline-item-tail,.theme-FF9904 .template03-work-experience .template03-work-experience__timeline .ant-timeline-item-tail{border-color:#fff!important}.theme-FF9904 .template03-education .template03-education__description .quill .ql-editor,.theme-FF9904 .template03-hobby__item .ql-editor,.theme-FF9904 .template03-language .template03-working-skill__label .ql-editor,.theme-FF9904 .template03-work-experience .template03-work-experience__description .quill .ql-editor,.theme-FF9904 .template03-working-skill .template03-working-skill__label .ql-editor{color:#000!important}.theme-FF9904 .template03-education .template03-education__time .quill .ql-editor,.theme-FF9904 .template03-work-experience .template03-work-experience__time .quill .ql-editor{color:#666!important}.theme-FF9904 .template03-education .template03-education__timeline .ant-timeline-item-head,.theme-FF9904 .template03-work-experience .template03-work-experience__timeline .ant-timeline-item-head{border-color:#ff9904!important;color:#ff9904!important}.theme-673AB7 .template03__footer,.theme-673AB7 .template03__header{background-color:#673ab7!important}.theme-673AB7 .template03-education .template03-education__header h2,.theme-673AB7 .template03-education .template03-education__title .quill .ql-editor,.theme-673AB7 .template03-hobby .template03-hobby__header h2,.theme-673AB7 .template03-language .template03-language__header h2,.theme-673AB7 .template03-language .template03-working-skill__value .ant-rate-star-full,.theme-673AB7 .template03-language .template03-working-skill__value .ant-rate-star-half,.theme-673AB7 .template03-work-experience .template03-work-experience__header h2,.theme-673AB7 .template03-work-experience .template03-work-experience__title .quill .ql-editor,.theme-673AB7 .template03-working-skill .template03-working-skill__header h2,.theme-673AB7 .template03-working-skill .template03-working-skill__value .ant-rate-star-full,.theme-673AB7 .template03-working-skill .template03-working-skill__value .ant-rate-star-half,.theme-673AB7 .template03__information__content .label,.theme-673AB7 .template03__introduction__name,.theme-673AB7 .template03__other .template03__other__header h2,.theme-673AB7 .template03__target .template03__target__header h2{color:#673ab7!important}.theme-673AB7 .template03-education .template03-education__header .template03-education__icon-wraper svg g,.theme-673AB7 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg.ic-2 path,.theme-673AB7 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg g,.theme-673AB7 .template03-language .template03-language__header .template03-language__icon-wraper svg.ic-2 path,.theme-673AB7 .template03-language .template03-language__header .template03-language__icon-wraper svg g,.theme-673AB7 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg.ic-2 path,.theme-673AB7 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg g,.theme-673AB7 .template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper svg g,.theme-673AB7 .template03__target .template03__target__header .template03__target__icon-wraper svg.ic-2 path,.theme-673AB7 .template03__target .template03__target__header .template03__target__icon-wraper svg g{fill:#673ab7!important}.theme-673AB7 .template03-education .template03-education__header .template03-education__icon-wraper svg.ic-2 path,.theme-673AB7 .template03-education .template03-education__header .template03-education__icon-wraper svg path:not(:first-child){fill:#673ab7}.theme-673AB7 .template03-education .template03-education__header .template03-education__icon-wraper,.theme-673AB7 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper,.theme-673AB7 .template03-language .template03-language__header .template03-language__icon-wraper,.theme-673AB7 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper,.theme-673AB7 .template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper,.theme-673AB7 .template03__information__center .avatar img,.theme-673AB7 .template03__target .template03__target__header .template03__target__icon-wraper{border-color:#673ab7!important}.theme-673AB7 .template03__box,.theme-673AB7 .template03__other,.theme-673AB7 .template03__target{background-color:#e0d7f0!important}.theme-673AB7 .template03__other__content .quill .ql-editor,.theme-673AB7 .template03__target__content .quill .ql-editor{color:#000!important;border-color:#e0d7f0!important}.theme-673AB7 .template03-education .template03-education__description .focus,.theme-673AB7 .template03-education .template03-education__sub-ttl .focus,.theme-673AB7 .template03-education .template03-education__time .focus,.theme-673AB7 .template03-education .template03-education__title .focus,.theme-673AB7 .template03-hobby__item .focus,.theme-673AB7 .template03-language .template03-working-skill__label .focus,.theme-673AB7 .template03-work-experience .template03-work-experience__description .focus,.theme-673AB7 .template03-work-experience .template03-work-experience__sub-ttl .focus,.theme-673AB7 .template03-work-experience .template03-work-experience__time .focus,.theme-673AB7 .template03-work-experience .template03-work-experience__title .focus,.theme-673AB7 .template03-working-skill .template03-working-skill__label .focus,.theme-673AB7 .template03__other__content .focus,.theme-673AB7 .template03__target__content .focus{border-color:#666!important}.theme-673AB7 .template03-education .template03-education__timeline .ant-timeline-item-tail,.theme-673AB7 .template03-work-experience .template03-work-experience__timeline .ant-timeline-item-tail{border-color:#fff!important}.theme-673AB7 .template03-education .template03-education__description .quill .ql-editor,.theme-673AB7 .template03-hobby__item .ql-editor,.theme-673AB7 .template03-language .template03-working-skill__label .ql-editor,.theme-673AB7 .template03-work-experience .template03-work-experience__description .quill .ql-editor,.theme-673AB7 .template03-working-skill .template03-working-skill__label .ql-editor{color:#000!important}.theme-673AB7 .template03-education .template03-education__time .quill .ql-editor,.theme-673AB7 .template03-work-experience .template03-work-experience__time .quill .ql-editor{color:#666!important}.theme-673AB7 .template03-education .template03-education__timeline .ant-timeline-item-head,.theme-673AB7 .template03-work-experience .template03-work-experience__timeline .ant-timeline-item-head{border-color:#673ab7!important;color:#673ab7!important}.theme-02A645 .template03__footer,.theme-02A645 .template03__header{background-color:#02a645!important}.theme-02A645 .template03-education .template03-education__header h2,.theme-02A645 .template03-education .template03-education__title .quill .ql-editor,.theme-02A645 .template03-hobby .template03-hobby__header h2,.theme-02A645 .template03-language .template03-language__header h2,.theme-02A645 .template03-language .template03-working-skill__value .ant-rate-star-full,.theme-02A645 .template03-language .template03-working-skill__value .ant-rate-star-half,.theme-02A645 .template03-work-experience .template03-work-experience__header h2,.theme-02A645 .template03-work-experience .template03-work-experience__title .quill .ql-editor,.theme-02A645 .template03-working-skill .template03-working-skill__header h2,.theme-02A645 .template03-working-skill .template03-working-skill__value .ant-rate-star-full,.theme-02A645 .template03-working-skill .template03-working-skill__value .ant-rate-star-half,.theme-02A645 .template03__information__content .label,.theme-02A645 .template03__introduction__name,.theme-02A645 .template03__other .template03__other__header h2,.theme-02A645 .template03__target .template03__target__header h2{color:#02a645!important}.theme-02A645 .template03-education .template03-education__header .template03-education__icon-wraper svg g,.theme-02A645 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg.ic-2 path,.theme-02A645 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg g,.theme-02A645 .template03-language .template03-language__header .template03-language__icon-wraper svg.ic-2 path,.theme-02A645 .template03-language .template03-language__header .template03-language__icon-wraper svg g,.theme-02A645 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg.ic-2 path,.theme-02A645 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg g,.theme-02A645 .template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper svg g,.theme-02A645 .template03__target .template03__target__header .template03__target__icon-wraper svg.ic-2 path,.theme-02A645 .template03__target .template03__target__header .template03__target__icon-wraper svg g{fill:#02a645!important}.theme-02A645 .template03-education .template03-education__header .template03-education__icon-wraper svg.ic-2 path,.theme-02A645 .template03-education .template03-education__header .template03-education__icon-wraper svg path:not(:first-child){fill:#02a645}.theme-02A645 .template03-education .template03-education__header .template03-education__icon-wraper,.theme-02A645 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper,.theme-02A645 .template03-language .template03-language__header .template03-language__icon-wraper,.theme-02A645 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper,.theme-02A645 .template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper,.theme-02A645 .template03__information__center .avatar img,.theme-02A645 .template03__target .template03__target__header .template03__target__icon-wraper{border-color:#02a645!important}.theme-02A645 .template03__box,.theme-02A645 .template03__other,.theme-02A645 .template03__target{background-color:#ccedd9!important}.theme-02A645 .template03__other__content .quill .ql-editor,.theme-02A645 .template03__target__content .quill .ql-editor{color:#000!important;border-color:#ccedd9!important}.theme-02A645 .template03-education .template03-education__description .focus,.theme-02A645 .template03-education .template03-education__sub-ttl .focus,.theme-02A645 .template03-education .template03-education__time .focus,.theme-02A645 .template03-education .template03-education__title .focus,.theme-02A645 .template03-hobby__item .focus,.theme-02A645 .template03-language .template03-working-skill__label .focus,.theme-02A645 .template03-work-experience .template03-work-experience__description .focus,.theme-02A645 .template03-work-experience .template03-work-experience__sub-ttl .focus,.theme-02A645 .template03-work-experience .template03-work-experience__time .focus,.theme-02A645 .template03-work-experience .template03-work-experience__title .focus,.theme-02A645 .template03-working-skill .template03-working-skill__label .focus,.theme-02A645 .template03__other__content .focus,.theme-02A645 .template03__target__content .focus{border-color:#666!important}.theme-02A645 .template03-education .template03-education__timeline .ant-timeline-item-tail,.theme-02A645 .template03-work-experience .template03-work-experience__timeline .ant-timeline-item-tail{border-color:#fff!important}.theme-02A645 .template03-education .template03-education__description .quill .ql-editor,.theme-02A645 .template03-hobby__item .ql-editor,.theme-02A645 .template03-language .template03-working-skill__label .ql-editor,.theme-02A645 .template03-work-experience .template03-work-experience__description .quill .ql-editor,.theme-02A645 .template03-working-skill .template03-working-skill__label .ql-editor{color:#000!important}.theme-02A645 .template03-education .template03-education__time .quill .ql-editor,.theme-02A645 .template03-work-experience .template03-work-experience__time .quill .ql-editor{color:#666!important}.theme-02A645 .template03-education .template03-education__timeline .ant-timeline-item-head,.theme-02A645 .template03-work-experience .template03-work-experience__timeline .ant-timeline-item-head{border-color:#02a645!important;color:#02a645!important}.theme-367FE1 .template03__footer,.theme-367FE1 .template03__header{background-color:#367fe1!important}.theme-367FE1 .template03-education .template03-education__header h2,.theme-367FE1 .template03-education .template03-education__title .quill .ql-editor,.theme-367FE1 .template03-hobby .template03-hobby__header h2,.theme-367FE1 .template03-language .template03-language__header h2,.theme-367FE1 .template03-language .template03-working-skill__value .ant-rate-star-full,.theme-367FE1 .template03-language .template03-working-skill__value .ant-rate-star-half,.theme-367FE1 .template03-work-experience .template03-work-experience__header h2,.theme-367FE1 .template03-work-experience .template03-work-experience__title .quill .ql-editor,.theme-367FE1 .template03-working-skill .template03-working-skill__header h2,.theme-367FE1 .template03-working-skill .template03-working-skill__value .ant-rate-star-full,.theme-367FE1 .template03-working-skill .template03-working-skill__value .ant-rate-star-half,.theme-367FE1 .template03__information__content .label,.theme-367FE1 .template03__introduction__name,.theme-367FE1 .template03__other .template03__other__header h2,.theme-367FE1 .template03__target .template03__target__header h2{color:#367fe1!important}.theme-367FE1 .template03-education .template03-education__header .template03-education__icon-wraper svg g,.theme-367FE1 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg.ic-2 path,.theme-367FE1 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg g,.theme-367FE1 .template03-language .template03-language__header .template03-language__icon-wraper svg.ic-2 path,.theme-367FE1 .template03-language .template03-language__header .template03-language__icon-wraper svg g,.theme-367FE1 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg.ic-2 path,.theme-367FE1 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg g,.theme-367FE1 .template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper svg g,.theme-367FE1 .template03__target .template03__target__header .template03__target__icon-wraper svg.ic-2 path,.theme-367FE1 .template03__target .template03__target__header .template03__target__icon-wraper svg g{fill:#367fe1!important}.theme-367FE1 .template03-education .template03-education__header .template03-education__icon-wraper svg.ic-2 path,.theme-367FE1 .template03-education .template03-education__header .template03-education__icon-wraper svg path:not(:first-child){fill:#367fe1}.theme-367FE1 .template03-education .template03-education__header .template03-education__icon-wraper,.theme-367FE1 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper,.theme-367FE1 .template03-language .template03-language__header .template03-language__icon-wraper,.theme-367FE1 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper,.theme-367FE1 .template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper,.theme-367FE1 .template03__information__center .avatar img,.theme-367FE1 .template03__target .template03__target__header .template03__target__icon-wraper{border-color:#367fe1!important}.theme-367FE1 .template03__box,.theme-367FE1 .template03__other,.theme-367FE1 .template03__target{background-color:#d6e5f9!important}.theme-367FE1 .template03__other__content .quill .ql-editor,.theme-367FE1 .template03__target__content .quill .ql-editor{color:#000!important;border-color:#d6e5f9!important}.theme-367FE1 .template03-education .template03-education__description .focus,.theme-367FE1 .template03-education .template03-education__sub-ttl .focus,.theme-367FE1 .template03-education .template03-education__time .focus,.theme-367FE1 .template03-education .template03-education__title .focus,.theme-367FE1 .template03-hobby__item .focus,.theme-367FE1 .template03-language .template03-working-skill__label .focus,.theme-367FE1 .template03-work-experience .template03-work-experience__description .focus,.theme-367FE1 .template03-work-experience .template03-work-experience__sub-ttl .focus,.theme-367FE1 .template03-work-experience .template03-work-experience__time .focus,.theme-367FE1 .template03-work-experience .template03-work-experience__title .focus,.theme-367FE1 .template03-working-skill .template03-working-skill__label .focus,.theme-367FE1 .template03__other__content .focus,.theme-367FE1 .template03__target__content .focus{border-color:#666!important}.theme-367FE1 .template03-education .template03-education__timeline .ant-timeline-item-tail,.theme-367FE1 .template03-work-experience .template03-work-experience__timeline .ant-timeline-item-tail{border-color:#fff!important}.theme-367FE1 .template03-education .template03-education__description .quill .ql-editor,.theme-367FE1 .template03-hobby__item .ql-editor,.theme-367FE1 .template03-language .template03-working-skill__label .ql-editor,.theme-367FE1 .template03-work-experience .template03-work-experience__description .quill .ql-editor,.theme-367FE1 .template03-working-skill .template03-working-skill__label .ql-editor{color:#000!important}.theme-367FE1 .template03-education .template03-education__time .quill .ql-editor,.theme-367FE1 .template03-work-experience .template03-work-experience__time .quill .ql-editor{color:#666!important}.theme-367FE1 .template03-education .template03-education__timeline .ant-timeline-item-head,.theme-367FE1 .template03-work-experience .template03-work-experience__timeline .ant-timeline-item-head{border-color:#367fe1!important;color:#367fe1!important}.theme-0058AE .template03__footer,.theme-0058AE .template03__header{background-color:#0058ae!important}.theme-0058AE .template03-education .template03-education__header h2,.theme-0058AE .template03-education .template03-education__title .quill .ql-editor,.theme-0058AE .template03-hobby .template03-hobby__header h2,.theme-0058AE .template03-language .template03-language__header h2,.theme-0058AE .template03-language .template03-working-skill__value .ant-rate-star-full,.theme-0058AE .template03-language .template03-working-skill__value .ant-rate-star-half,.theme-0058AE .template03-work-experience .template03-work-experience__header h2,.theme-0058AE .template03-work-experience .template03-work-experience__title .quill .ql-editor,.theme-0058AE .template03-working-skill .template03-working-skill__header h2,.theme-0058AE .template03-working-skill .template03-working-skill__value .ant-rate-star-full,.theme-0058AE .template03-working-skill .template03-working-skill__value .ant-rate-star-half,.theme-0058AE .template03__information__content .label,.theme-0058AE .template03__introduction__name,.theme-0058AE .template03__other .template03__other__header h2,.theme-0058AE .template03__target .template03__target__header h2{color:#0058ae!important}.theme-0058AE .template03-education .template03-education__header .template03-education__icon-wraper svg g,.theme-0058AE .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg.ic-2 path,.theme-0058AE .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg g,.theme-0058AE .template03-language .template03-language__header .template03-language__icon-wraper svg.ic-2 path,.theme-0058AE .template03-language .template03-language__header .template03-language__icon-wraper svg g,.theme-0058AE .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg.ic-2 path,.theme-0058AE .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg g,.theme-0058AE .template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper svg g,.theme-0058AE .template03__target .template03__target__header .template03__target__icon-wraper svg.ic-2 path,.theme-0058AE .template03__target .template03__target__header .template03__target__icon-wraper svg g{fill:#0058ae!important}.theme-0058AE .template03-education .template03-education__header .template03-education__icon-wraper svg.ic-2 path,.theme-0058AE .template03-education .template03-education__header .template03-education__icon-wraper svg path:not(:first-child){fill:#0058ae}.theme-0058AE .template03-education .template03-education__header .template03-education__icon-wraper,.theme-0058AE .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper,.theme-0058AE .template03-language .template03-language__header .template03-language__icon-wraper,.theme-0058AE .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper,.theme-0058AE .template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper,.theme-0058AE .template03__information__center .avatar img,.theme-0058AE .template03__target .template03__target__header .template03__target__icon-wraper{border-color:#0058ae!important}.theme-0058AE .template03__box,.theme-0058AE .template03__other,.theme-0058AE .template03__target{background-color:#cde!important}.theme-0058AE .template03__other__content .quill .ql-editor,.theme-0058AE .template03__target__content .quill .ql-editor{color:#000!important;border-color:#cde!important}.theme-0058AE .template03-education .template03-education__description .focus,.theme-0058AE .template03-education .template03-education__sub-ttl .focus,.theme-0058AE .template03-education .template03-education__time .focus,.theme-0058AE .template03-education .template03-education__title .focus,.theme-0058AE .template03-hobby__item .focus,.theme-0058AE .template03-language .template03-working-skill__label .focus,.theme-0058AE .template03-work-experience .template03-work-experience__description .focus,.theme-0058AE .template03-work-experience .template03-work-experience__sub-ttl .focus,.theme-0058AE .template03-work-experience .template03-work-experience__time .focus,.theme-0058AE .template03-work-experience .template03-work-experience__title .focus,.theme-0058AE .template03-working-skill .template03-working-skill__label .focus,.theme-0058AE .template03__other__content .focus,.theme-0058AE .template03__target__content .focus{border-color:#666!important}.theme-0058AE .template03-education .template03-education__timeline .ant-timeline-item-tail,.theme-0058AE .template03-work-experience .template03-work-experience__timeline .ant-timeline-item-tail{border-color:#fff!important}.theme-0058AE .template03-education .template03-education__description .quill .ql-editor,.theme-0058AE .template03-hobby__item .ql-editor,.theme-0058AE .template03-language .template03-working-skill__label .ql-editor,.theme-0058AE .template03-work-experience .template03-work-experience__description .quill .ql-editor,.theme-0058AE .template03-working-skill .template03-working-skill__label .ql-editor{color:#000!important}.theme-0058AE .template03-education .template03-education__time .quill .ql-editor,.theme-0058AE .template03-work-experience .template03-work-experience__time .quill .ql-editor{color:#666!important}.theme-0058AE .template03-education .template03-education__timeline .ant-timeline-item-head,.theme-0058AE .template03-work-experience .template03-work-experience__timeline .ant-timeline-item-head{border-color:#0058ae!important;color:#0058ae!important}.theme-607D8B .template03__footer,.theme-607D8B .template03__header{background-color:#607d8b!important}.theme-607D8B .template03-education .template03-education__header h2,.theme-607D8B .template03-education .template03-education__title .quill .ql-editor,.theme-607D8B .template03-hobby .template03-hobby__header h2,.theme-607D8B .template03-language .template03-language__header h2,.theme-607D8B .template03-language .template03-working-skill__value .ant-rate-star-full,.theme-607D8B .template03-language .template03-working-skill__value .ant-rate-star-half,.theme-607D8B .template03-work-experience .template03-work-experience__header h2,.theme-607D8B .template03-work-experience .template03-work-experience__title .quill .ql-editor,.theme-607D8B .template03-working-skill .template03-working-skill__header h2,.theme-607D8B .template03-working-skill .template03-working-skill__value .ant-rate-star-full,.theme-607D8B .template03-working-skill .template03-working-skill__value .ant-rate-star-half,.theme-607D8B .template03__information__content .label,.theme-607D8B .template03__introduction__name,.theme-607D8B .template03__other .template03__other__header h2,.theme-607D8B .template03__target .template03__target__header h2{color:#607d8b!important}.theme-607D8B .template03-education .template03-education__header .template03-education__icon-wraper svg g,.theme-607D8B .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg.ic-2 path,.theme-607D8B .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg g,.theme-607D8B .template03-language .template03-language__header .template03-language__icon-wraper svg.ic-2 path,.theme-607D8B .template03-language .template03-language__header .template03-language__icon-wraper svg g,.theme-607D8B .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg.ic-2 path,.theme-607D8B .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg g,.theme-607D8B .template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper svg g,.theme-607D8B .template03__target .template03__target__header .template03__target__icon-wraper svg.ic-2 path,.theme-607D8B .template03__target .template03__target__header .template03__target__icon-wraper svg g{fill:#607d8b!important}.theme-607D8B .template03-education .template03-education__header .template03-education__icon-wraper svg.ic-2 path,.theme-607D8B .template03-education .template03-education__header .template03-education__icon-wraper svg path:not(:first-child){fill:#607d8b}.theme-607D8B .template03-education .template03-education__header .template03-education__icon-wraper,.theme-607D8B .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper,.theme-607D8B .template03-language .template03-language__header .template03-language__icon-wraper,.theme-607D8B .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper,.theme-607D8B .template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper,.theme-607D8B .template03__information__center .avatar img,.theme-607D8B .template03__target .template03__target__header .template03__target__icon-wraper{border-color:#607d8b!important}.theme-607D8B .template03__box,.theme-607D8B .template03__other,.theme-607D8B .template03__target{background-color:#dfe5e7!important}.theme-607D8B .template03__other__content .quill .ql-editor,.theme-607D8B .template03__target__content .quill .ql-editor{color:#000!important;border-color:#dfe5e7!important}.theme-607D8B .template03-education .template03-education__description .focus,.theme-607D8B .template03-education .template03-education__sub-ttl .focus,.theme-607D8B .template03-education .template03-education__time .focus,.theme-607D8B .template03-education .template03-education__title .focus,.theme-607D8B .template03-hobby__item .focus,.theme-607D8B .template03-language .template03-working-skill__label .focus,.theme-607D8B .template03-work-experience .template03-work-experience__description .focus,.theme-607D8B .template03-work-experience .template03-work-experience__sub-ttl .focus,.theme-607D8B .template03-work-experience .template03-work-experience__time .focus,.theme-607D8B .template03-work-experience .template03-work-experience__title .focus,.theme-607D8B .template03-working-skill .template03-working-skill__label .focus,.theme-607D8B .template03__other__content .focus,.theme-607D8B .template03__target__content .focus{border-color:#666!important}.theme-607D8B .template03-education .template03-education__timeline .ant-timeline-item-tail,.theme-607D8B .template03-work-experience .template03-work-experience__timeline .ant-timeline-item-tail{border-color:#fff!important}.theme-607D8B .template03-education .template03-education__description .quill .ql-editor,.theme-607D8B .template03-hobby__item .ql-editor,.theme-607D8B .template03-language .template03-working-skill__label .ql-editor,.theme-607D8B .template03-work-experience .template03-work-experience__description .quill .ql-editor,.theme-607D8B .template03-working-skill .template03-working-skill__label .ql-editor{color:#000!important}.theme-607D8B .template03-education .template03-education__time .quill .ql-editor,.theme-607D8B .template03-work-experience .template03-work-experience__time .quill .ql-editor{color:#666!important}.theme-607D8B .template03-education .template03-education__timeline .ant-timeline-item-head,.theme-607D8B .template03-work-experience .template03-work-experience__timeline .ant-timeline-item-head{border-color:#607d8b!important;color:#607d8b!important}.theme-795548 .template03__footer,.theme-795548 .template03__header{background-color:#795548!important}.theme-795548 .template03-education .template03-education__header h2,.theme-795548 .template03-education .template03-education__title .quill .ql-editor,.theme-795548 .template03-hobby .template03-hobby__header h2,.theme-795548 .template03-language .template03-language__header h2,.theme-795548 .template03-language .template03-working-skill__value .ant-rate-star-full,.theme-795548 .template03-language .template03-working-skill__value .ant-rate-star-half,.theme-795548 .template03-work-experience .template03-work-experience__header h2,.theme-795548 .template03-work-experience .template03-work-experience__title .quill .ql-editor,.theme-795548 .template03-working-skill .template03-working-skill__header h2,.theme-795548 .template03-working-skill .template03-working-skill__value .ant-rate-star-full,.theme-795548 .template03-working-skill .template03-working-skill__value .ant-rate-star-half,.theme-795548 .template03__information__content .label,.theme-795548 .template03__introduction__name,.theme-795548 .template03__other .template03__other__header h2,.theme-795548 .template03__target .template03__target__header h2{color:#795548!important}.theme-795548 .template03-education .template03-education__header .template03-education__icon-wraper svg g,.theme-795548 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg.ic-2 path,.theme-795548 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper svg g,.theme-795548 .template03-language .template03-language__header .template03-language__icon-wraper svg.ic-2 path,.theme-795548 .template03-language .template03-language__header .template03-language__icon-wraper svg g,.theme-795548 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg.ic-2 path,.theme-795548 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper svg g,.theme-795548 .template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper svg g,.theme-795548 .template03__target .template03__target__header .template03__target__icon-wraper svg.ic-2 path,.theme-795548 .template03__target .template03__target__header .template03__target__icon-wraper svg g{fill:#795548!important}.theme-795548 .template03-education .template03-education__header .template03-education__icon-wraper svg.ic-2 path,.theme-795548 .template03-education .template03-education__header .template03-education__icon-wraper svg path:not(:first-child){fill:#795548}.theme-795548 .template03-education .template03-education__header .template03-education__icon-wraper,.theme-795548 .template03-hobby .template03-hobby__header .template03-hobby__icon-wraper,.theme-795548 .template03-language .template03-language__header .template03-language__icon-wraper,.theme-795548 .template03-work-experience .template03-work-experience__header .template03-work-experience__icon-wraper,.theme-795548 .template03-working-skill .template03-working-skill__header .template03-working-skill__icon-wraper,.theme-795548 .template03__information__center .avatar img,.theme-795548 .template03__target .template03__target__header .template03__target__icon-wraper{border-color:#795548!important}.theme-795548 .template03__box,.theme-795548 .template03__other,.theme-795548 .template03__target{background-color:#e4ddda!important}.theme-795548 .template03__other__content .quill .ql-editor,.theme-795548 .template03__target__content .quill .ql-editor{color:#000!important;border-color:#e4ddda!important}.theme-795548 .template03-education .template03-education__description .focus,.theme-795548 .template03-education .template03-education__sub-ttl .focus,.theme-795548 .template03-education .template03-education__time .focus,.theme-795548 .template03-education .template03-education__title .focus,.theme-795548 .template03-hobby__item .focus,.theme-795548 .template03-language .template03-working-skill__label .focus,.theme-795548 .template03-work-experience .template03-work-experience__description .focus,.theme-795548 .template03-work-experience .template03-work-experience__sub-ttl .focus,.theme-795548 .template03-work-experience .template03-work-experience__time .focus,.theme-795548 .template03-work-experience .template03-work-experience__title .focus,.theme-795548 .template03-working-skill .template03-working-skill__label .focus,.theme-795548 .template03__other__content .focus,.theme-795548 .template03__target__content .focus{border-color:#666!important}.theme-795548 .template03-education .template03-education__timeline .ant-timeline-item-tail,.theme-795548 .template03-work-experience .template03-work-experience__timeline .ant-timeline-item-tail{border-color:#fff!important}.theme-795548 .template03-education .template03-education__description .quill .ql-editor,.theme-795548 .template03-hobby__item .ql-editor,.theme-795548 .template03-language .template03-working-skill__label .ql-editor,.theme-795548 .template03-work-experience .template03-work-experience__description .quill .ql-editor,.theme-795548 .template03-working-skill .template03-working-skill__label .ql-editor{color:#000!important}.theme-795548 .template03-education .template03-education__time .quill .ql-editor,.theme-795548 .template03-work-experience .template03-work-experience__time .quill .ql-editor{color:#666!important}.theme-795548 .template03-education .template03-education__timeline .ant-timeline-item-head,.theme-795548 .template03-work-experience .template03-work-experience__timeline .ant-timeline-item-head{border-color:#795548!important;color:#795548!important}.template03{width:1280px;margin:24px auto;background-color:#fff;position:relative}.template03__header{height:30px;background-color:#61b500;margin-bottom:42px}.template03__page-index{position:absolute;right:5px;bottom:0;width:32px;height:32px;display:flex;align-items:center;justify-content:center;color:#fff;z-index:999}.template03__footer{height:30px;background-color:#61b500;position:absolute;width:100%;bottom:0}.template03__box{margin:0 25px 25px;background-color:#f2f9ed;box-sizing:border-box;padding:28px 24px}.template03__flex-container{display:flex;flex-flow:row}.template03__flex-col{flex-grow:1;flex-basis:0;margin:0 15px}.template03__flex-col:first-child{margin-left:0!important}.template03__flex-col:last-child{margin-right:0!important}.template03 .new_section{margin-bottom:40px;margin-left:40px}.template03 .new_section button{cursor:pointer;background-color:#001529;color:#fff}.template03 .PartCombine .rowTool.left{left:-55px!important;top:40px!important;width:38px!important}.buttonDrawer{border:medium none;color:#fff;right:0;position:fixed;top:40%;width:55px;text-shadow:0 0 1px #227270}.subMenu{position:relative}.subMenu:hover .subMenu__show{display:block}.subMenu__show{left:-185%;position:absolute;z-index:6;flex-wrap:nowrap;margin:auto;display:none}@-moz-document url-prefix(){.template03 p{word-wrap:anywhere}}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.theme-FAC8BF .template04-left__top{background:#fac8bf!important}.theme-FAC8BF .template04-left__bottom{background:#7dc2ca!important}.theme-FAC8BF .primary-color h2{color:#384949!important}.theme-FAC8BF .primary-color svg g{fill:#384949}.theme-FAC8BF .template04-left{background-color:#7dc2ca!important;margin-bottom:20px}.theme-FAC8BF .template04-education__header svg g,.theme-FAC8BF .template04-education__header svg path:not(:first-child),.theme-FAC8BF .template04-language__icon svg g{fill:#fff}.theme-FAC8BF .template04-workingSkill .ant-slider-track{background-color:#384949!important}.theme-FAC8BF .template04-workingSkill .ant-slider-handle{border-color:#384949!important}.theme-FAC8BF .ant-rate-star-full,.theme-FAC8BF .ant-rate-star-half,.theme-FAC8BF .template04-workingExperience__content__company .quill-editor p{color:#384949}.theme-FAC8BF .ant-rate-star-zero{color:#666}.theme-FAC8BF .ant-timeline-item-head{color:#fac8bf;border-color:#fac8bf}.theme-FAC8BF .template04-education__item__title .quill-editor p{color:#fac8bf!important}.theme-FAC8BF .template04-introduction__content .ql-editor p,.theme-FAC8BF .template04-introduction__content .welcome{color:#384949!important}.theme-f6f1ed .template04-left__top{background:#f6f1ed!important}.theme-f6f1ed .template04-left__bottom{background:#667467!important}.theme-f6f1ed .primary-color h2{color:#963019!important}.theme-f6f1ed .primary-color svg g{fill:#963019}.theme-f6f1ed .template04-left{background-color:#667467!important;margin-bottom:20px}.theme-f6f1ed .template04-education__header svg g,.theme-f6f1ed .template04-education__header svg path:not(:first-child),.theme-f6f1ed .template04-language__icon svg g{fill:#fff}.theme-f6f1ed .template04-workingSkill .ant-slider-track{background-color:#963019!important}.theme-f6f1ed .template04-workingSkill .ant-slider-handle{border-color:#963019!important}.theme-f6f1ed .ant-rate-star-full,.theme-f6f1ed .ant-rate-star-half,.theme-f6f1ed .template04-workingExperience__content__company .quill-editor p{color:#963019}.theme-f6f1ed .ant-rate-star-zero{color:#666}.theme-f6f1ed .ant-timeline-item-head{color:#f6f1ed;border-color:#f6f1ed}.theme-f6f1ed .template04-education__item__title .quill-editor p{color:#f6f1ed!important}.theme-f6f1ed .template04-introduction__content .ql-editor p,.theme-f6f1ed .template04-introduction__content .welcome{color:#963019!important}.theme-f2b632 .template04-left__top{background:#f2b632!important}.theme-f2b632 .template04-left__bottom{background:#252839!important}.theme-f2b632 .primary-color h2{color:#677077!important}.theme-f2b632 .primary-color svg g{fill:#677077}.theme-f2b632 .template04-left{background-color:#252839!important;margin-bottom:20px}.theme-f2b632 .template04-education__header svg g,.theme-f2b632 .template04-education__header svg path:not(:first-child),.theme-f2b632 .template04-language__icon svg g{fill:#fff}.theme-f2b632 .template04-workingSkill .ant-slider-track{background-color:#677077!important}.theme-f2b632 .template04-workingSkill .ant-slider-handle{border-color:#677077!important}.theme-f2b632 .ant-rate-star-full,.theme-f2b632 .ant-rate-star-half,.theme-f2b632 .template04-workingExperience__content__company .quill-editor p{color:#677077}.theme-f2b632 .ant-rate-star-zero{color:#666}.theme-f2b632 .ant-timeline-item-head{color:#f2b632;border-color:#f2b632}.theme-f2b632 .template04-education__item__title .quill-editor p{color:#f2b632!important}.theme-f2b632 .template04-introduction__content .ql-editor p,.theme-f2b632 .template04-introduction__content .welcome{color:#677077!important}.theme-bccbde .template04-left__top{background:#bccbde!important}.theme-bccbde .template04-left__bottom{background:#431c5d!important}.theme-bccbde .primary-color h2{color:#e05915!important}.theme-bccbde .primary-color svg g{fill:#e05915}.theme-bccbde .template04-left{background-color:#431c5d!important;margin-bottom:20px}.theme-bccbde .template04-education__header svg g,.theme-bccbde .template04-education__header svg path:not(:first-child),.theme-bccbde .template04-language__icon svg g{fill:#fff}.theme-bccbde .template04-workingSkill .ant-slider-track{background-color:#e05915!important}.theme-bccbde .template04-workingSkill .ant-slider-handle{border-color:#e05915!important}.theme-bccbde .ant-rate-star-full,.theme-bccbde .ant-rate-star-half,.theme-bccbde .template04-workingExperience__content__company .quill-editor p{color:#e05915}.theme-bccbde .ant-rate-star-zero{color:#666}.theme-bccbde .ant-timeline-item-head{color:#bccbde;border-color:#bccbde}.theme-bccbde .template04-education__item__title .quill-editor p{color:#bccbde!important}.theme-bccbde .template04-introduction__content .ql-editor p,.theme-bccbde .template04-introduction__content .welcome{color:#e05915!important}.theme-e1e8f0 .template04-left__top{background:#e1e8f0!important}.theme-e1e8f0 .template04-left__bottom{background:#9068be!important}.theme-e1e8f0 .primary-color h2{color:#6ed3cf!important}.theme-e1e8f0 .primary-color svg g{fill:#6ed3cf}.theme-e1e8f0 .template04-left{background-color:#9068be!important;margin-bottom:20px}.theme-e1e8f0 .template04-education__header svg g,.theme-e1e8f0 .template04-education__header svg path:not(:first-child),.theme-e1e8f0 .template04-language__icon svg g{fill:#fff}.theme-e1e8f0 .template04-workingSkill .ant-slider-track{background-color:#6ed3cf!important}.theme-e1e8f0 .template04-workingSkill .ant-slider-handle{border-color:#6ed3cf!important}.theme-e1e8f0 .ant-rate-star-full,.theme-e1e8f0 .ant-rate-star-half,.theme-e1e8f0 .template04-workingExperience__content__company .quill-editor p{color:#6ed3cf}.theme-e1e8f0 .ant-rate-star-zero{color:#666}.theme-e1e8f0 .ant-timeline-item-head{color:#e1e8f0;border-color:#e1e8f0}.theme-e1e8f0 .template04-education__item__title .quill-editor p{color:#e1e8f0!important}.theme-e1e8f0 .template04-introduction__content .ql-editor p,.theme-e1e8f0 .template04-introduction__content .welcome{color:#6ed3cf!important}.default-style .template04-left__top{background:#fac8bf!important}.default-style .template04-left__bottom{background:#7dc2ca!important}.default-style .primary-color h2{color:#384949!important}.default-style .primary-color svg g{fill:#384949}.default-style .template04-left{background-color:#7dc2ca!important;margin-bottom:20px}.default-style .template04-education__header svg g,.default-style .template04-education__header svg path:not(:first-child),.default-style .template04-language__icon svg g{fill:#fff}.default-style .template04-workingSkill .ant-slider-track{background-color:#384949!important}.default-style .template04-workingSkill .ant-slider-handle{border-color:#384949!important}.default-style .ant-rate-star-full,.default-style .ant-rate-star-half,.default-style .template04-workingExperience__content__company .quill-editor p{color:#384949}.default-style .ant-rate-star-zero{color:#666}.default-style .ant-timeline-item-head{color:#fac8bf;border-color:#fac8bf}.default-style .template04-education__item__title .quill-editor p{color:#fac8bf!important}.default-style .template04-introduction__content .ql-editor p,.default-style .template04-introduction__content .welcome{color:#384949!important}.template04{display:flex;padding-top:20px;margin:24px auto}.template04 .new_section{margin-top:20px;margin-bottom:20px}.template04 .new_section button{cursor:pointer;background-color:#001529;color:#fff}.template04 .template04-left{width:35%;margin-left:20px}.template04 .template04-left__top{height:fit-content;background:#fac8bf}.template04 .template04-left__bottom{background:#7dc2ca}.template04 .template04-right{margin-right:50px;width:65%;margin-left:40px}.template04 .template04-right .part-combined{position:relative}.template04 .template04-right .part-combined .PartCombine{position:absolute;top:50%}.template04 .template04-right .part-combined .PartCombine a.btnMidle{margin-bottom:22px}.template04 .middleTool{display:block}.template04 .middleTool .btnMidle{margin-bottom:12px!important}.template04 .PartCombine .rowTool.left{left:-35px!important;top:-35px!important;width:38px}.resumeContent__page-index{position:absolute;width:32px;height:34px;background:#666464;bottom:0;right:20px;display:flex;justify-content:center;align-items:center;z-index:2}.resumeContent__page-index span{font-size:1rem;color:#fff}@-moz-document url-prefix(){.template04 p{word-wrap:anywhere}}.template04 .slogan{padding:40px 30px 0}.template04 .slogan .quill-editor{width:100%}.template04 .slogan .quill-editor p{color:#666;font-family:Roboto;font-size:17px;font-style:italic;overflow:hidden}.template04 .slogan .ql-editor.ql-blank:before{font-size:15px;left:30%}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template04-information{padding-top:53px;padding-left:20px}.template04-information .template04-hobby__icon svg{width:70%}.template04-information__header{display:flex}.template04-information__header h2{align-items:center;height:24px;width:263px;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:2px;font-size:20px;font-weight:900;line-height:29px;color:#384949}.template04-information__header img{width:30px;height:30px}.template04-information .content .title-information{margin-left:10px;align-items:center;height:24px;width:263px;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:2px;font-size:20px;font-weight:900;line-height:29px;color:#384949}.template04-information .content .content-information{margin-right:25px}.template04-information .content .content-information .item-information{padding-top:10px;display:flex;justify-content:space-between}.template04-information .content .content-information .item-information__label{flex:0 0 110px;color:#384949;font-family:Iciel Gotham Ultra,sans-serif;font-size:16px;letter-spacing:1px;height:24px;font-weight:900;line-height:29px;text-transform:uppercase}.template04-information .content .content-information .item-information__value{flex-grow:2}.template04-information .content .content-information .item-information__value .ql-editor{text-align:right!important}.template04-information .content .content-information .item-information__value .ql-editor p{font-size:15px;text-align:right!important;overflow:hidden}.template04-information .content .content-information .item-information__value .ql-editor a{cursor:pointer}.template04-information .content .content-information .item-information__value .ql-editor.ql-blank:before{right:5px}.template04-information .content .content-information .item-information:hover .rowToolInfor{display:block;left:366px}.template04-information .content .content-information .item-information:hover .rowToolInfor__btnDelete{top:1px}.template04-information .content .row{text-align:right}.template04-information .content .row .btnAdd{background:#ffffff00}.template04-information .content .focus .rowToolInfor{display:block;left:366px}.template04-information .content .focus .rowToolInfor__btnDelete{top:1px}@-moz-document url-prefix(){.template04-information .content .content-information .item-information__label{flex:0 0 122px}.template04-information .content .content-information .item-information__value p{word-wrap:anywhere}}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template04-hobby{padding-top:50px;padding-left:32px;padding-right:32px}.template04-hobby__header{display:flex;align-items:baseline}.template04-hobby__header h2{height:24px;width:263px;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:2px;font-size:20px;font-weight:900;line-height:29px;color:#384949;margin-left:10px}.template04-hobby__header img{width:30px;height:30px}.template04-hobby__icon svg{width:24px;height:24px}.template04-hobby__icon svg.ic-2{width:95%;padding-top:15px}.template04-hobby__content{margin-left:25px}.template04-hobby__content__icon{height:18px}.template04-hobby__content .rowTools svg{width:12px!important;height:12px!important}.template04-hobby__content .rowTools .left .btn{width:18px!important;height:18px!important}.template04-hobby__content .rowTools .left .middleTool .btn{width:18px!important;height:18px!important;margin:2px!important}.template04-hobby__content .row__item{margin-bottom:10px;margin-top:10px}.template04-hobby__content .row__item .quill-editor p{font-family:Roboto;font-size:15px}.template04-hobby__content .focus__item{display:flex;flex-flow:column;position:relative}.template04-hobby__content .focus__item .rowTools{display:block;position:absolute;margin-top:-10px;height:100%;width:100%}.template04-hobby__content .focus__item .rowTools .rowTool,.template04-hobby__content .focus__item .rowTools:before{height:180%}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template04-education{padding-top:50px;margin-left:32px;margin-right:32px}.template04-education__icon svg{width:24px;height:24px}.template04-education__icon svg.ic-2{width:70%;margin-top:-13px}.template04-education__header{color:#fff;display:flex;justify-content:center}.template04-education__header h2{color:#fff!important;align-items:center;height:24px;width:263px;font-family:Iciel Gotham Ultra,sans-serif;font-size:20px;letter-spacing:2px;font-weight:900;line-height:29px;margin-left:10px;margin-bottom:0}.template04-education__header img{width:30px;height:30px}.template04-education__content .rowTools svg{width:16px!important;height:16px!important}.template04-education__content .rowTools .left .btn{width:22px!important;height:22px!important}.template04-education__content .focus{display:flex;flex-flow:column;position:relative}.template04-education__content .focus .rowTools{display:block;position:absolute;margin-top:-10px;height:100%;width:100%}.template04-education__item{margin-bottom:9px}.template04-education__item__timeline{display:flex}.template04-education__item__timeline .quill-editor p{font-size:14px;letter-spacing:.4px;line-height:16px}.template04-education__item__title{margin-top:4px}.template04-education__item__title .quill-editor .ql-editor{color:#fac8bf;font-family:Iciel Gotham Medium,sans-serif;font-size:16px;font-weight:900;line-height:29px;text-transform:uppercase}.template04-education__item__title .ql-editor.ql-blank:before{font-size:13px;line-height:29px;font-weight:700;text-transform:none}.template04-education__item__description{margin-top:4px}.template04-education__item__description .quill-editor .ql-editor{font-family:Roboto;font-size:15px;font-weight:300}.template04-education__item__description .quill-editor .ql-blank:before{font-size:13px;font-weight:400}.template04-education__content{margin-top:30px}.template04-education__content .ant-timeline-item-content{color:#fff}.template04-education__content__item__position{font-family:Iciel Gotham Medium,sans-serif;font-size:20px;font-weight:900;line-height:29px}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template04-language{padding-top:40px;padding-left:32px;padding-right:32px}.template04-language__icon svg{width:24px;height:24px}.template04-language__icon svg.ic-2{margin-top:-8px}.template04-language__header{color:#fff;display:flex}.template04-language__header h2{margin-left:10px;align-items:center;height:24px;width:263px;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:2px;font-size:20px;font-weight:900;line-height:29px;color:#fff;margin-bottom:0}.template04-language__header img{width:30px;height:30px}.template04-language__content{margin-top:30px}.template04-language__icon{height:18px}.template04-language__item{width:100%;padding-bottom:10px;color:#fff;display:flex}.template04-language__item .quill-editor{flex-grow:2;min-width:125px}.template04-language__item .quill-editor p{line-height:30px;font-weight:500;font-size:15px;text-transform:uppercase;min-width:110px}.template04-language__item ul{margin-left:auto}.template04-language__item .ql-editor.ql-blank:before{line-height:30px;font-size:13px}.template04-language__item .rowTools svg{width:16px!important;height:16px!important}.template04-language__item .rowTools .left .btn{width:22px!important;height:22px!important}.template04-language__item .rowTools .left .middleTool .btn{margin:2px!important}.template04-language .focus{display:flex;flex-flow:column;position:relative}.template04-language .focus .rowTools{display:block;position:absolute;margin-top:-10px;height:100%;width:100%}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template04-introduction .primary-color{color:#384949!important}.template04-introduction__content .ql-editor p{color:#384949;font-family:Iciel Gotham Medium,sans-serif;font-size:39px;font-weight:900;text-transform:uppercase;margin-top:10px}.template04-introduction__content .welcome{height:16px;color:#6c7272;font-family:Iciel Gotham Medium,sans-serif;font-size:16px;font-weight:500;letter-spacing:1.8px;line-height:19.4px;text-transform:uppercase;margin-top:15px}.template04-introduction__content .ql-editor.ql-blank:before{font-size:46px;padding-top:10px}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template04-target{padding-top:50px}.template04-target__icon{display:flex;justify-content:center;align-items:center}.template04-target__icon svg{width:24px;height:24px}.template04-target__icon svg.ic-2{width:60%}.template04-target__header{display:flex;align-items:center}.template04-target__header h2{font-size:20px;font-weight:900;line-height:29px;color:#384949;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:2px;margin-left:10px;margin-bottom:0}.template04-target__header img{width:30px;height:30px}.template04-target__content{margin-left:30px;margin-top:15px}.template04-target__content .quill-editor p{font-family:Roboto;font-size:15px;font-weight:300;color:#666}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template04-workingSkill{padding-top:43.5px}.template04-workingSkill__icon svg{width:24px!important;height:24px!important}.template04-workingSkill__header{display:flex}.template04-workingSkill__header h2{font-size:20px;font-weight:900;line-height:29px;color:#384949;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:2px;margin-left:10px}.template04-workingSkill__header img{width:30px;height:30px}.template04-workingSkill__content{margin-left:40px}.template04-workingSkill__content__item{margin-top:15px}.template04-workingSkill__content__item p{font-size:16px}.template04-workingSkill__content__item .ql-editor{font-family:Iciel Gotham Medium,sans-serif}.template04-workingSkill__content__item .ql-editor .ql-editor{font-family:Iciel Gotham Medium,sans-serif;height:60px;box-sizing:border-box}.template04-workingSkill__content__item .ql-editor .ql-editor__name{color:#181818;font-size:16px;font-weight:500}.template04-workingSkill__content__item .ql-editor.ql-blank{font-size:13px;font-weight:400}.template04-workingSkill__content .focus{display:flex;flex-flow:column;position:relative}.template04-workingSkill__content .focus .rowTools{display:block;position:absolute;margin-top:-10px;height:100%;width:100%}.template04-workingSkill__content .rowTools svg{width:14px!important;height:14px!important}.template04-workingSkill__content .rowTools .left .btn{width:18px!important;height:18px!important}.template04-workingSkill__content .rowTools .left .middleTool .btn{margin:2px!important}.template04-workingSkill .ant-slider{margin:0 6px 10px}.ant-slider{font-size:14px;font-variant:tabular-nums;line-height:1.5;color:rgba(0,0,0,.65);-webkit-box-sizing:border-box;box-sizing:border-box;margin:0;padding:0;list-style:none;position:relative;margin:14px 6px 10px;padding:4px 0;height:12px;cursor:pointer;-ms-touch-action:none;touch-action:none}.ant-slider-vertical{width:12px;height:100%;margin:6px 10px;padding:0 4px}.ant-slider-vertical .ant-slider-rail{height:100%;width:4px}.ant-slider-vertical .ant-slider-track{width:4px}.ant-slider-vertical .ant-slider-handle{margin-left:-5px;margin-bottom:-7px}.ant-slider-vertical .ant-slider-mark{top:0;left:12px;width:18px;height:100%}.ant-slider-vertical .ant-slider-mark-text{left:4px;white-space:nowrap}.ant-slider-vertical .ant-slider-step{width:4px;height:100%}.ant-slider-vertical .ant-slider-dot{top:auto;left:2px;margin-bottom:-4px}.ant-slider-with-marks{margin-bottom:28px}.ant-slider-rail{position:absolute;width:100%;height:4px;border-radius:2px;background-color:#f5f5f5;-webkit-transition:background-color .3s;transition:background-color .3s}.ant-slider-track{position:absolute;height:4px;border-radius:4px;background-color:#91d5ff;-webkit-transition:background-color .3s ease;transition:background-color .3s ease}.ant-slider-handle{position:absolute;margin-left:-7px;margin-top:-5px;width:14px;height:14px;cursor:pointer;border-radius:50%;border:2px solid #91d5ff;background-color:#fff;-webkit-box-shadow:0;box-shadow:0;-webkit-transition:border-color .3s,-webkit-box-shadow .6s,-webkit-transform .3s cubic-bezier(.18,.89,.32,1.28);transition:border-color .3s,-webkit-box-shadow .6s,-webkit-transform .3s cubic-bezier(.18,.89,.32,1.28);transition:border-color .3s,box-shadow .6s,transform .3s cubic-bezier(.18,.89,.32,1.28);transition:border-color .3s,box-shadow .6s,transform .3s cubic-bezier(.18,.89,.32,1.28),-webkit-box-shadow .6s,-webkit-transform .3s cubic-bezier(.18,.89,.32,1.28)}.ant-slider-handle:focus{border-color:#46a6ff;-webkit-box-shadow:0 0 0 5px rgba(24,144,255,.2);box-shadow:0 0 0 5px rgba(24,144,255,.2);outline:none}.ant-slider-handle.ant-tooltip-open{border-color:#1890ff}.ant-slider:hover .ant-slider-rail{background-color:#e1e1e1}.ant-slider:hover .ant-slider-track{background-color:#69c0ff}.ant-slider:hover .ant-slider-handle:not(.ant-tooltip-open){border-color:#69c0ff}.ant-slider-mark{position:absolute;top:14px;left:0;width:100%;font-size:14px}.ant-slider-mark-text{position:absolute;display:inline-block;vertical-align:middle;text-align:center;cursor:pointer;color:rgba(0,0,0,.45)}.ant-slider-mark-text-active{color:rgba(0,0,0,.65)}.ant-slider-step{position:absolute;width:100%;height:4px;background:transparent}.ant-slider-dot{position:absolute;top:-2px;width:8px;height:8px;border:2px solid #e8e8e8;background-color:#fff;cursor:pointer;border-radius:50%;vertical-align:middle}.ant-slider-dot,.ant-slider-dot:first-child,.ant-slider-dot:last-child{margin-left:-4px}.ant-slider-dot-active{border-color:#8cc8ff}.ant-slider-disabled{cursor:not-allowed}.ant-slider-disabled .ant-slider-track{background-color:rgba(0,0,0,.25)!important}.ant-slider-disabled .ant-slider-dot,.ant-slider-disabled .ant-slider-handle{border-color:rgba(0,0,0,.25)!important;background-color:#fff;cursor:not-allowed;-webkit-box-shadow:none;box-shadow:none}.ant-slider-disabled .ant-slider-dot,.ant-slider-disabled .ant-slider-mark-text{cursor:not-allowed!important}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template04-workingExperience{padding-top:40px}.template04-workingExperience__icon{display:flex;align-items:center;justify-content:center}.template04-workingExperience__icon svg{width:24px;height:24px}.template04-workingExperience__icon svg.ic-2{width:65%}.template04-workingExperience__header{display:flex}.template04-workingExperience__header h2{font-size:20px;font-weight:900;line-height:29px;color:#384949;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:2px;margin-left:10px;margin-bottom:0}.template04-workingExperience__header img{width:30px;height:30px}.template04-workingExperience__content{margin-left:20px;margin-top:20px}.template04-workingExperience__content__timeline{display:flex}.template04-workingExperience__content__timeline .quill-editor{color:rgba(0,0,0,.4);font-size:14px;letter-spacing:.62px}.template04-workingExperience__content__timeline .time_achievement .ql-editor{min-width:70px}.template04-workingExperience__content__company .quill-editor .ql-editor{color:#384949;font-family:Iciel Gotham Medium,sans-serif;font-size:20px;font-weight:900}.template04-workingExperience__content__company .quill-editor .ql-editor.ql-blank:before{font-size:13px;font-weight:700}.template04-workingExperience__content__title .quill-editor .ql-editor{color:#384949;font-family:Iciel Gotham Medium,sans-serif;font-size:16px;font-weight:500}.template04-workingExperience__content__title .quill-editor .ql-editor.ql-blank:before{font-size:13px;font-weight:400}.template04-workingExperience__content__description .quill-editor p{color:#666;font-family:Roboto;font-size:15px;font-weight:300}.template04-workingExperience__content .rowTools svg{width:16px!important;height:16px!important}.template04-workingExperience__content .focus__item{display:flex;position:relative;flex-flow:column}.template04-workingExperience__content .focus__item .rowTools{display:block;margin-top:-13px;position:absolute;height:100%;width:100%}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template04-other{margin-top:50px}.template04-other__icon{display:flex;justify-content:center;align-items:center}.template04-other__icon svg{width:24px;height:24px}.template04-other__icon svg.ic-2{width:60%}.template04-other__header{display:flex;align-items:center}.template04-other__header h2{font-size:20px;font-weight:900;line-height:29px;color:#384949;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:2px;margin-left:10px;margin-bottom:0;text-transform:uppercase}.template04-other__header h2 .quill-editor-wrapper{min-width:600px}.template04-other__header h2 .quill-editor-wrapper .ql-editor{font-size:20px;font-weight:900;line-height:29px;font-family:Iciel Gotham Medium,sans-serif;margin-left:10px;margin-bottom:0}.template04-other__header img{width:30px;height:30px}.template04-other__content{margin-left:20px;margin-top:15px}.template04-other__content .quill-editor p{font-family:Roboto;font-size:15px;font-weight:300;color:#666}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template04-workingExperience{padding-top:40px}.template04-workingExperience__icon{display:flex;align-items:center;justify-content:center}.template04-workingExperience__icon svg{width:24px;height:24px}.template04-workingExperience__icon svg.ic-2{width:65%}.template04-workingExperience__header{display:flex}.template04-workingExperience__header h2{font-size:20px;font-weight:900;line-height:29px;color:#384949;font-family:Iciel Gotham Ultra,sans-serif;letter-spacing:2px;margin-left:10px;margin-bottom:0}.template04-workingExperience__header img{width:30px;height:30px}.template04-workingExperience__content{margin-left:20px;margin-top:20px}.template04-workingExperience__content__timeline{display:flex}.template04-workingExperience__content__timeline .quill-editor{color:rgba(0,0,0,.4);font-size:14px;letter-spacing:.62px}.template04-workingExperience__content__timeline .time_achievement .ql-editor{min-width:70px}.template04-workingExperience__content__company .quill-editor .ql-editor{color:#384949;font-family:Iciel Gotham Medium,sans-serif;font-size:20px;font-weight:900}.template04-workingExperience__content__company .quill-editor .ql-editor.ql-blank:before{font-size:13px;font-weight:700}.template04-workingExperience__content__title .quill-editor .ql-editor{color:#384949;font-family:Iciel Gotham Medium,sans-serif;font-size:16px;font-weight:500}.template04-workingExperience__content__title .quill-editor .ql-editor.ql-blank:before{font-size:13px;font-weight:400}.template04-workingExperience__content__description .quill-editor p{color:#666;font-family:Roboto;font-size:15px;font-weight:300}.template04-workingExperience__content .rowTools svg{width:16px!important;height:16px!important}.template04-workingExperience__content .focus__item{display:flex;position:relative;flex-flow:column}.template04-workingExperience__content .focus__item .rowTools{display:block;margin-top:-13px;position:absolute;height:100%;width:100%}@import url(https://fonts.googleapis.com/css?family=Roboto);@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.template05 .part__content--heading{display:flex;flex-direction:row;align-content:baseline}.template05 .part__content--heading img{width:18px}.template05 .part__content--heading h1{flex:1;margin-left:0;font-family:iCiel Gotham Ultra;font-size:18px;padding-top:3px;padding-left:4px;text-transform:uppercase;margin-bottom:0;font-weight:bolder}.template05 .heading-line .row:before,.template05 .horizon-line:before{content:\"\";height:100%;width:1px;position:absolute;left:-22px;border-left:1px solid #666}.template05 .heading-line .row:after,.template05 .horizon-line:after{content:\"\";display:block;border-radius:50%;background:#fff;position:absolute;width:12px;height:12px;border:1px solid #666;top:18px;left:-28px}.body-wrapper{background-color:#dcdcdc}.template05{margin:24px auto;position:relative;max-width:1024px;display:flex;padding:42px}.template05 .new_section{margin-top:20px;margin-bottom:20px}.template05 .new_section button{cursor:pointer;background-color:#001529;color:#fff}.template05.resumeContent .resumeContent__top{width:100%}.template05.resumeContent .part{padding:16px 0}.template05.resumeContent .part:last-child{padding-bottom:0}.template05.resumeContent .part:first-child{padding-top:0}.template05.resumeContent .part-combined{display:flex;flex-direction:row}.template05.resumeContent .resumeContent__page-index{position:absolute;width:32px;height:34px;background:#666464;bottom:0;right:20px;display:flex;justify-content:center;align-items:center;z-index:2}.template05.resumeContent .resumeContent__page-index span{font-size:1rem;color:#fff}.buttonDrawer{border:medium none;color:#fff;right:0;position:fixed;top:40%;width:55px;text-shadow:0 0 1px #227270}.subMenu{position:relative}.subMenu:hover .subMenu__show{display:block}.subMenu__show{left:-185%;position:absolute;z-index:6;flex-wrap:nowrap;margin:auto;display:none}.target05{padding:10px 0!important;border-bottom:1px solid #bbb;border-top:1px solid #bbb}.target05 .part__content--contents{margin-top:12px}.target05 .part__content--contents p{font-family:Roboto,sans-serif;font-size:15px;color:#666}.target05 .part__content--contents .rows .row{flex:1}.target05.focus .rowTools{display:block}.target05.focus .rowTools .rowTool__relative{justify-content:space-around}.target05.focus .rowTools .rowTool__relative a.btn{margin:0}.template05-working-experience.focus-part{display:flex;flex-direction:column;position:relative}.template05-working-experience.focus-part .rowPartTools{display:block}.template05 .education,.working-experience{flex:1}.template05 .education .part__content--contents,.working-experience .part__content--contents{padding-left:30px}.template05 .education .part__content--contents .rows .row,.working-experience .part__content--contents .rows .row{display:flex;flex-direction:column;position:relative;padding-bottom:12px}.template05 .education .part__content--contents .rows .row:not(:last-child),.working-experience .part__content--contents .rows .row:not(:last-child){padding-bottom:24px}.template05 .education .part__content--contents .rows .row .quill-editor,.working-experience .part__content--contents .rows .row .quill-editor{padding:1px 2px}.template05 .education .part__content--contents .rows .row .time,.working-experience .part__content--contents .rows .row .time{display:flex;flex-direction:row;align-items:center;padding-top:12px;max-width:50%}.template05 .education .part__content--contents .rows .row .time .quill-editor p,.working-experience .part__content--contents .rows .row .time .quill-editor p{font-family:iCiel Gotham Medium;font-size:12px;color:#181818}.template05 .education .part__content--contents .rows .row .time .achievement .ql-editor,.working-experience .part__content--contents .rows .row .time .achievement .ql-editor{min-width:70px}.template05 .education .part__content--contents .rows .row .title p,.working-experience .part__content--contents .rows .row .title p{text-transform:uppercase;font-size:16px;font-weight:500;font-family:iCiel Gotham Medium}.template05 .education .part__content--contents .rows .row .company p,.template05 .education .part__content--contents .rows .row .school p,.working-experience .part__content--contents .rows .row .company p,.working-experience .part__content--contents .rows .row .template05 .education .school p{font-size:13px;letter-spacing:1.3px;font-family:iCiel Gotham Ultra}.template05 .education .part__content--contents .rows .row .company .ql-blank,.template05 .education .part__content--contents .rows .row .school .ql-blank,.working-experience .part__content--contents .rows .row .company .ql-blank,.working-experience .part__content--contents .rows .row .template05 .education .school .ql-blank{font-weight:700}.template05 .education .part__content--contents .rows .row .description .ql-editor,.working-experience .part__content--contents .rows .row .description .ql-editor{font-family:Roboto,sans-serif;font-size:15px;color:#666}.template05 .education .part__content--contents .rows .row .description .ql-blank,.working-experience .part__content--contents .rows .row .description .ql-blank{font-size:13px}.template05 .tempate05-education.focus-part{display:flex;flex-direction:column;position:relative}.template05 .tempate05-education.focus-part .rowPartTools{display:block}.template05 .education .part__content--heading img{width:24px}.template05 .education .part__content--contents .rowTools svg{width:16px!important;height:16px!important}.template05 .education .part__content--contents .rowTools .left .btn{width:22px!important;height:22px!important}.template05 .education .part__content--contents .rowTools .left .middleTool .btn{margin:10px!important}.template05 .information .part__content--contents .rows{display:grid;grid-template-columns:repeat(2,1fr);column-gap:20px}.template05 .information .part__content--contents .rows .row{grid-column:1 span;display:flex;flex-direction:row;justify-content:flex-start;align-items:baseline;margin-top:20px}.template05 .information .part__content--contents .rows .row .label{width:40px;display:flex;justify-content:center;align-items:center}.template05 .information .part__content--contents .rows .row .label svg{color:#666464}.template05 .information .part__content--contents .rows .row .value{flex:1}.template05 .information .part__content--contents .rows .row .value .quill-editor{padding:4px}.template05 .information .part__content--contents .rows .row .value .quill-editor p{font-family:iCiel Gotham Medium;font-size:14px}.template05 .information .part__content--contents .rows .row .value .quill-editor a{cursor:pointer}.template05 .information .part__content--contents .rows .row .btnAdd{margin-left:13px}.template05 .information .part__content--contents .rows .focus .rowToolInfor,.template05 .information .part__content--contents .rows .row:hover .rowToolInfor{display:block;margin-left:50%}.ant-progress{font-size:14px;font-variant:tabular-nums;line-height:1.5;color:rgba(0,0,0,.65);-webkit-box-sizing:border-box;box-sizing:border-box;margin:0;padding:0;list-style:none;display:inline-block}.ant-progress-line{width:100%;font-size:14px;position:relative}.ant-progress-small.ant-progress-line,.ant-progress-small.ant-progress-line .ant-progress-text .anticon{font-size:12px}.ant-progress-outer{display:inline-block;width:100%;margin-right:0;padding-right:0}.ant-progress-show-info .ant-progress-outer{padding-right:calc(2em + 8px);margin-right:calc(-2em - 8px)}.ant-progress-inner{display:inline-block;width:100%;background-color:#f5f5f5;border-radius:100px;vertical-align:middle;position:relative}.ant-progress-circle-trail{stroke:#f5f5f5}.ant-progress-circle-path{stroke:#1890ff;-webkit-animation:ant-progress-appear .3s;animation:ant-progress-appear .3s}.ant-progress-bg,.ant-progress-success-bg{background-color:#1890ff;-webkit-transition:all .4s cubic-bezier(.08,.82,.17,1) 0s;transition:all .4s cubic-bezier(.08,.82,.17,1) 0s;position:relative}.ant-progress-success-bg{background-color:#52c41a;position:absolute;top:0;left:0}.ant-progress-text{word-break:normal;width:2em;text-align:left;font-size:1em;margin-left:8px;vertical-align:middle;display:inline-block;white-space:nowrap;color:rgba(0,0,0,.45);line-height:1}.ant-progress-text .anticon{font-size:14px}.ant-progress-status-active .ant-progress-bg:before{content:\"\";opacity:0;position:absolute;top:0;left:0;right:0;bottom:0;background:#fff;border-radius:10px;-webkit-animation:ant-progress-active 2.4s cubic-bezier(.23,1,.32,1) infinite;animation:ant-progress-active 2.4s cubic-bezier(.23,1,.32,1) infinite}.ant-progress-status-exception .ant-progress-bg{background-color:#f5222d}.ant-progress-status-exception .ant-progress-text{color:#f5222d}.ant-progress-status-exception .ant-progress-circle-path{stroke:#f5222d}.ant-progress-status-success .ant-progress-bg{background-color:#52c41a}.ant-progress-status-success .ant-progress-text{color:#52c41a}.ant-progress-status-success .ant-progress-circle-path{stroke:#52c41a}.ant-progress-circle .ant-progress-inner{position:relative;line-height:1;background-color:transparent}.ant-progress-circle .ant-progress-text{position:absolute;width:100%;text-align:center;line-height:1;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);margin:0;padding:0;color:rgba(0,0,0,.65);white-space:normal}.ant-progress-circle .ant-progress-text .anticon{font-size:1.16666667em}.ant-progress-circle.ant-progress-status-exception .ant-progress-text{color:#f5222d}.ant-progress-circle.ant-progress-status-success .ant-progress-text{color:#52c41a}@-webkit-keyframes ant-progress-active{0%{opacity:.1;width:0}20%{opacity:.5;width:0}to{opacity:0;width:100%}}@keyframes ant-progress-active{0%{opacity:.1;width:0}20%{opacity:.5;width:0}to{opacity:0;width:100%}}.template05 .template05-language.focus-part{display:flex;flex-direction:column;position:relative}.template05 .template05-language.focus-part .rowPartTools{display:block}.template05 .language{flex:1;align-items:stretch;display:flex;flex-direction:column}.template05 .language .part__content--heading{display:flex;flex-direction:row;align-content:baseline}.template05 .language .part__content--contents{position:relative;display:flex;flex-direction:row;flex:1;padding-top:4px}.template05 .language .part__content--contents .horizon-line{width:30px}.template05 .language .part__content--contents .horizon-line:before{left:8px}.template05 .language .part__content--contents .horizon-line:after{left:2px;top:9px}.template05 .language .part__content--contents .rows{flex:1;display:grid;grid-template-columns:repeat(3,1fr)}.template05 .language .part__content--contents .rows .row{display:flex;flex-direction:column}.template05 .language .part__content--contents .rows .row .label{padding-right:4px}.template05 .language .part__content--contents .rows .row .label .quill-editor{min-width:125px}.template05 .language .part__content--contents .rows .row .label .quill-editor .ql-editor{overflow-y:inherit}.template05 .language .part__content--contents .rows .row .label .quill-editor .ql-editor p{text-align:center;font-size:15px;font-weight:500}.template05 .language .part__content--contents .rows .row .label .quill-editor .ql-blank:before{font-size:13px;left:5%}.template05 .language .part__content--contents .rows .row .value .ant-progress-bg,.template05 .language .part__content--contents .rows .row .value .ant-progress-success-bg{background:#666464}.template05 .language .part__content--contents .rows .row .language-progress{padding:2px;position:relative;display:flex}.template05 .language .part__content--contents .rows .row .language-progress:hover{border-color:#fff}.template05 .language .part__content--contents .rows .row .language-progress:hover .progress-actions{display:block}.template05 .language .part__content--contents .rows .row .language-progress .progress-actions{text-align:center;display:none;height:24px;position:absolute;bottom:-24px;right:0;width:100%}.template05 .language .part__content--contents .rows .row .language-progress .progress-actions .ant-btn{height:24px;padding:2px 4px;line-height:normal;margin:0 4px}.template05 .language .part__content--contents .focus{display:flex;flex-direction:column;position:relative;z-index:9}.template05 .language .part__content--contents .focus .rowTools{display:block}.template05 .language .part__content--contents .focus .rowTools .left,.template05 .language .part__content--contents .focus .rowTools .right,.template05 .language .part__content--contents .focus .rowTools:before{top:0}.template05 .language .ant-progress-circle.ant-progress-status-success .ant-progress-text{color:rgba(0,0,0,.65);width:85%}.template05 .template05-hobby.focus-part{display:flex;flex-direction:column;position:relative}.template05 .template05-hobby.focus-part .rowPartTools{display:block}.template05 .template05-hobby.focus-part .rowPartTools:before{height:calc(100% + 40px)}.template05 .hobby{flex:1}.template05 .hobby svg.ic-2{width:25px;margin-top:-5px}.template05 .hobby .part__content--contents{position:relative;display:flex;flex-direction:row;flex:1;padding-top:4px}.template05 .hobby .part__content--contents .horizon-line{width:30px}.template05 .hobby .part__content--contents .horizon-line:before{left:8px}.template05 .hobby .part__content--contents .horizon-line:after{left:2px;top:20px}.template05 .hobby .part__content--contents .rows{display:flex;flex-direction:row;flex-wrap:wrap;justify-content:space-between;margin-left:16px}.template05 .hobby .part__content--contents .rows .row{display:flex;flex-direction:row;align-items:center;min-width:240px;width:100%;position:relative}.template05 .hobby .part__content--contents .rows .row:first-child{padding-top:12px}.template05 .hobby .part__content--contents .rows .row:not(:last-child){margin-bottom:12px}.template05 .hobby .part__content--contents .rows .row .icon{margin-right:12px;width:32px}.template05 .hobby .part__content--contents .rows .row .icon img{height:24px}.template05 .hobby .part__content--contents .rows .row .value{flex:1}.template05 .hobby .part__content--contents .rows .row .value .quill-editor{padding:4px;width:calc(100% - 32px)}.template05 .hobby .part__content--contents .rows .row .rowTools svg{width:10px!important;height:10px!important}.template05 .hobby .part__content--contents .rows .row .rowTools .left .btn{width:16px!important;height:16px!important}.template05 .hobby .part__content--contents .rows .row .rowTools .left .middleTool .btn{width:14px!important;height:14px!important;margin:0!important}.template05-working-experience.focus-part{display:flex;flex-direction:column;position:relative}.template05-working-experience.focus-part .rowPartTools{display:block}.working-experience{flex:1}.working-experience .part__content--contents{padding-left:30px}.working-experience .part__content--contents .rows .row{display:flex;flex-direction:column;position:relative;padding-bottom:12px}.working-experience .part__content--contents .rows .row:not(:last-child){padding-bottom:24px}.working-experience .part__content--contents .rows .row .quill-editor{padding:1px 2px}.working-experience .part__content--contents .rows .row .time{display:flex;flex-direction:row;align-items:center;padding-top:12px;max-width:50%}.working-experience .part__content--contents .rows .row .time .quill-editor p{font-family:iCiel Gotham Medium;font-size:12px;color:#181818}.working-experience .part__content--contents .rows .row .time .achievement .ql-editor{min-width:70px}.working-experience .part__content--contents .rows .row .title p{text-transform:uppercase;font-size:16px;font-weight:500;font-family:iCiel Gotham Medium}.working-experience .part__content--contents .rows .row .company p{font-size:13px;letter-spacing:1.3px;font-family:iCiel Gotham Ultra}.working-experience .part__content--contents .rows .row .company .ql-blank{font-weight:700}.working-experience .part__content--contents .rows .row .description .ql-editor{font-family:Roboto,sans-serif;font-size:15px;color:#666}.working-experience .part__content--contents .rows .row .description .ql-blank{font-size:13px}.template05 .introduction{flex:1;color:#212121;display:flex;flex-direction:column;justify-content:center;height:fit-content}.template05 .introduction__message .quill-editor{margin-left:12px}.template05 .introduction__message .ql-container .ql-editor{color:#4a4a4a;font-family:iCiel Gotham Medium;font-size:20px;font-weight:500;letter-spacing:2.69px;line-height:29px;text-transform:uppercase}.template05 .introduction__name .quill-editor{margin-left:12px}.template05 .introduction__name .ql-container .ql-editor{color:#000;font-family:iCiel Gotham Ultra;font-size:50px;font-weight:900;letter-spacing:2.69px;text-transform:uppercase;padding-top:10px}.template05 .avatarcv{width:222px;height:auto;position:relative}.template05 .avatarcv img{width:222px;height:222px}.template05 .avatarcv img:hover .upload{display:block;z-index:9;position:absolute;top:70%;width:100%;height:30%;background:#481f1f6e}.template05 .avatarcv:hover .upload{display:block;z-index:9;position:absolute;top:50%;width:100%;height:50%;background:#481f1f6e}.template05 .avatarcv:hover .upload i{display:block;color:#fff}.template05 .avatarcv .upload i{z-index:9;font-size:30px;position:absolute;top:30px;left:46%;cursor:pointer;color:#a39d9d;display:none}.template05-working-skill.focus-part{display:flex;flex-direction:column;position:relative}.template05-working-skill.focus-part .rowPartTools{display:block}.skill{flex:1;align-items:stretch;display:flex;flex-direction:column}.skill .part__content--contents{position:relative;display:flex;flex-direction:row;flex:1}.skill .part__content--contents .horizon-line{width:30px}.skill .part__content--contents .horizon-line:before{left:8px}.skill .part__content--contents .horizon-line:after{left:2px;top:9px}.skill .part__content--contents .title{font-size:14px;font-family:iCiel Gotham Medium;color:#181818}.skill .part__content--contents .rows{flex:1}.skill .part__content--contents .rows .row{display:flex;flex-direction:row}.skill .part__content--contents .rows .row .label{flex:1}.skill .part__content--contents .rows .row .value{flex:1;flex-direction:row}.skill .part__content--contents .rows .row .value .quill-editor{max-width:60px;display:inline-flex}.skill .part__content--contents .rows .row .quill-editor{padding:4px}.skill .part__content--contents .rows .row .quill-editor p{font-family:Roboto,sans-serif;font-size:15px}.template05-working-experience.focus-part{display:flex;flex-direction:column;position:relative}.template05-working-experience.focus-part .rowPartTools{display:block}.template05 .education,.working-experience{flex:1}.template05 .education .part__content--contents,.working-experience .part__content--contents{padding-left:30px}.template05 .education .part__content--contents .rows .row,.working-experience .part__content--contents .rows .row{display:flex;flex-direction:column;position:relative;padding-bottom:12px}.template05 .education .part__content--contents .rows .row:not(:last-child),.working-experience .part__content--contents .rows .row:not(:last-child){padding-bottom:24px}.template05 .education .part__content--contents .rows .row .quill-editor,.working-experience .part__content--contents .rows .row .quill-editor{padding:1px 2px}.template05 .education .part__content--contents .rows .row .time,.working-experience .part__content--contents .rows .row .time{display:flex;flex-direction:row;align-items:center;padding-top:12px;max-width:50%}.template05 .education .part__content--contents .rows .row .time .quill-editor p,.working-experience .part__content--contents .rows .row .time .quill-editor p{font-family:iCiel Gotham Medium;font-size:12px;color:#181818}.template05 .education .part__content--contents .rows .row .time .achievement .ql-editor,.working-experience .part__content--contents .rows .row .time .achievement .ql-editor{min-width:70px}.template05 .education .part__content--contents .rows .row .title p,.working-experience .part__content--contents .rows .row .title p{text-transform:uppercase;font-size:16px;font-weight:500;font-family:iCiel Gotham Medium}.template05 .education .part__content--contents .rows .row .company p,.template05 .education .part__content--contents .rows .row .school p,.working-experience .part__content--contents .rows .row .company p,.working-experience .part__content--contents .rows .row .template05 .education .school p{font-size:13px;letter-spacing:1.3px;font-family:iCiel Gotham Ultra}.template05 .education .part__content--contents .rows .row .company .ql-blank,.template05 .education .part__content--contents .rows .row .school .ql-blank,.working-experience .part__content--contents .rows .row .company .ql-blank,.working-experience .part__content--contents .rows .row .template05 .education .school .ql-blank{font-weight:700}.template05 .education .part__content--contents .rows .row .description .ql-editor,.working-experience .part__content--contents .rows .row .description .ql-editor{font-family:Roboto,sans-serif;font-size:15px;color:#666}.template05 .education .part__content--contents .rows .row .description .ql-blank,.working-experience .part__content--contents .rows .row .description .ql-blank{font-size:13px}.template05 .tempate05-education.focus-part{display:flex;flex-direction:column;position:relative}.template05 .tempate05-education.focus-part .rowPartTools{display:block}.template05 .education .part__content--heading img{width:24px}.temp05Other{padding:2px}.temp05Other .part__icon-wraper{display:flex;justify-content:center}.temp05Other .part__icon-wraper svg.ic-2{width:70%}.temp05Other h1 .ql-editor{flex:1;font-family:iCiel Gotham Ultra;font-size:18px;padding-top:3px;text-transform:uppercase;margin-bottom:0}.temp05Other .part__content--contents{margin-left:5px;margin-top:12px}.temp05Other .part__content--contents p{font-family:Roboto,sans-serif;font-size:15px;color:#666}.temp05Other .part__content--contents .rows .row{flex:1}.temp05Other.focus .rowTools{display:block}.temp05Other.focus .rowTools .rowTool__relative{justify-content:space-around}.temp05Other.focus .rowTools .rowTool__relative a.btn{margin:0}.template05-working-experience.focus-part{display:flex;flex-direction:column;position:relative}.template05-working-experience.focus-part .rowPartTools{display:block}.working-experience{flex:1}.working-experience .part__content--contents{padding-left:30px}.working-experience .part__content--contents .rows .row{display:flex;flex-direction:column;position:relative;padding-bottom:12px}.working-experience .part__content--contents .rows .row:not(:last-child){padding-bottom:24px}.working-experience .part__content--contents .rows .row .quill-editor{padding:1px 2px}.working-experience .part__content--contents .rows .row .time{display:flex;flex-direction:row;align-items:center;padding-top:12px;max-width:50%}.working-experience .part__content--contents .rows .row .time .quill-editor p{font-family:iCiel Gotham Medium;font-size:12px;color:#181818}.working-experience .part__content--contents .rows .row .time .achievement .ql-editor{min-width:70px}.working-experience .part__content--contents .rows .row .title p{text-transform:uppercase;font-size:16px;font-weight:500;font-family:iCiel Gotham Medium}.working-experience .part__content--contents .rows .row .company p{font-size:13px;letter-spacing:1.3px;font-family:iCiel Gotham Ultra}.working-experience .part__content--contents .rows .row .company .ql-blank{font-weight:700}.working-experience .part__content--contents .rows .row .description .ql-editor{font-family:Roboto,sans-serif;font-size:15px;color:#666}.working-experience .part__content--contents .rows .row .description .ql-blank{font-size:13px}.theme-F44336 .primary-color{color:#f44336!important}.theme-F44336 .bg-primary-color{background:#f44336}.theme-F44336 .f1-color{color:#181818}.theme-F44336 .f2-color{color:#666}.theme-F44336 .f3-color{color:#999}.theme-F44336 .avatar-primary-color,.theme-F44336 .white-color{color:#fff}.theme-F44336 .bg-avatar-primary-color{background:#fff}.theme-F44336 .ant-rate-star-full,.theme-F44336 .ant-rate-star-half{color:#f44336}.theme-F44336 .ant-rate-star-zero{color:#666}.theme-F44336 .bar svg g{fill:#fff}.theme-F44336 .temp01-infomation .bar svg g{fill:#000}.theme-F44336 .temp01-achivement .bar svg.ic-2 path,.theme-F44336 .temp01-achivement .bar svg path:not(:first-child),.theme-F44336 .temp01-education .bar svg.ic-2 path,.theme-F44336 .temp01-education .bar svg path:not(:first-child){fill:#fff}.theme-F44336 .temp01-knowledge .bar svg path:first-child{stroke:#fff}.theme-C7AC6D .primary-color{color:#c7ac6d!important}.theme-C7AC6D .bg-primary-color{background:#c7ac6d}.theme-C7AC6D .f1-color{color:#181818}.theme-C7AC6D .f2-color{color:#666}.theme-C7AC6D .f3-color{color:#999}.theme-C7AC6D .avatar-primary-color,.theme-C7AC6D .white-color{color:#fff}.theme-C7AC6D .bg-avatar-primary-color{background:#fff}.theme-C7AC6D .ant-rate-star-full,.theme-C7AC6D .ant-rate-star-half{color:#c7ac6d}.theme-C7AC6D .ant-rate-star-zero{color:#666}.theme-C7AC6D .bar svg g{fill:#fff}.theme-C7AC6D .temp01-infomation .bar svg g{fill:#000}.theme-C7AC6D .temp01-achivement .bar svg.ic-2 path,.theme-C7AC6D .temp01-achivement .bar svg path:not(:first-child),.theme-C7AC6D .temp01-education .bar svg.ic-2 path,.theme-C7AC6D .temp01-education .bar svg path:not(:first-child){fill:#fff}.theme-C7AC6D .temp01-knowledge .bar svg path:first-child{stroke:#fff}.theme-FF9904 .primary-color{color:#ff9904!important}.theme-FF9904 .bg-primary-color{background:#ff9904}.theme-FF9904 .f1-color{color:#181818}.theme-FF9904 .f2-color{color:#666}.theme-FF9904 .f3-color{color:#999}.theme-FF9904 .avatar-primary-color,.theme-FF9904 .white-color{color:#fff}.theme-FF9904 .bg-avatar-primary-color{background:#fff}.theme-FF9904 .ant-rate-star-full,.theme-FF9904 .ant-rate-star-half{color:#ff9904}.theme-FF9904 .ant-rate-star-zero{color:#666}.theme-FF9904 .bar svg g{fill:#fff}.theme-FF9904 .temp01-infomation .bar svg g{fill:#000}.theme-FF9904 .temp01-achivement .bar svg.ic-2 path,.theme-FF9904 .temp01-achivement .bar svg path:not(:first-child),.theme-FF9904 .temp01-education .bar svg.ic-2 path,.theme-FF9904 .temp01-education .bar svg path:not(:first-child){fill:#fff}.theme-FF9904 .temp01-knowledge .bar svg path:first-child{stroke:#fff}.theme-673AB7 .primary-color{color:#673ab7!important}.theme-673AB7 .bg-primary-color{background:#673ab7}.theme-673AB7 .f1-color{color:#181818}.theme-673AB7 .f2-color{color:#666}.theme-673AB7 .f3-color{color:#999}.theme-673AB7 .avatar-primary-color,.theme-673AB7 .white-color{color:#fff}.theme-673AB7 .bg-avatar-primary-color{background:#fff}.theme-673AB7 .ant-rate-star-full,.theme-673AB7 .ant-rate-star-half{color:#673ab7}.theme-673AB7 .ant-rate-star-zero{color:#666}.theme-673AB7 .bar svg g{fill:#fff}.theme-673AB7 .temp01-infomation .bar svg g{fill:#000}.theme-673AB7 .temp01-achivement .bar svg.ic-2 path,.theme-673AB7 .temp01-achivement .bar svg path:not(:first-child),.theme-673AB7 .temp01-education .bar svg.ic-2 path,.theme-673AB7 .temp01-education .bar svg path:not(:first-child){fill:#fff}.theme-673AB7 .temp01-knowledge .bar svg path:first-child{stroke:#fff}.theme-3FD91E .primary-color{color:#3fd91e!important}.theme-3FD91E .bg-primary-color{background:#3fd91e}.theme-3FD91E .f1-color{color:#181818}.theme-3FD91E .f2-color{color:#666}.theme-3FD91E .f3-color{color:#999}.theme-3FD91E .avatar-primary-color,.theme-3FD91E .white-color{color:#fff}.theme-3FD91E .bg-avatar-primary-color{background:#fff}.theme-3FD91E .ant-rate-star-full,.theme-3FD91E .ant-rate-star-half{color:#3fd91e}.theme-3FD91E .ant-rate-star-zero{color:#666}.theme-3FD91E .bar svg g{fill:#fff}.theme-3FD91E .temp01-infomation .bar svg g{fill:#000}.theme-3FD91E .temp01-achivement .bar svg.ic-2 path,.theme-3FD91E .temp01-achivement .bar svg path:not(:first-child),.theme-3FD91E .temp01-education .bar svg.ic-2 path,.theme-3FD91E .temp01-education .bar svg path:not(:first-child){fill:#fff}.theme-3FD91E .temp01-knowledge .bar svg path:first-child{stroke:#fff}.theme-02A645 .primary-color{color:#02a645!important}.theme-02A645 .bg-primary-color{background:#02a645}.theme-02A645 .f1-color{color:#181818}.theme-02A645 .f2-color{color:#666}.theme-02A645 .f3-color{color:#999}.theme-02A645 .avatar-primary-color,.theme-02A645 .white-color{color:#fff}.theme-02A645 .bg-avatar-primary-color{background:#fff}.theme-02A645 .ant-rate-star-full,.theme-02A645 .ant-rate-star-half{color:#02a645}.theme-02A645 .ant-rate-star-zero{color:#666}.theme-02A645 .bar svg g{fill:#fff}.theme-02A645 .temp01-infomation .bar svg g{fill:#000}.theme-02A645 .temp01-achivement .bar svg.ic-2 path,.theme-02A645 .temp01-achivement .bar svg path:not(:first-child),.theme-02A645 .temp01-education .bar svg.ic-2 path,.theme-02A645 .temp01-education .bar svg path:not(:first-child){fill:#fff}.theme-02A645 .temp01-knowledge .bar svg path:first-child{stroke:#fff}.theme-367FE1 .primary-color{color:#367fe1!important}.theme-367FE1 .bg-primary-color{background:#367fe1}.theme-367FE1 .f1-color{color:#181818}.theme-367FE1 .f2-color{color:#666}.theme-367FE1 .f3-color{color:#999}.theme-367FE1 .avatar-primary-color,.theme-367FE1 .white-color{color:#fff}.theme-367FE1 .bg-avatar-primary-color{background:#fff}.theme-367FE1 .ant-rate-star-full,.theme-367FE1 .ant-rate-star-half{color:#367fe1}.theme-367FE1 .ant-rate-star-zero{color:#666}.theme-367FE1 .bar svg g{fill:#fff}.theme-367FE1 .temp01-infomation .bar svg g{fill:#000}.theme-367FE1 .temp01-achivement .bar svg.ic-2 path,.theme-367FE1 .temp01-achivement .bar svg path:not(:first-child),.theme-367FE1 .temp01-education .bar svg.ic-2 path,.theme-367FE1 .temp01-education .bar svg path:not(:first-child){fill:#fff}.theme-367FE1 .temp01-knowledge .bar svg path:first-child{stroke:#fff}.theme-0058AE .primary-color{color:#0058ae!important}.theme-0058AE .bg-primary-color{background:#0058ae}.theme-0058AE .f1-color{color:#181818}.theme-0058AE .f2-color{color:#666}.theme-0058AE .f3-color{color:#999}.theme-0058AE .avatar-primary-color,.theme-0058AE .white-color{color:#fff}.theme-0058AE .bg-avatar-primary-color{background:#fff}.theme-0058AE .ant-rate-star-full,.theme-0058AE .ant-rate-star-half{color:#0058ae}.theme-0058AE .ant-rate-star-zero{color:#666}.theme-0058AE .bar svg g{fill:#fff}.theme-0058AE .temp01-infomation .bar svg g{fill:#000}.theme-0058AE .temp01-achivement .bar svg.ic-2 path,.theme-0058AE .temp01-achivement .bar svg path:not(:first-child),.theme-0058AE .temp01-education .bar svg.ic-2 path,.theme-0058AE .temp01-education .bar svg path:not(:first-child){fill:#fff}.theme-0058AE .temp01-knowledge .bar svg path:first-child{stroke:#fff}.theme-607D8B .primary-color{color:#607d8b!important}.theme-607D8B .bg-primary-color{background:#607d8b}.theme-607D8B .f1-color{color:#181818}.theme-607D8B .f2-color{color:#666}.theme-607D8B .f3-color{color:#999}.theme-607D8B .avatar-primary-color,.theme-607D8B .white-color{color:#fff}.theme-607D8B .bg-avatar-primary-color{background:#fff}.theme-607D8B .ant-rate-star-full,.theme-607D8B .ant-rate-star-half{color:#607d8b}.theme-607D8B .ant-rate-star-zero{color:#666}.theme-607D8B .bar svg g{fill:#fff}.theme-607D8B .temp01-infomation .bar svg g{fill:#000}.theme-607D8B .temp01-achivement .bar svg.ic-2 path,.theme-607D8B .temp01-achivement .bar svg path:not(:first-child),.theme-607D8B .temp01-education .bar svg.ic-2 path,.theme-607D8B .temp01-education .bar svg path:not(:first-child){fill:#fff}.theme-607D8B .temp01-knowledge .bar svg path:first-child{stroke:#fff}.theme-795548 .primary-color{color:#795548!important}.theme-795548 .bg-primary-color{background:#795548}.theme-795548 .f1-color{color:#181818}.theme-795548 .f2-color{color:#666}.theme-795548 .f3-color{color:#999}.theme-795548 .avatar-primary-color,.theme-795548 .white-color{color:#fff}.theme-795548 .bg-avatar-primary-color{background:#fff}.theme-795548 .ant-rate-star-full,.theme-795548 .ant-rate-star-half{color:#795548}.theme-795548 .ant-rate-star-zero{color:#666}.theme-795548 .bar svg g{fill:#fff}.theme-795548 .temp01-infomation .bar svg g{fill:#000}.theme-795548 .temp01-achivement .bar svg.ic-2 path,.theme-795548 .temp01-achivement .bar svg path:not(:first-child),.theme-795548 .temp01-education .bar svg.ic-2 path,.theme-795548 .temp01-education .bar svg path:not(:first-child){fill:#fff}.theme-795548 .temp01-knowledge .bar svg path:first-child{stroke:#fff}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.default-style .primary-color{color:#c7ac6d!important}.default-style .bg-primary-color{background:#c7ac6d}.default-style .f1-color{color:#181818}.default-style .f2-color{color:#666}.default-style .f3-color{color:#999}.default-style .avatar-primary-color,.default-style .white-color{color:#fff}.default-style .bg-avatar-primary-color{background:#fff}.default-style .ant-rate-star-full,.default-style .ant-rate-star-half{color:#c7ac6d}.default-style .ant-rate-star-zero{color:#666}.default-style .bar svg g{fill:#fff}.default-style .temp01-infomation .bar svg g{fill:#000}.default-style .temp01-achivement .bar svg.ic-2 path,.default-style .temp01-achivement .bar svg path:not(:first-child),.default-style .temp01-education .bar svg.ic-2 path,.default-style .temp01-education .bar svg path:not(:first-child){fill:#fff}.default-style .temp01-knowledge .bar svg path:first-child{stroke:#fff}.template01{display:flex;flex-direction:row;margin:20px auto auto;background:#fff;font-family:sans-serif}.template01 .new_section{margin:20px}.template01 .new_section button{cursor:pointer;background-color:#001529;color:#fff}.template01 .temp01-left,.template01 .temp01-right{background:#efefef}.template01 .temp01-left .bar,.template01 .temp01-right .bar{width:30px}.template01 .temp01-left .bar .circle,.template01 .temp01-right .bar .circle{display:flex;width:30px;height:30px;border-radius:100%;justify-content:center;align-items:center}.template01 .temp01-left .bar .ver-line,.template01 .temp01-right .bar .ver-line{width:1px;height:calc(100% - 40px);margin:auto}.template01 .temp01-left .temp01-achivement,.template01 .temp01-left .temp01-education,.template01 .temp01-left .temp01-infomation,.template01 .temp01-left .temp01-knowledge,.template01 .temp01-left .temp01-target,.template01 .temp01-left .temp01-work-experience,.template01 .temp01-left .temp01-working-skill,.template01 .temp01-right .temp01-achivement,.template01 .temp01-right .temp01-education,.template01 .temp01-right .temp01-infomation,.template01 .temp01-right .temp01-knowledge,.template01 .temp01-right .temp01-target,.template01 .temp01-right .temp01-work-experience,.template01 .temp01-right .temp01-working-skill{padding-bottom:45px}.template01 .temp01-left .temp01-achivement .company-name p,.template01 .temp01-left .temp01-education .company-name p,.template01 .temp01-left .temp01-infomation .company-name p,.template01 .temp01-left .temp01-knowledge .company-name p,.template01 .temp01-left .temp01-target .company-name p,.template01 .temp01-left .temp01-work-experience .company-name p,.template01 .temp01-left .temp01-working-skill .company-name p,.template01 .temp01-right .temp01-achivement .company-name p,.template01 .temp01-right .temp01-education .company-name p,.template01 .temp01-right .temp01-infomation .company-name p,.template01 .temp01-right .temp01-knowledge .company-name p,.template01 .temp01-right .temp01-target .company-name p,.template01 .temp01-right .temp01-work-experience .company-name p,.template01 .temp01-right .temp01-working-skill .company-name p{font-family:Iciel Gotham Medium,sans-serif}.template01 .temp01-left .temp01-achivement .box,.template01 .temp01-left .temp01-education .box,.template01 .temp01-left .temp01-infomation .box,.template01 .temp01-left .temp01-knowledge .box,.template01 .temp01-left .temp01-target .box,.template01 .temp01-left .temp01-work-experience .box,.template01 .temp01-left .temp01-working-skill .box,.template01 .temp01-right .temp01-achivement .box,.template01 .temp01-right .temp01-education .box,.template01 .temp01-right .temp01-infomation .box,.template01 .temp01-right .temp01-knowledge .box,.template01 .temp01-right .temp01-target .box,.template01 .temp01-right .temp01-work-experience .box,.template01 .temp01-right .temp01-working-skill .box{display:flex}.template01 .temp01-left .temp01-achivement .content,.template01 .temp01-left .temp01-education .content,.template01 .temp01-left .temp01-infomation .content,.template01 .temp01-left .temp01-knowledge .content,.template01 .temp01-left .temp01-target .content,.template01 .temp01-left .temp01-work-experience .content,.template01 .temp01-left .temp01-working-skill .content,.template01 .temp01-right .temp01-achivement .content,.template01 .temp01-right .temp01-education .content,.template01 .temp01-right .temp01-infomation .content,.template01 .temp01-right .temp01-knowledge .content,.template01 .temp01-right .temp01-target .content,.template01 .temp01-right .temp01-work-experience .content,.template01 .temp01-right .temp01-working-skill .content{margin-left:12px;width:calc(100% - 42px)}.template01 .temp01-left .temp01-achivement .content h2.primary-color,.template01 .temp01-left .temp01-education .content h2.primary-color,.template01 .temp01-left .temp01-infomation .content h2.primary-color,.template01 .temp01-left .temp01-knowledge .content h2.primary-color,.template01 .temp01-left .temp01-target .content h2.primary-color,.template01 .temp01-left .temp01-work-experience .content h2.primary-color,.template01 .temp01-left .temp01-working-skill .content h2.primary-color,.template01 .temp01-right .temp01-achivement .content h2.primary-color,.template01 .temp01-right .temp01-education .content h2.primary-color,.template01 .temp01-right .temp01-infomation .content h2.primary-color,.template01 .temp01-right .temp01-knowledge .content h2.primary-color,.template01 .temp01-right .temp01-target .content h2.primary-color,.template01 .temp01-right .temp01-work-experience .content h2.primary-color,.template01 .temp01-right .temp01-working-skill .content h2.primary-color{text-transform:uppercase;font-family:iCiel Gotham Ultra;letter-spacing:1.8px;font-size:20px;font-weight:900;display:block}.template01 .temp01-left .temp01-achivement .content p .ql-editor p,.template01 .temp01-left .temp01-education .content p .ql-editor p,.template01 .temp01-left .temp01-infomation .content p .ql-editor p,.template01 .temp01-left .temp01-knowledge .content p .ql-editor p,.template01 .temp01-left .temp01-target .content p .ql-editor p,.template01 .temp01-left .temp01-work-experience .content p .ql-editor p,.template01 .temp01-left .temp01-working-skill .content p .ql-editor p,.template01 .temp01-right .temp01-achivement .content p .ql-editor p,.template01 .temp01-right .temp01-education .content p .ql-editor p,.template01 .temp01-right .temp01-infomation .content p .ql-editor p,.template01 .temp01-right .temp01-knowledge .content p .ql-editor p,.template01 .temp01-right .temp01-target .content p .ql-editor p,.template01 .temp01-right .temp01-work-experience .content p .ql-editor p,.template01 .temp01-right .temp01-working-skill .content p .ql-editor p{margin-top:20px;font-size:16px}.template01 .temp01-right{width:67%;margin:16px 16px 16px 8px}.template01 .temp01-right .temp01-part{display:flex;border-bottom:3px solid #9999992e;margin:40px 40px 10px}.template01 .temp01-right .temp01-part:last-child{border:none}.template01 .temp01-right .temp01-part .item{flex:0 0 100%}.template01 .temp01-left{margin:16px 8px 16px 16px;width:33%;background:#fff;position:relative}.template01 .temp01-left .item{padding-left:0;padding-right:0;margin-top:40px}.template01 .temp01-left .avatarcv .temp01-infomation{position:absolute;bottom:0;display:flex}.temp01-target .bar svg{width:17px;height:17px}.temp01-target .quill-editor p{font-size:16px;font-weight:300}.temp01-target img{width:14px;height:14px}.temp01-education .bar svg{width:17px;height:17px}.temp01-education .bar svg.ic-2{width:55%!important}.temp01-education__box{display:flex}.temp01-education .focus{display:flex;flex-direction:column;position:relative}.temp01-education .focus .rowTools{display:block}.temp01-education .focus .rowTools .right{right:-32px}.temp01-education .content .item-ex{margin-top:20px}.temp01-education .content .item-ex .date{display:flex;align-items:center}.temp01-education .content .item-ex .date span{max-width:50%}.temp01-education .content .item-ex .date span .ql-editor{font-size:15px;display:block;font-weight:300;line-height:25px}.temp01-education .content .item-ex .date .time{font-weight:700}.temp01-education .content .item-ex .company-name{word-break:break-all}.temp01-education .content .item-ex .company-name .ql-editor{font-weight:700;font-size:18px;text-transform:uppercase}.temp01-education .content .item-ex .job{word-break:break-all}.temp01-education .content .item-ex .job .ql-editor{font-size:14px;font-weight:700}.temp01-education .content .item-ex .job .ql-blank:before{font-weight:400}.temp01-education .content .row .rowTools svg{width:16px!important;height:16px!important}.temp01-education .content .row .rowTools .left .btn{width:22px;height:22px}.temp01-education .content .row .rowTools .left .middleTool .btn{width:22px;height:22px;margin:5px}.temp01-education .ql-blank:before{font-size:13px;text-transform:none}.temp01-left .temp01-infomation{display:flex;position:absolute;top:400px;width:100%;padding:0 20px}.temp01-left .temp01-infomation .bar svg{width:17px;height:17px}.temp01-left .temp01-infomation .quill-editor a{color:#fff;cursor:pointer}.temp01-left .temp01-infomation .grid-value{align-self:center;padding-top:8px}.temp01-left .temp01-infomation .content{margin-left:12px;width:calc(100% - 42px)}.temp01-left .temp01-infomation .content h2{font-size:18px;font-weight:900;font-family:Iciel Gotham Medium,sans-serif;display:block;text-transform:uppercase}.temp01-left .temp01-infomation .content ul{margin:0;padding:0;list-style:none}.temp01-left .temp01-infomation .content ul li{line-height:35px;font-size:14px;color:#fff;width:100%;display:grid;grid-template-columns:35% 65%}.temp01-left .temp01-infomation .content ul li span:first-child{font-size:16px;font-weight:500}.temp01-left .temp01-infomation .content ul li span:last-child .ql-editor{text-align:right;font-size:16px}.temp01-left .temp01-infomation img{width:14px;height:14px}.temp01-left .temp01-infomation .ql-blank:before{right:0;color:#fff;font-size:14px}.temp01-knowledge{width:50%;display:flex}.temp01-knowledge .fix{display:flex;width:100%;position:relative}.temp01-knowledge .content{width:100%}.temp01-knowledge .content .skill-item{display:grid;grid-template-columns:40% 60%;margin-top:10px}.temp01-knowledge .content .skill-item span .quill-editor p{color:#181818;font-size:16px;font-weight:500}.temp01-knowledge .content .skill-item .rate{text-align:right}.temp01-knowledge .content .skill-item.focus{position:relative}.temp01-knowledge .content .skill-item.focus .rowTools{display:contents}.temp01-knowledge .content .rowTools svg{width:12px!important;height:12px!important}.temp01-knowledge .content .rowTools .left .btn{width:16px;height:16px}.temp01-knowledge .content .rowTools .left .middleTool .btn{width:16px;height:16px;margin:0!important}.temp01-knowledge.focus-part .rowPartTools{display:block}.temp01-working-skill img{width:14px;height:14px}.temp01-work-experience .focus{display:flex;flex-direction:column;position:relative}.temp01-work-experience .focus .rowTools{display:block}.temp01-work-experience .focus .rowTools .right{right:-32px}.temp01-work-experience__box{display:flex}.temp01-work-experience .bar svg.ic-2{width:75%}.temp01-work-experience .content .item-ex{margin-top:20px}.temp01-work-experience .content .item-ex .date{flex:0 0 85px;margin-left:-10px}.temp01-work-experience .content .item-ex .date span .ql-editor{font-size:14px;display:block;font-weight:300;text-align:center}.temp01-work-experience .content .item-ex .date span .ql-blank{font-size:13px;text-align:left}.temp01-work-experience .content .item-ex .company-name .ql-editor{font-weight:700;font-size:16px;text-transform:uppercase}.temp01-work-experience .content .item-ex .company-name .ql-blank{text-transform:none}.temp01-work-experience .content .item-ex .place{display:flex;align-items:center}.temp01-work-experience .content .item-ex .place span{padding:0 5px;font-size:12px;font-weight:500}.temp01-work-experience .content .item-ex .place .quill-editor-wrapper{width:100%}.temp01-work-experience .content .item-ex .job{margin-top:5px}.temp01-work-experience .content .item-ex .job .ql-editor{font-size:15px;font-weight:700}.temp01-work-experience .content .item-ex .describle .ql-editor{font-size:16px;font-weight:300}.temp01-work-experience img{width:14px;height:14px}.temp01-work-experience__right{flex-grow:2}.temp01-work-experience .ql-blank:before{font-size:13px}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.temp01-introduction{display:flex;padding:10px 0 20px}.temp01-introduction .right{width:100%}.temp01-introduction .right h3 .ql-editor p{text-align:right;font-size:19px;font-weight:900;padding:0;margin:0}.temp01-introduction .right h1{text-transform:uppercase}.temp01-introduction .right h1 .ql-editor{font-family:Iciel Gotham Ultra,sans-serif;text-align:right;font-size:46px;margin:0;overflow-x:hidden}.temp01-introduction .ql-editor.ql-blank:before{right:5px}.temp01-introduction h3.primary-color .ql-editor.ql-blank:before{font-size:19px}.template01 .avatar{position:relative}.template01 .avatar img{opacity:.7;display:block;width:100%;height:800px}.template01 .avatar img:hover .upload{display:block;z-index:9}.template01 .avatar .gradient{content:\"\";position:absolute;width:100%;height:100%;top:0;left:0;background:#2d2d2d;background:linear-gradient(0deg,rgba(45,45,45,.9) 40%,hsla(42,45%,60%,.7))}.template01 .avatar:hover .upload i{display:block;color:#fff}.template01 .avatar .upload i{z-index:9;font-size:30px;position:absolute;top:64px;left:46%;cursor:pointer;color:#a39d9d;display:none}.temp01-left .slogan{position:absolute;top:280px;width:100%;padding:0 10px}.temp01-left .slogan .ql-editor p{width:100%;color:#fff;font-size:18px;text-align:center}.temp01-left .slogan .quill-editor.focus{border-color:#fff}.temp01-left .slogan .ql-blank:before{font-size:16px;left:30%;color:#fff}.temp01-part .bar svg{width:17px;height:17px}.temp01-part .temp01-working-skill.focus-part .rowPartTools{display:block}.temp01-part .temp01-working-skill .focus{position:relative}.temp01-part .temp01-working-skill .focus .rowTools{display:block}.temp01-part .temp01-working-skill{width:50%;display:flex;padding-right:10px}.temp01-part .temp01-working-skill .fix{display:flex;width:100%;position:relative}.temp01-part .temp01-working-skill ul{margin:0;padding:0;list-style:none}.temp01-part .temp01-working-skill ul li{display:flex;line-height:35px;align-items:center;margin-bottom:7px}.temp01-part .temp01-working-skill ul li .quill-editor{width:100%}.temp01-part .temp01-working-skill ul li .quill-editor p{font-size:16px}.temp01-part .temp01-working-skill ul li .style-list{margin-right:15px;color:#c7ac6d;font-size:8px}.temp01-part .temp01-working-skill .rowTools svg{width:12px!important;height:12px!important}.temp01-part .temp01-working-skill .rowTools .left .btn{width:16px;height:16px}.temp01-part .temp01-working-skill .rowTools .left .middleTool .btn{width:16px;height:16px;margin:0!important}.temp01-part .temp01-working-skill .quill-editor-wrapper{width:100%}.temp01-part img{width:14px;height:14px}.temp01-target .bar svg{width:17px;height:17px}.temp01-target h2 .ql-editor p{text-transform:uppercase;font-family:iCiel Gotham Ultra;letter-spacing:1.8px;font-size:20px;font-weight:900;display:block}.temp01-target .quill-editor p{font-size:16px;font-weight:300}.temp01-target img{width:14px;height:14px}.temp01-achivement{display:flex;flex:1}.temp01-achivement .bar svg{width:17px;height:17px}.temp01-achivement .bar svg.ic-2{width:55%!important}.temp01-achivement__box{display:flex}.temp01-achivement__left{flex:1}.temp01-achivement__left .date{margin-right:10px}.temp01-achivement__left .date span .ql-editor{font-size:14px;display:block;font-weight:300;text-align:center}.temp01-achivement__left .date span .ql-blank{text-align:left}.temp01-achivement__right .company-name{word-break:break-all}.temp01-achivement__right .company-name .ql-editor{font-weight:700;font-size:16px;text-transform:uppercase}.temp01-achivement__right .job{word-break:break-all}.temp01-achivement__right .job .ql-editor{font-size:14px;font-weight:700}.temp01-achivement__right .job .ql-blank:before{font-weight:400}.temp01-achivement .focus{display:flex;flex-direction:column;position:relative}.temp01-achivement .focus .rowTools{display:block}.temp01-achivement .focus .rowTools .right{right:-32px}.temp01-achivement .focus-part .rowPartTools{display:block}.temp01-achivement .content .item-ex{margin-top:20px}.temp01-achivement .content .rowTools svg{width:12px!important;height:12px!important}.temp01-achivement .content .rowTools .left .middleTool .btn{width:22px;height:22px;margin:2px!important}.temp01-achivement__right{flex-grow:2}.temp01-achivement .ql-blank:before{font-size:13px;text-transform:none}.sub-header-preview{background:rgba(0,0,0,.8);position:sticky;z-index:2;top:0;left:0;height:42px;display:flex;justify-content:space-between;align-items:center;width:100%}.sub-header-preview .back-button{margin-left:12px;display:flex;align-items:center;cursor:pointer}.sub-header-preview .back-button svg{font-size:24px;color:#bbb}.sub-header-preview .back-button svg:hover{color:#fff}.sub-header-preview .right-button{margin-right:12px;display:flex;flex-direction:row}.sub-header-preview .right-button .export-button{margin-right:12px;display:flex}.sub-header-preview .right-button .export-button svg{font-size:18px;cursor:pointer;color:#bbb}.sub-header-preview .right-button .export-button svg:hover{color:#fff}.sub-header-preview .right-button .zoom-button{display:flex}.sub-header-preview .right-button svg{font-size:18px;cursor:pointer;color:#bbb}.sub-header-preview .right-button svg:hover{color:#fff}.sub-header-preview .right-button svg:last-child{margin-left:12px}.sub-header-preview .submenu .submenu__content{flex-wrap:nowrap}.sub-header-preview .submenu .submenu__content .submenu__content__item{width:auto;padding:0 12px}@font-face{font-family:Iciel Gotham Thin;src:url(build/user/fonts/Gotham-Thin.otf?0d1f294a9db68527c0b34c1b1c42776d)}@font-face{font-family:Iciel Gotham Medium;src:url(build/user/fonts/Gotham-Medium.otf?65bf71c5af64bec473db4dc714e9af05)}@font-face{font-family:Iciel Gotham Ultra;src:url(build/user/fonts/Gotham-Ultra.otf?5d8a1ca99403312585498e730e16ef0b)}.row .value .ql-editor{white-space:normal!important}.template05-language .label .ql-editor{text-align:center;font-size:15px;font-weight:500;padding:0}.row .value .ql-editor{white-space:normal!important}  Tran Nam Trung\nFlash Developer, Unity Developer , Tech Lead\n27/08/19840937881096tiger.crystal.vn@gmail.com\nvampirer@gmail.com\nHCM\nbamboofx\ntao\nntvfx\nWorking ExperienceCreated with Sketch.WORK EXPERIENCE01/2005\n-01/2007\nFree lancer\nFlash Developercreate app by Macromedia Flash, Web game, 01/2007\n-01/2009\nNew media world wideFlash DeveloperCreate small game for website and interactive banner\n01/2009\n-01/2010\nYeu Am Nhac\nFlash DeveloperCreate small game for website and interactive banner\n01/2010\n-01/2019\nCCC\nTech Leader\nFlash Game for webUnity Game for PCAndroid App and GameAR - VR game for mobileHTML 5 Game 01SkillsCreated with Sketch.TECHNICAL SKILLSActionScriptJavaScriptPython3JavaHTML5\nAndroid App\nC#\nUnity\ncocos2dx\nBlender\nPhotoshop\nAI\nLanguageCreated with Sketch.LANGUAGESEnglish\nHobbyCreated with Sketch.HOBBIESCreate games and play game\n02 "
},
{
	"uri": "https://bamboofx.github.io/ai-with-python/chapter1/",
	"title": "C1: Trí thông minh nhân tạo là gì?",
	"tags": [],
	"description": "",
	"content": "PythonAI Chapter1Trí thông minh nhân tạo là gì ?\nTrí thông minh nhân tạo(AI) là một cách mà làm cho những cái máy có suy nghĩ và hành xử một cách thông minh. Những cái máy có thể điều khiển bởi phần mềm bên trong, vậy AI có nghĩa là làm việc một cách thông minh thông qua các trương trình máy tính. Nó là một môn khoa học để tìm kiếm lý thuyết và phương pháp có thể giúp cho các máy móc hiểu được thế giới và sau đó có thể xử lý phù hợp các tính huống theo cách mà con người có làm.\nNếu chúng ta nhìn gần hơn vào lĩnh vực AI thì có thể thấy nó đang phát triển khoảng vài thập kỷ , bạn sẽ thấy các nhà nghiên cứu đã tập trung tìm hiểu nhiều cách khác nhau những khái niệm khác nhau để định nghĩa AI . Trong thế giới hiện đại, AI được sử dụng trong nhiều ngành và trong nhiều hình thái. Chúng ta muốn một cái máy có thể cẩm nhận, biết , suy nghĩa và hành đọng. Chúng ta muốn cái máy của chúng ta hành động hợp lý.\nAI có cách nghĩ và học gần với bộ não con người. Những nhà nghiên cứu tin AI có thể làm được bằng cách tìm hiểu làm sao bộ não của chúng ta làm việc thế nào. Bằng cách bắt chước cách mà bộ não con người học , nghĩ và chỉ đạo hành động, chúng tao có thể xây dựng một cái máy có thể làm giống như thế. CHúng có thể sử dụng như là một nền tảng để phát triển hệ thống thông minh có khá năng tự học hỏi.\nTại sao chúng ta cần học AI?\nAI có khả năng tác động đến mọi khía cạnh trong cuộc sống của chúng ta. Lĩnh vực về AI đang có gắng hiểu các mô hình và hành động của các thực thể. Cùng với AI, chúng ta muốn xây dựng một hệt thống thông minh và khái niệm về trí thông minh. Hệ thống thông minh chúng ta xây dựng rất hữu dụng trong việc hiểu làm thế nào mà một hệt thống thông minh giống như bộ não của chúng ta làm việc về cấu trúc của các hộ thống thông minh khác.\nHãy xem thử cách bộ não chúng ta xử lý thông tin như thế nào: Vỏ não(Brainstem) (Nhịp tim, nhiệt độ cơ thể) -\u0026gt; Não giữa- một phần trung tâm của não (midbrain) (phục vụ các chức năng quan trọng trong việc xử lý chuyển động của mắt xử lý thính giác và thị giác) -\u0026gt; một nhóm cấu trúc dưới vỏ não( Limbic) ( xử lý các việc có liên quan đến hành vi, thái độ, cảm xúc,động lực ) -\u0026gt; )neocortex( một phần của vỏ não liên quan đến những chức năng cao hơn của não bộ như nhận thức cảm giác , tạo ra các lệnh vận động lý luận suy nghĩ có ý thức và ngôn ngữ).\nSo sánh với vài lĩnh vực khác như toán học hay vật lý đã xuất hiện khoảng vài thế kỷ thì AI chỉ là một lính mới. Trải qua vài thập kỷ, AI đã có một vài sản phẩm như hệ thống xe tự lái . và trí thông minh của robot làm nó có thể đi lại. Dựa trên những hướng mà chúng ta đang đi tới thì việc xây dựng trí thông minh sẽ có tác động lớn đến cuộc sống của chúng ta trong những năm tới.\nChúng ta không thể không tự hỏi làm sao mà bộ não của con người có thể quản lý quá nhiều việc nhưng rất dễ dàng như thế. CHúng ta có thể nhận biết vật thể, hiểu ngôn ngữ, học những thứ mới, và thực hiện nhiều nhiệm vụ phức tạp và tinh vi với bộ não của chúng ta. Làm thế nào mà bộ não của chúng ta có thể làm được những việc đó ? Khi bạn có gắng làm việc đó với một cái máy, bạn sẽ thấy nó tụt lại phía sau ( whenyou try to do with a machine, you will see that it falls way behind) !!!???.  Ví dụ khi chúng ta đong cố gắng tìm kiếm những thứ như sự sống ngoài trái đất hay du hành thời gian, chúng ta thực sự không biết nó có tồn tại hay không. Tin tốt là chúng ta biết AI có tồn tại. Bộ não của chúng ta là một cái chén thánh!! Nó là một ví dụ không thể tốt hơn về một hệ thống thông minh, Tất cả việc mà chúng ta cần làm đó là bắt chước nó cách thức và phương thức để có thể tạo lên một hệ thống thông minh tương tự não , thậm chí còn có thể tốt hơn.\nHãy xem một dữ liệu cơ bản được chuyển đổi một cách thông minh sẽ như thế nào.\nDữ liệu(Data)\u0026ndash;xử lý(processing)Thông tin(information)\u0026ndash;nhận thức(cognition) Hiểu biết(Knowledge) \u0026ndash;Phân tích (pattern extraction)Hiểu(Understand) \u0026ndash; kết luận(inference)Giải pháp thông minh.\nMột trong những lý do chính chúng ta muốn học AI là tự động hóa nhiều việc. Chúng ta đang sống trong một thế giới mà . Chúng ta phải đối đầu với một lượng dữ liệu lớn mà bộ não con người thì không thể lưu trữ được hết quá nhiều dữ liệu. Những dự liệu đén từ nhiều nguồn và cùng một lúc Dữ liệu không được kiểm chứng và hỗn loạn Kiến thức có được từ những dữ liệu này cần phải cập nhật liên tục bởi vì chính dữ liệu đó cũng liên tục thay đổi. Mọi thứ cần được độ chính xác cao.  Mặc dù bộ não con người rất giỏi trong việc phân tích những thứ xung quanh chúng ta, nó không thể theo kịp các điều kiện trên. Do đó chúng ta cần thiết kế và phát triển những chiếc máy thông minh có thể làm các việc đó. Chúng ta cần một hệ thống AI có thể làm:\nQuản lý một lượng lớn dữ liệu một cách hiệu quả. Cùng với sự phát triển của Cloud Computing( dữ liệu tính toán đám mây), Bây giờ chúng ta đã có thể lưu trữ dữ liệu lớn hơn rất nhiều. Nhập dữ liệu đồng thời từ nhiều nguồn với độ trễ thấp. Lập mục lục và xắp xếp dữ liệu theo một cách cho phép chúng ta truy xuất dễ dàng và dễ hiểu Học những dữ liệu mới và cập nhật liên tục sử dụng những thuật toán tự học một cách phù hợp. Nghĩ và trả lời những tình huống dựa trên các điều kiện trong thời gian thực.  Công nghệ AI đang được sử dụng tích cực để làm cho các cỗ máy đã có trở nên thông minh hơn, vậy nên chúng ta có thể thực hiện tạo nên AI nhanh hơn và hiệu quả hơn.\nỨng dụng của AI\nBây giờ chúng ta đã biết cách nào để xử lý các thông tin đã có , hãy xem những nơi mà AI đã xuất hiện thực tế. AI biểu hiện dưới nhiều hình thức khác nhau trong nhiều lĩnh vực, vì vậy ta thấy nó quan trọng để biết nó hữu dụng trong nhiều lĩnh vực . AI đã được xử dụng trong nhiều ngnahf công nghiệp và nó liên tục mở rộng một cách nhanh chóng. Một vài ví dụ về sự phổ biến của AI bao gồm:\nComputer Vision: Đây là hệ thống có thể nhận diện phân biệt những dữ liệu trực quan giống như hình ảnh hay videos. Những hệ thống này hiểu được nội dung và trích xuất những thông tin chi tiết dựa trên những tình huống được sủ dụng. Ví dụ, Google sử dụng những hình ảnh đã được tìm kiếm và tìm những hình tương tự trên các Web khác nhau Natural Language Processing: Lĩnh vực này liên quan tới việc hiểu các văn bản. Chúng ta có thể tương tác cùng với một cái máy thông qua việc nhập một đoạn văn bản bằng ngôn ngữ tự nhiên. Những cỗ máy tìm kiếm (google , bing … ) sử dụng điều này để cung cấp các kết quả tìm kiếm đúng nhất. Speech Recognition( nhận diện giọng nói): Hệ thống này có thể nghe và hiểu những từ bạn nói. Ví dụ , Những trợ lý ảo trên điện thoại thông minh có thể hiểu chúng ta đang nói cái gì và đưa những thông tin liên quan hoặc một hành động dựa trên những gì chúng nghe. Expert System (Hệ thống trợ lý chuyên gia): Những hệ thống này sử dụng công nghệ AI để cho chúng ta lời khuyên hoặc thực hiện một quyết định. Chúng thường xử dụng cơ sở dữ liệu (database) chuyên biệt (tùy từng ngành) giống như là kinh tế, thuốc, marketing, và đưa ra một lời khuyên sẽ làm gì tiếp. Hãy xem một hệ thống trợ lý chuyên biệt được sử dụng như thế nào:  [ Hiểu biết cơ bản( cơ sở)] user input [Máy suy luận] ( cơ sở dữ liệu và thuật toán học)  user receiver   Games: AI được sử dụng rộng rãi trong ngành công nghiệp game. Nó được sử dụng để thiết kế những đối thủ thông minh có thể đối đầu với con người trong trò chơi. Ví dụ, AlphaGo là một trương trình máy tính có thể chơi trò chơi chiến lược Go. Nó cũng được xử dụng trong việc thiết kế rất nhiều dạng trò chơi mà cần tới sự thông minh và tính toán của máy tính. Robotic: Hệ thống Robotic thực ra được kết hợp rất nhiều khái niệm trong AI. Hệ thống này có thể thực hiện rất nhiều nhiệm vụ khác nhau. Dựa trên những tình huống khác nhau, những con robot có các bộ cảm biến và các bộ truyền động có thể làm rất nhiều thứ. Những cảm biến có thể nhìn thấy những thứ trước nó và đo nhệt độ, độ ẩm , di chuyển… và những thứ tương tự thế. Nó có bộ vi xử lý và tính toán riêng những thứ khác nhau trong thời gian thực. Nó cũng có thể dễ dàng thích nghi được với môi trường mới .  Các nhánh của AI\nĐiềuquan trọng phải hiểu là có những lĩnh vực khác nhau trong việc nghiên cứu trong AI vậy nên chúng ta cần phải chọn đúng framework để giải quyết một vấn đề thực tế nhất định.\nMachine learning and pattern recognition( máy tính tự học và nhận dạng vật thể): Đây có lẽ là khuôn mẫu phổ biến nhất của AI. CHúng ta thiết kế và phát triển phần mềm có thể học từ đống dữ liệu. Dựa trên những mô hình học tập này, chúng ta đưa ra dự đoán về những dữ liệu không biết. Một trong những hạn chế chính ở đây là chương trình đó bị giới hợn bởi sức mạnh của dữ liệu ( độ lớn của dữ liệu ) . Nếu dữ liệu ít , mô hình tự học này tất nhiên cũng bị giới hạn. hãy xem một dạng của hệ thống machine learning như thế nào:  Data (dữ liệu)-\u0026gt; preprogcessing, training optimization( xử lý, luyện tập, tối ưu) machine learning model( mẫu tự học)  Khi một hệ thống thực hiện quan sát, nó sẽ được huấn luyện để so sánh những thứ nó nhìn thấy cùng với những thứ nó đã được nhìn thấy trong nguyên mẫu. Ví dụ hệ thống nhận dạng khuôn mặt. Phần mềm sẽ có gắng để tìm các vật thể như mắt, mũi miệng lông mày … so sánh… và theo cách đó nó sẽ tìm thấy khuôn mặt đó đã có trong cơ sở dữ liệu chưa.\nLogic base AI: Logic trong toán học được sử dụng để thực hiện các trương trình máy tính trong Logic-based AI. Một chương trình được vieets trong logic-based AI về cơ bản là một chuỗi các hoạt động logic dựa trên những khung có sẵn. Nó thường được sử dụng trong việc so sánh các vật thể, phân tích ngôn ngữ , phân tích ngữ pháp và những thư tương tự thế. Search: Công nghệ tìm kiếm được sử dụng rộng rãi trong các chương trình AI. Những chương trình kiểm tra một lượng lớn các khả năng có thể sau đó chọn một đương tối ưu nhất. Ví dụ, nó thường được sử dụng rất nhiều trong các game chiến lược giống như Cờ, mạng, phân bổ tài nguyên, lập kế hoạch, và …. Knowledge representation: sự thật về thế giới xung quanh chúng ta cần phải được hệ thống lại theo một cách có hệ thống . Ngôn ngữ toán học logic thường được dung ở đây. Nếu sự hiểu biết được thể hiện bằng những mỗi liên kết thông tin thì hệ thống có thể thông minh hơn . Bản thể học là một lĩnh vự nghiên quan đến các loại đối tượng tồn tại. Nó là một định nghĩa chính thức về các thuộc tính và các mối quan hệ của các thực thể tồn tại chung trong một vấn đề. Nó thường được phân lịa một cách cụ thể và phân cấp riêng biệt. (Đéo hiểu lắm). Planing: Lĩnh vực nghiên cứu này liên quan đén sự tối ưu các kế hoạch và đưa cho chúng ta nhiều kết quả nhất cùng với mức giá thấp nhất. Chương trình phần mêm bắt đầu với một tình huống cụ thể và kết quả là một hướng đi tối ưu. Heuristcs: Heuristic là một phương pháp kỹ thuật xử dụng tất cả các phương pháp để có thể giải quyết vấn đề một cách nhanh nhất ( đồng nghĩa với việc không tối ưu) . Trong AI, chúng ta thường xuyên sẽ gặp phải tình huống không thể kiểm tra mọi khả năng để tìm ra cách tối ưu nhất vì thế kỹ thuật heuristics ra đời để chúng ta có thể tìm ra kết quả một cách nhanh nhất. Nó thường được sử dụng trong ngành công nghệ robotic, máy tìm kiếm. Genetic programing: Lập trình có tính di truyền là cách mà để một chương trình có thể giải quyết một nhiệm vụ, bằng cách tìm các phần mềm và chọn ra cái đúng nhất. Những trương trình được giải mã như một bộ gens sử dụng thuật toán để đưa ra cách nhiệm vụ tốt nhất.  1.Định nghĩa về trí thông minh sử dụng phép thử Turing\nHuyền thoại củangành công nghệ máy tính và toán học \u0026ndash; Alan Turing, đề xuất một cái gọi là phép thử Turing để giới thiệu một định nghĩa về trí thông minh. Nó là một bài kiểm tra để hiểu nếu một máy tính có thể học để bắt chước hành vi của con người. Oong ấy đã định nghĩa hành xử thông minh nghĩa là có thể hành xử như con nguoiwf trong suốt một cuộc nói chuyện. Hiệu suất của phép thử cho ta biết là thành công nếu nó có thể lừa người phỏng vấn nghĩ những câu trả lời được xuất phát từ con người.\nĐể thấy nếu một máy tính có thể làm điều đó, ông ấy đã đưa ra một bài kiểu tra: ông ấy đề xuất một nguowif phỏng vấn một cái máy thông qua một đoạn văn. Và một hạn chế khác nữa là người phỏng vấn không biết được ai sẽ là người trả lời. một cái máy hay một người thật sự. Để làm được công việc này một người sẽ tương tác với hai vật thể không xác định thông qua một văn bản, hai vật thể không xác định này được gọi là những người được phỏng vấn. Một trong số họ là người còn lại sẽ là một cái máy\nChiếc máy trả lời sẽ được cho là thông qua nếu người phỏng vấn không thể nói được câu trả lời đến từ một cái máy hay từ một con người.\n\u0026nbsp;\nNhư bạn đã tưởng tượng thì cuộc phỏng vấn này là một nhiệm vụ khá khó khăn cho một cái máy . Có rất nhiều thứ có thể xảy ra trong suốt cuộc trò chuyện. Ở mức tối thiểu, cái máy cần phải làm được 1 vài thứ sau đây:\nXử lý ngôn ngữ. Cái máy cần phải liên kết ( nghĩa là hiểu được) người phỏng vấn hỏi cái gì. Cái máy cần phân tích các câu hỏi, xử lý chủ đề chính và đưa ra một câu trả lời chấp nhận được Kiến thức cần có: Cái máy cần lưu lại những thông tin đã được đưa ra từ trước bởi người phỏng vấn. nó cũng cần giữ lại nhưng thông tin được đưa ra trong suốt quá trình để có thể trả lời nếu những thông tin đó lặp lại lần nữa Lý luận: Điều này rất quan trọng để cái máy có thể hiểu làm thế nào để trích xuất những thông tin đã được lưu trữ. Con người có thể làm điều này một cách tự động theo thời gian thực Học hỏi: Điều này cần để chiêc máy tính có thể đáp ứng những điều kiện theo thời gian nhanh nhất. Cái máy cần phân tích và phát hiện những mô hình mà nó có thể phỏng theo   Bạn có biết tại sao lại phải sử dụng văn bản trong phép thử này không ? Theo Turing thì giả lập vật lý của một người không cần thiết cho trí thông minh. Vì lý do đó nên bài thử Turing tránh giao tiếp vật lý giữa người và máy. Còn một bài thử khác được gọi là Phép thử Turing Tổng hợp bao gồm cả tầm nhìn và cử động. Để qua được bài kiểm tra này, chiếc máy cần phải nhìn thấy vật thể và di chuyển xung quanh sử dụng ROBOTICS\n.\nLàm một chiếc máy suy nghĩ như con người\nĐã nhiều thập kỷ , chúng ta đã cố gắng làm một chiếc máy có thể suy nghĩ như con người. Để làm điều này chúng ta trước hết cần hiểu con người suy nghĩ như thế nào. Làm thế nào chung ta có thể hiểu một người bình thường nghĩ như thế nào? Có một cách để làm điều đó là chúng ta phải ghi lại cách mà chúng ta giải quyết một vấn đề thế nào. Nhưng điều này cũng rất là khó, bởi vì chúng ta có quá nhiều thứ để ghi lại. Còn một cách khác đó là tiến hành một thí nghiệm dựa trên một định dạng đã được xác định trước. Chúng ta phát triển một số câu hỏi nhất định về nhiều chủ đề , sau đó sẽ xem mọi người trả lời thế nào.\nKhi chúng ta đã thu thập đủ dữ liệu, chúng ta có thể tạo ra một nguyên mẫu để phỏng theo cách xử lý của con người. Nguyên mẫu này có thể sử dụng để tạo ra phần mềm có thể nghĩ như con người. Tất nhiên là nói thì dễ hơn làm. Tất cả những cái chúng ta quan tâm là cái gì mà phần mềm sẽ trả lời( software output) khi chúng ta đưa cho nó (software) một vấn đề cụ thể(particular input ). Nếu trương trình có thể đưa ra cách mà giống với cách con người làm thì sau đó chúng ta có thể nói nó có cơ chế suy nghĩ giống con người.\nBiểu đồ sau sẽ cho chúng ta thấy những mức độ khác nhau về cách suy nghĩa và bộ não của chúng ta ưu tiên xử lý cái gì trước : Hình ảnh -\u0026gt; Hoạt động - \u0026gt; Vật lý -\u0026gt; Hành vi - \u0026gt; Phân tích\nTrong ngành khoa học máy tính có một lĩnh vực nghiên cứu được gọi là Mô hình nhận thức\n(Cognitive Modeling) liên quan đến mô phỏng quá trình tư duy của con người. Nó sẽ cố gắng hiểu con người giải quyết vấn đề như thế nào. Nó đưa ra các phương pháp giải quyết vấn đề và biến thành một mô hình phần mềm. Mo hình này có thể sử dụng để mô phỏng hành vi của con người. Mô hình nhận thức được sử dụng đa dạng trong các ứng dụng của AI như là deep learning, expert system Natural Language Processing , robotics ….\nXây dựng một Rational agents\nRất nhiều nghiên cứu về AI đều tập trung xây dựng một Rational Agents. Vậy chính xác thì cái gì là Rational Agents? Trước đó chúng ta cần định nghĩa về từ hợp lý(Rational) . Tính hợp lý (rational) có nghĩa là đề cập đến việc làm đúng trong một hoàn cảnh nhất định. Nó cần được thực hiện theo cách có ích nhất trong một hành động. Một tác nhân(agent) được gọi là hành động thích hợp nếu : nó đưa ra một bộ quy tắc, nó hành động theo và đạt được mục tiêu. Nó chỉ nhận thức và hành động theo thông tin có sẵn. Hệ thống này được sử dụng rất nhiều trong AI để thiết kế robot khi nó đi trên các địa hình không xác định.\nLàm thế nào để định nghĩa là điều đúng ? Câu trả lời là dựa trên những mục tiêu của tác nhân (agents). Một tác nhân (agent) được cho là thông minh và hành động độc lập. Chúng ta muốn truyền đạt khả năng thích ứng tới những tình huống mới. Nó nên hiểu môi trường làm việc của nó va fsau đó hành động theo đó để đạt được những kết quả tốt nhất. Những kết quả tốt nhất được quyết định bởi mục tiêu tổng thể nó đạt đượng. Hãy xem từ cách nhập liệu để được chuyển đổi thành hành động :\nInput-\u0026gt; Sensor(cảm biến)-\u0026gt; Prepocesssor( tiền xử lý) -\u0026gt; Agent function(hàm tác nhân)-\u0026gt; Actuator(thiết bị truyền động) -\u0026gt; Action(Hành động).\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\nLàm sao để chúng ta có thể định nghĩa hiệu suất làm việc cho một rational agent ?Người ta có thể nói rang đó là một tỷ lệ thuyaanj của mức độ thành công trong sự việc. The agent( tác nhân \u0026ndash; xử lý ) được thiết kế để đạt được một nhiệm vụ nhất định, vì vậy đo lường hiệu suất làm việc là tính tỷ lệ % thành công nhiệm vụ nó hoàn thành. Nhưng chúng ta phải nghĩ cái gì đã tạo ra tính hợp lý trong toàn bộ sự việc. Nếu chỉ là về kết quả , thì tác nhân có thể có hành động nào để đạt được kết quả???????????????????????????????????????????\nThe\u0026nbsp;agent function\u0026nbsp;is a mathematical\u0026nbsp;function\u0026nbsp;that maps a sequence of perceptions into action(hàm agent là một hàm toán học dùng để phác thảo các trình tự của nhận thức vào trong hành động).\nLàm những suy luận đúng đắn chỉ ra một phần của hành động hợp lý, bởi the agent(tác nhân) phải hành động một cách hợp lý để đạt được kết quả. Cái này giúp nó rút ra kết luận có thể được sử dụng liên tiếp. Thế còn những tình huống mà không có điều chắc chắn đúng ? Đó là những tình huống mà tác nhân(the agent) không biết phải làm gì nhưng nó vẫn phải làm một điều gì đó. Trong tình huống này, chúng ta không thể bao gồm khái niệm hay suy luận để xác định hành vi hợp lý(rational behavior).\n\u0026nbsp;\nGeneral Problem Solver( Giải quyết vấn đề chung )\nThe General Problem Solver(GPS)  là một trương trình AI được đưa ra bởi Herbert Simon J.C. Show, và Allen Newell. Nó là chương trình máy tính hữu ích đầu tiên ra đời trong thế giới AI. Mục tiêu là làm cho nó làm việc giống như một cỗ máy giải quyết vấn đề chung. Tất nhiên là đã có nhiều chương trình phần mềm tồn tại trước đó, Nhưng những chương trình đó chỉ thực hiện những nhiệm vụ chỉ định. GPS đã là chương trình đầu tiên được chỉ định để giải quyết bất cứ một vấn đề chung nào. GPS đã được cho là đê giải quyết tất cả các vấn đề bằng cách sử dụng thuật toán chung cho mỗi vấn đề.\nNhư là bạn đã nhận thấy, đây thực sự là một việc khó khan. Để lập trình GPS, tác giả tạo ra một ngôn ngữ mới được gọi là Information Processing Language(IPL). Tiền đề cơ bản là để diễn đạt bất kỳ vấn đề nào với một tập hợp các công thức đã hình thành trước. Những công thức này sẽ là một phần của bức tranh đồ thị cùng với nhiều nguồn. Trong đồ thị này thì tài nguyên ( source) là điểm bắt đầu (starting node) và điểm kết thúc của đồ thị(sink) được coi như là kết luận. Mặc dù GPS được coi như là một chương trình để giải quyết vấn đề chung nhưng sự thực thì nó chỉ có thể giải quyết những vấn đề được định nghĩa rõ rang, giống như là giải toán tích phân hay hình học. Nó cũng có thể dung để giải cái chò đố chữ hay chơi cờ. Lý do là những vấn đề này có chung một cấu trúc. Nhưng trong thế giới thực điều này trở thành khó khan bởi vì số lượng và các hướng có thể giải quyết. Nếu bắt chương trình cố gắng giải quyết vấn đề bằng cách đém các bước trong một đồ thì thì nó trở thành điều không thể. Giải quyết vấn đề với GPS\nHãy xem cấu trúc một vấn đề đưa ra và được giải quyết bởi GPS:\nBước đầu tiên là xác định mục tiêu. Hãy xem mục tiêu của chúng ta là lấy một ít sữa từ cửa hang tạp hóa Bước tiếp theo là định nghĩa điều kiện cần. Những điều kiện cần là tài liệu tham khảo để đến các mục tiêu. Để lấy sữa từa tiệm tạp hóa, chúng ta cần phải có một chế độ vận chuyển và tiệm tạp hóa cần phải có sữa. Sauu cùng , chúng ta phải định nghĩa sự điều hành. Nếu chế độ vận chuyển là một chiếc xe và nếu chiếc xe sắp hết xăng, chung ta cần phải đảm bảo chúng ta có thể trả xăng ở trạm xăng. Chúng cần phải trả sữa ở cửa hang.  Một nhà điều hành cần quan tâm đến mọi điều kiện và mọi vấn đề có thể liên quan. Nó bao gồm những hành động, những điều kiện, và những kết quả thay đổi từ những hành động. Trong trường hợp này, hành động là đưa tiền cho cửa hang tạp hóa. Tất nhiên, điều này phụ thuộc vào việc bạn có tiền ở nơi bắt đầu, đó là điều kiện đầu tiên(precondition). Bằng cách đưa tiền, bạn đã thay đổi điêìu kiện tiền bạc của bạn, điều này dẫn đén kết quả là bạn có them sữa. \nGPS sẽ hoạt động miễn là bạn có thể kết nối các vấn đề lại với nhau. Các rang buộc là nó sử dụng quá trình tìm kiếm để thực hiện công việc của mình, cách này quá phwucs tạp về mặt tình toán và tốn thời gian cho bất kỳ ứng dụng thực tế nào có ý nghĩa.\nXây dựng một tác nhân thông minh( intelligent Agent)\n\u0026nbsp;\nCó rất nhiều cách để truyền đạt thông tin cho một agent( tác nhân xử lý). Cách mà được sử dụng thông dụng nhất là kết hợp với machine learning, lưu dữ liệu, các quy tắc (rules), và những thứ tương tự. Trong phần này chúng ta sẽ tập trung vào machine learning. Trong trường hợp này cách mà chúng ta truyền sự thông minh cho một tác nhân xử lý( an agent) là thông qua dữ liệu và luyện tập.\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\nHãy xem một intelligent agent tương tác với môi trường( environment)\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\nCùng với machine learning, chúng ta muốn viết một chương trình để cho cỗ máy của mình sử dụng được những dữ liệu đã được định danh sẵn để giải quyết các vấn đề được đưa ra. Bằng cách duyệt qua dự liệu đã được lưu trữ, máy có thể học được cách làm thế nào để trích xuất các phần và mối quan hệ giữa các thành phần.\nTrong các ví dụ trước, bộ não chính ( the intelligent agent) dựa trên những các nguyên mẫu học tập để chạy phần suy luận. Khi bộ phận cảm biến nhận được lệnh (input from sensor) , nó sẽ gửi các khối đặc tính đã được khai thác tới bộ não chính. Sau khi các đặc tính (hoặc tính năng) được trích xuất , bộ phận suy luận đã được học trước đó(trained inference engine) sẽ đưa ra một dự đoán dựa trên những nguyên mẫu học tập (learning model). Nguyên mẫu học tập (learning model) này được xây dựng dựa trên machine learning. Bộ phận suy luận ( inference engine) sau đó sẽ lấy một kết quả và gửi nó tới bộ phận hành động để thực hiện những hành động trong thế giới thực.\nCó rất nhiền ứng dụng của machine learning đang tồn tại. Nó được sử dụng trong phân tích hình ảnh, robot, nhận diện giọng nói, dự đoán thị trường, vv...v… . Để hiểu rõ về machine learning và xây dựng một cách hoàn chỉnh bạn sẽ phải học nhiều thứ cũng như nhiều kỹ thuật trong các lĩnh vực khác nhau vd: nhận diện thành phần, mạng thần kinh ảo , data mining, phân tích …. Vvv.\nCác loại mô hình\nCó hai loại mô hình chính trong thế giới AI: mô hình phân tích (Analytical models) và mô hình học tập (Learned models). Trước khi chúng ta có một cái máy tính có thể tự tính toán, con người thường sử dụng dựa trên các mô hình phân tích. Các mô hình này có nguồn gốc là sử dụng các công thức toán học , về cơ bản nó là cách làm có trình tự để đi đến một kết quả cuối cùng. Vấn đề với phương pháp này là nó dựa trên những đánh giá của con người. Do đó mô hình này rất đơn giản và sẽ không chính xác với chỉ một vài thông số.\nSau đó chúng ta đã bước vào thế giới máy tính. Nơi mà những chiếc máy tính đã rất hữu dụng trong việc xử lý phân tích dữ liệu. Vậy nên mọi người đã bắt đầu sử các dụng mô hình học tập (Learned models) , những mô hình này có được thông qua quá trình đào tạo. Trong suốt quá trình được học tập, cái mãy đã nhìn vào rất nhiều ví dụ được nhập liệu và xuất ra kết quả .Những mô hình học tập này thường rất phức tạp và có độ chính xác với hang ngàn thông số. Điều này dẫn đến một phương trình toán học phức tạp chi phối dữ liệu.\nMachine Learning cho phép chúng ta có được những mô hình học tập (Learned models), để xử dụng cho bộ phận suy luận ( inference engine). Một trong những điều tốt nhất ở đây là chúng ta không càn phải biết được mô hình toán học. Bạn không cần biết những phương trình toán phức tạp, bởi vì cái máy đã rút ra công thức dựa trên dữ liệu đã có. Tất cả mọi thứ chúng ta cần làm là tạo ra danh xách nhập liệu và đầu ra tương ứng cho dữ liệu nhập . Mô hình học tập mà chúng ta có chỉ là mối quan hệ giữa những gì nhập liệu và đầu ra tương ứng .\nCài đặt Python 3\nChúng ta sử dụng python trong cuốn sách này. Hãy chắc là bạn đã cài đặt version mới nhất . Hãy check version bằng lệnh sau trong Terminal ( cmd in windows): python3 \u0026ndash;version;\nCài đặt trên Ubuntu\nPython 3 is already installed by default on Ubuntu 14.xx and above. If not, you can install it\nusing the following command:\n$ sudo apt-get install python3\nRun the check command like we did earlier:\n$ python3 --version\nYou should see the version number printed on your Terminal.\nCài đặt trên Mac OS X\nIf you are on Mac OS X, it is recommended that you use Homebrew to install Python 3. It is\na great package installer for Mac OS X and it is really easy to use. If you don't have\nHomebrew, you can install it using the following command:\n$ ruby -e \"$(curl -fsSL\nhttps://raw.githubusercontent.com/Homebrew/install/master/install)\"\nLet's update the package manager:\n$ brew update\nLet's install Python 3:\n$ brew install python3\nRun the check command like we did earlier:\n$ python3 --version\nYou should see the version number printed on your Terminal.\nCài đặt trên window\nIf you use Windows, it is recommended that you use a SciPy-stack compatible\ndistribution of Python 3. Anaconda is pretty popular and easy to use. You can find the\ninstallation instructions at: https://www.continuum.io/downloads.\nIf you want to check out other SciPy-stack compatible distributions of Python 3, you can\nfind them at http://www.scipy.org/install.html. The good part about these distributions\nis that they come with all the necessary packages preinstalled. If you use one of these\nversions, you don't need to install the packages separately.\nOnce you install it, run the check command like we did earlier:\n$ python3 --version\nYou should see the version number printed on your Terminal.\nCài đặt các package cho cuốn sách Cuốn sách này sử dụng vài package khác nhau như NumPy, SciPy, scikit-learn, và matplotlib. Bạn phải cài các package này trước khi đọc tiếp các trang sau:\nNumPy: http://docs.scipy.org/doc/numpy-1.10.1/user/install.html\nSciPy: http://www.scipy.org/install.html\nscikit-learn: http://scikit-learn.org/stable/install.html\nmatplotlib: http://matplotlib.org/1.4.2/users/installing.html\nIf you are on Windows, you should have installed a SciPy-stack compatible version of Python3\nTổng kết chương\nTrong chương này chúng ta đã được học AI là cái gì và tại sao chúng ta phải học nó. Chúng ta đã thảo luận vài ứng dụng khác khau và các hướng của AI. Chung ta hiểu phép thử Turring là cái gì và cách tiến hành phép thử turing. Chúng ta đã học làm thế nào để một cái máy có thể suy nghĩ như người. Chúng ta đã thảo luận về các khái niệm về rational agent và cách chúng được thiết kế. Chúng ta đã học về General Problem Solver(GPS) và cách giải quyết vấn đè sử dụng GPS. Chúng ta đã thảo luận về cách phát triển một intelligent agent sử dụng machine learning. Chúng ta đã hiểu khái quát các kiểu dạng mô hình (models of intelligent).\nChúng ta thảo luận về cách cài đặt Python 3 trên các hệ điều hành, và các package cần thiết để xây dựng một ứng dụng AI. Chúng ta đã thảo luận cách sử dụng package để load dữ liệu. Trong chương tiếp theo chúng ta sẽ học về supervised learning và cách xây dựng mô hình để phân loại và regression.\n\u0026nbsp;\n\u0026nbsp;\n  --  -- \r\r "
},
{
	"uri": "https://bamboofx.github.io/ai-with-python/chapter2/",
	"title": "C2: Classification and Regression",
	"tags": [],
	"description": "",
	"content": "PythonAI chapter2Classification and Regression Using Spervisised Learning\nTrong chương này , chúng ta sẽ học về phân loại và quy hợp của dữ liệu sử dụng kỹ thuật học giám sát. Học hết chương này bạn sẽ biết về các chủ đề sau:\nSự khác nhau giữa học giám sát và học không giám sát? Hồi quy là cái gì? Làm sao để sử lý thô dữ liệu sử dụng những thuật toán. Cái gì là mã hóa nhãn hiệu Làm sao để xây dựng một Cơ sở để phân loại hồi quy. Phân loại Naivi Bayes là cái gì. Ma trận hỗn loạn là cái gì? Support Vector Machines là cái gì và cách xây dựng một bộ phân loại dựa trên nó ? Tuyến tính và quy hợp đa thức là cái gì? Làm sao để xây dựng một hồi quy tuyến tính cho biến đơn và dữ liệu đa biến ? Làm sao để ước tính giá nhà ở sử dụng Support Vector Regressor.  Giám sát và không giám sát học tập\nMachine Learning (ML) máy học thường được chia các làm nhóm :\nHọc Có giám Sát ( Supervised learning): \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Học bán giám sát ( semi-supervised learning)  Học Không giám sát (UnSupervised learning) Học củng cố (Reingorcement Learning)  \u0026nbsp;\nMột trong những cách thông dụng để truyền trí thông minh nhân tạo vào một cái máy là thông qua việc cho máy tự học (machine learning). Thế giới của máy tính tự học được phân chia rộng rãi cho học giám sát và không giám sát. Cũng có vài cách chia khác như bán giám sát và củng cố…, nhưng chúng ta sẽ thảo luận về nó sau.\nHọc Có Giám Sát (Supervised learning)  Là đề cập đến quá trình xây dựng một mô hình máy tính tự học dựa trên những dữ liệu đã train được dán nhãn sẵn. Đây là thuật toán dự đoán đầu ra (output) của một dữ liệu mới (new input) dựa trên các cặp (input,output) đã biết trước. Cặp dữ liệu này còn được gọi là [dữ liệu,nhãn] (data, label) [X,y]\nTa có một mảng (array) biến đầu vào X=[x1,x2,..xn] và một mảng nhãn tương ứng Y=[y1,y2,…,yn] các cặp dữ liệu biết trước được gọi là dữ liệu huấn luyện (training data) . Từ dữ liệu này chúng ta cần tạo ra một hàm số để ánh xạ (map) mỗi phần tử (item) từ array X sang một phần tử (item) tương ứng của array Y. . Mục đích của việc này làm giá trị của hàm số gần đúng nhất để mỗi khi có một dữ liệu mới chúng ta có thể tính được nhãn (label) tương ứng của nó \nví dụ : Trong nhận dạng khuân mặt. ta có một mảng dữ liệu gồm nhiều ảnh của nhiều người khác nhau mỗi người lại có vài tấm ảnh chụp ở những vị trí khác nhau. Chúng ta đưa những bức ảnh này vào trong một thuật toán và chỉ cho nó biết mỗi bức ảnh tương ứng với tên là gì gì. Sau đó thuật toán sẽ tạo ra một mô hình (model) tức là một hàm số có đầu vào (x) là một bức ảnh và đầu ra (y) là một cái tên. Khi ta đưa vào một bức ảnh mà mô hình (model) đó chưa thấy bao giờ nó sẽ dự đoán (predict) bức ảnh đó là ai.\nví dụ khác: Chúng ta muốn xây dựng một hệ thống dự đoán thu nhập của một người, dựa trên những dữ liệu khác nhau như độ tuổi, trình độ học vấn, vị trí …vv..v. Để làm điều đó chúng ta cần tạo ra một cơ sở dữ liệu của người đó thật chi tiết và dán nhãn cho nó. Làm được điều này chúng ta đã nói với thuật toán của chúng ta cần tham số gì để hiểu thu nhập tương ứng với cái gì. Dựa vào việc lập biểu đồ ánh xạ (mapping) tương ứng, thuật toán sẽ học làm cách nào để tính toán thu nhập của một người sử dụng những tham số đã được cho trước.\nHọc không giám sát( unsupervised learning)  là thuật toán đề cập đến quá trình xây dựng máy tự học (ML) mà không dựa trên những dữ liệu được dán nhãn, chúng ta sẽ không biết được đầu ra(output) hay nhãn(label) tương ứng cho dữ liệu đầu vào(input). Trong một vài ý nghĩa thì nó là những thứ ngược lại với những thứ ta vừa nói ở trên. Vì không có những nhãn tương ứng đã được biết trước, bạn cần phân tích những dữ liệu đầu vào. Ví dụ, Chúng ta cần xây dựng một hệ thống mà trong đó chúng ta phải tách một tập hợp các dữ liệu thành các nhóm (Clustering datas) khác nhau. Cái khó ở đây là chúng ta không biết chính xác các điều kiện để tách dữ liệu. Vì thế một thuật toán học tập không giám sát cần tách dự liệu đã cho thành một số của các nhóm theo cách tốt nhất có thể.\nPhân nhóm dữ liệu (Clustering data): Chúng ta phải phân nhóm toàn bộ dữ liệu đầu vào (input) thành các nhóm dựa trên sự liên quan giữa các dữ liệu đã có trong mỗi nhóm. Vd: Phân nhóm khách hàng dựa vào hành vi mua hàng\nTổng hợp dữ liệu ( Association Data): Là bài toán khi chúng ta cần tìm ra một quy luật dựa trên dữ liệu đầu vào , hoặc dữ liệu cho trước (input). Vd: Những khách hàng nam mua quần áo thường có xu hướng mua them đồng hồ, bóp hay thắt lưng. Những khách hàng xem phim Avenger thường thích các phim hành động. Dựa vào đó chúng ta tạo ra một hệ thống gợi ý khách hàng ( Recommend System).\nTúm lại học không giám sát là khi chúng ta chỉ có dữ liệu đầu vào (input) x mà không biến nhãn y tương ứng cho nó.\nPhân loại là gì?\nTrong chương này chúng ta sẽ thạo luận về kỹ thuật phân loại không giám sát. Quá trình phân loại là một kỹ thuật trong đó chúng ta phân loại dữ liệu thành các lớp nhất định. Trong quá trình phân loại, Chúng ta xắp xếp dữ liệu vào trong một số cố định của một thể loại xác định để nó có thể sử dụng một cách hiệu quả nhất.\nTrong lĩnh vực máy học(machine learning) ,phân loại (classification) giải quyết vấn đề nhận diện và phân loại danh mục cho một dữ liệu mới. Chúng ta xây dựng một mẫu phân loại ( classificationmodel) dựa trên việc huấn luyện tập dữ liệu chứa dữ liệu và những vấn đề nguyên bản được dán nhãn. Ví dụ, chúng ta muốn kiểm tra không biết hình ảnh được nhập có chứa mặt của người hay không . Chúng ta phải xây dựng trạm dữ liệu (dataset) chứa 2 lớp nguyên bản (classes corresponding) chứa: Face và no-face. Sau đó chúng ta phải huấn luyện cho mẫu (model) dựa trên nhũng ví dụ mà chúng ta có, những nguyên mẫu (models) này sau đó được sử dụng để suy luận.\nMột hệ thống phân loại tốt là nó có thể dễ dàng tìm và trả lại dữ liệu. Nó được sử dụng rộng rãi trong việc nhận diện khuôn mặt, kiểm tra spam, những máy móc được khuyên dùng vv..vv. Thuật toán phân loại dữ liệu sẽ đưa ra các tiêu chí phù hợp để phân tích dữ liệu được đưa vào và số lượng lớp.\nChúng ta cần chuẩn bị một lượng lớn và đầy đủ các ví dụ để có thể dự đoán. Nếu không đủ các ví dụ thì thuật toán sẽ rất khó trong việc xắp xếp dữ liệu. điều này cũng giống như nó làm việc trên những cơ sở dữ liệu không xác định .\nTiền xử lý dữ liệu( Preprocessing data)\nChúng ta xử lý rất nhiều dữ liệu thô trong thế giới thực. Những thuật toán của máy tự học cần có được dữ liệu đã được định dạng cơ bản trước khi bắt đâu quá trình luyện tập. Để chuẩn bị dữ liệu nhập cho máy tính huấn luyện dữ liệu chúng ta phải xử lý dữ liệu thô và chuyển dổi nó vào định dạng chính xác chúng ta cần. Hãy xem làm thế nào với python.\nTạo một file Python mới và import các package sau:\nimport numpy as np\nfrom sklearn import preprocessing\n \u0026nbsp;\ndefine sampe data :\ninput_data = np.array([\n[5.1, -2.9, 3.3],\n[-1.2, 7.8, -6.1],\n[3.9, 0.4, 2.1],\n[7.3, -9.9, -4.5]])\n Chúng ta cần nói về vài kỹ thuật xử lý dữ liệu thô. Hãy bắt đầu với binaraization:\nBinarization Mean removal Scaling Normalization  Binarization\nCách xử lý này được sử dụng khi chúng ta muốn biến đổi những giá trị số thành giá trị đúng và sai (1,0). Hãy sử dụng hàm có sẵn để nhị phân( binarize ) dữ liệu được nhập vào,ở đây giá trị ngưỡng ( threshold value) bằng 2.1 .\ngiải thích 1 chút về giá trị ngưỡng : Ví dụ thang điểm đánh giá học sinh là từ 1 đến 10.\u0026nbsp;Trong một tập hợp gồm 40 học sinh của 1 lớp, người ta muốn phân lọai ra hai miền, miền thứ nhất bao gồm các học sinh đạt yêu cầu và miền thứ hai gồm các học sinh không đạt.\u0026nbsp;Trong tình huống đó người ta dùng giá trị 5 (điểm) như là một ngưỡng (threshold) để phân loại học sinh.Giá trị ngưỡng thường được xác định dựa vào những điểm đặc biệt (ví dụ ở trung bình), dựa vào kinh nghiệm khảo sát.\n\u0026nbsp;\nThêm đoạn code sau vào file Python đã tạo:\n#Binarize data\ndata_binarized =\npreprocessing.Binarizer(threshold=2.1).transform(input_data)\nprint(\"\\nBinarized data:\\n\", data_binarized)\n Nếu chạy đoạn code bên trên bạn sẽ thấy kết quả được đưa ra như sau:\nBinarized data:\n[[ 1. 0. 1.]\n[ 0. 1. 0.]\n[ 1. 0. 0.]\n[ 1. 0. 0.]]\n Giống như chúng ta đã thấy , tất cả các giá trị lớn hơn 2.1 sẽ trở thành 1 còn lại sẽ thành 0.\nMean Removal ( Chuẩn hóa dữ liệu - standardization) Loại bỏ giá trị trung bình (Removing the mean) là phương pháp xử lý sơ cấp thường được sử dụng trong máy tự học. Nó thường hữu dụng trong việc bỏ giá trị trung bình khỏi vector của chúng ta, sao cho mỗi toán tử ở giữa số 0. Chúng ta làm điều này để loại bỏ bias từ vector chính.\nCode: # Print mean and standard deviation\nprint(\"\\nBEFORE:\")\nprint(\"Mean =\", input_data.mean(axis=0))\nprint(\"Std deviation =\", input_data.std(axis=0))\n Dòng đầu tiên hiển thị độ lệch trung bình và dòng 2 là lệch chuẩn của dữ liệu đầu vào. Loại bỏ giá trị trung bình bằng đoạn code sau :\n# Remove mean\ndata_scaled = preprocessing.scale(input_data)\nprint(\"\\nAFTER:\")\nprint(\"Mean =\", data_scaled.mean(axis=0))# tính giá trị trung bình mỗi cột\nprint(\"Std deviation =\", data_scaled.std(axis=0))# tính giá trị phương sai mỗi cột\n Nếu chúng ta chạy đoạn code trên thì chúng ta sẽ có kết quả như sau ở Terminal:\nBEFORE:\nMean = [ 3.775 -1.15 -1.3 ]\nStd deviation = [ 3.12039661 6.36651396 4.0620192 ]\nAFTER:\nMean = [ 1.11022302e-16 0.00000000e+00 2.77555756e-17]\nStd deviation = [ 1. 1. 1.]\n Từ những giá trị ta hiển thị ra ta thấy giá trị trung bình rát gần với 0 và độ lệch chuẩn là 1.\nMean và std devation lần lượt là vector kỳ vọng và phương sai của toàn bộ dữ liệu training.\nScaling (tỉ lệ dữ liệu)\nTrong vector chính của chúng ta, giá trị của mỗi thuộc tính có thể chứa nhiều giá trị ngẫu nhiên khác nhau. Vì thế điều này sẽ làm ảnh hưởng tới độ chính xác của các thuật toán. Chính vị vậy chúng ta phải tiến hành điều chỉnh dữ liệu để các thuộc tính cùng có chung một tỷ lệ (data scaling). Và thường các thuộc tính có giá trị trong khoảng 0-1.\nThêm đoạn code sau vào file Python bên trên:\n# Min max scaling\ndata_scaler_minmax = preprocessing.MinMaxScaler(feature_range=(0, 1))\ndata_scaled_minmax = data_scaler_minmax.fit_transform(input_data)\nprint(\"\\nMin max scaled data:\\n\", data_scaled_minmax)\n Nếu đoạn code trên được chạy bạn sẽ thấy đoạn sau được in ra trong Terminal:\nMin max scaled data:\n[[ 0.74117647 0.39548023 1. ]\n[ 0. 1. 0. ]\n[ 0.6 0.5819209 0.87234043]\n[ 1. 0. 0.17021277]]\n Mỗi hàng được chia tỉ lệ sao cho giá trị tối đa là 1 và tất các các giá trị khác đều có liên quan đến giá trị này.\nNormalization (Bình thường(đơn giản) hóa dữ liệu)\nBình thường hóa dữ liệu là điều chỉnh tỉ lệ dữ liệu sao cho mỗi thể hiện đều cho độ dài là 1. Trong Máy Học, chúng ta sử dụng rất nhiều kiểu mẫu đơn giản hóa. Một vài hình thức phổ biến nhất của đơn giản hóa là đặt mục tiêu để điều chỉnh dữ liệu thành tổng 1. L1 normalization, trong đó đề cập đếnđộ lệch tuyệt đối nhỏ nhất (Least apsolute Deviations) nó hoạt động theo cách tổng các giá trị tuyệt đối trên mỗi hàng là 1. L2 Normalization , là cách làm bình phương tối thiểu, được làm bằng cách làm cho tổng bình phương thành 1. Nói chung, L1 Normalization là kỹ thuật được xem làm mạnh mẽ hơn L2 Normalization. L1 normalization được xem là mạnh mẽ hơn vì nó ít có ngoại lệ trong dữ liệu. Rất nhiều lần, dữ liệu thường có xu thế chứa những ngoại lệ và chúng ta không biết làm gì với nó. Chúng ta muốn sử dụng những kỹ thuật an toàn và có ảnh hưởng tốt bỏ qua những ngoại lệ đó trong tính toán. Nếu chúng ta phải giải quyết vấn đề mà phần ngoại lệ là quan trọng, thì khi đó L2 Normalization trở thành lựa chọn tốt hơn.\nThêm dòng sau vào file Python có sẵn :\n# Normalize data\ndata_normalized_l1 = preprocessing.normalize(input_data, norm='l1')\ndata_normalized_l2 = preprocessing.normalize(input_data, norm='l2')\nprint(\"\\nL1 normalized data:\\n\", data_normalized_l1)\nprint(\"\\nL2 normalized data:\\n\", data_normalized_l2)\n Terminal output:\nL1 normalized data:\n[[ 0.45132743 -0.25663717 0.2920354 ]\n[-0.0794702 0.51655629 -0.40397351]\n[ 0.609375 0.0625 0.328125 ]\n[ 0.33640553 -0.4562212 -0.20737327]]\nL2 normalized data:\n[[ 0.75765788 -0.43082507 0.49024922]\n[-0.12030718 0.78199664 -0.61156148]\n[ 0.87690281 0.08993875 0.47217844]\n[ 0.55734935 -0.75585734 -0.34357152]]\n \u0026nbsp;\n\u0026nbsp;\nLabel encoding ( Mã hóa nhãn )\nKhi thực hiện phân loại chúng ta thường xử lý rất nhiều nhãn dán. Những nhãn này có thể trong hình thức của từ, số hoặc vài thứ khác. Các functions máy học trong sklearn phân tích chúng dưới dạng số. Vậy nếu chúng ta đã có những số, sau đó chúng ta có thể dùng chúng một cách trực tiếp để bắt đầu training, Nhưng nó không phải cách dùng trong trường hợp này.\nTrong thế giới thực, Nhãn dán được biết dưới dạng chữ, bởi chữ là những thứ con người có thể đọc. Chúng ta ghi nhãn những dữ liệu được training bằng chữ đểmapping có thể theo dõi được. Để chuyển đổi các nhãn dưới dạng chữ thành số. chúng ta sử dụng một dạng mã hóa Label (label encoder).  Label encoding là quá trình biến đổi labels từ dạng chữ sang dạng số. Nó là cách kích hoạt thuật toán để mổ xẻ dữ liệu của chúng ta:\nTạo một file Python mới và import numpy,sklearn packages:\nImport numpy as np\nForm sklearn import preprocessing\n Định danh một vài labels:\n# Sample input_labels\ninput_labels=[‘red’, ‘black’, ‘red’, ‘green’, ‘black’, ‘yellow’, ‘white’]\n Tạo một mã hóa labels object và luyện tập cho nó:\n# create label encoder and fit the labels\nencoder = preprocessing.LabelEncoder()\nencoder.fit(input_labels)\n In những ánh xạ giữa từ và số:\n# print the mapping\nprint(“\\nLabel mapping:”)\nfor i, item in enumerate(encoder.classes_):\nprint(item,’-’,i)\n Ta hãy xóa một vài nhãn ngẫu nhiên để xem cách mã hóa hoạt động thế nào:\n# encode a set ò labels using encoder\ntest_labels = [‘green’, ‘red’, ‘black’]\nencoded_values=encoder.transform(test_labels)\nprint(“\\n Labels=”,test_labels)\nprint(“Encoded values=”,list(encoded_values))\n Bây giờ thì giải mã một vài số ngẫu nhiêu:\n# Decode a set of values using the encoder\nencoded_values=[3,0,4,1]\ndecoded_list= encoder.inverse_transform(encoded_values)\nprint(“\\nEncoded values=”,encoded_values)\nprint(“\\nDecoded labels=”,list(decoded_list))\n Rồi giờ thì chạy đoạn code trên với pycham. Kết quả sẽ giống thế này:\nPS D:\\AI Python\u0026gt; \u0026amp; C:/WPy64-3720/python-3.7.2.amd64/python.exe \"d:/AI Python/Test.py\"\n\u0026nbsp;\nLabel mapping:\nblack --\u0026gt; 0\ngreen --\u0026gt; 1\nred --\u0026gt; 2\nwhite --\u0026gt; 3\nyellow --\u0026gt; 4\n\u0026nbsp;\nLabels = ['green', 'red', 'black']\nEncoded values = [1, 2, 0]\n\u0026nbsp;\nEncoded values = [3, 0, 4, 1]\nDecoded labels = ['white', 'black', 'yellow', 'green']\n\u0026nbsp;\nPhân loại hồi quy lý luận( Logistic Regression classifier)\nLý luận hồi quy là kỹ thuật sử dụng để giải thích mối quan hệ giữa biến đầu vào và biến đầu ra. Các biến đầu vào được coi là độc lập và các biến đầu ra được coi là biến phụ thuộc. Biến phụ thuộc chỉ có thể lấy một giá trị cố định của các giá trị đầu ra. Các giá trị này tương ứng với các lớp của phần phân loại.\nNhiệu vụ của chúng ta là định danh ( nhận định) mối quan hệ giữa các biến độc lập và phụ thuộc bằng cách ước tính xác xuất sửa dụng một hàm logistic. Hàm logistic này là một đường cong sigmoid(sigmoid curve)  nó dùng để xây dựng một hàm cùng với những tham số khác nhau. Nó rất giống với phân tích Linear model,cách mà chúng ta cố gắng đặt một dòng vào một đống điểm để giảm thiểu lỗi. Thay vì sử dụng hồi quy tuyến tính ( linear regression), chúng ta sử dụng hồi quy lý luận( logistic regression). Hồi quy lý luận về cơ bản không phải là một kỹ thuật phân loại ( not a classification technique), nhưng chúng ta sử dụng nó theo cách này để tạo điều kiện cho phân loại. Nó được sử dụng rất thường xuyên trong máy học bởi nó rất cơ bản và đơn giản. Hãy xem làm thế nào để xây dựng một hàm phân loại xử dụng Hồi quy ly luận. Hãy chắc chắn bạn có Tkinter package được cài trong hệ thống trước khi chúng ta bắt đầu. Nếu bạn không có bạn có thể tìm nó ở : https://docs.python.org/2/library/tkinter.html.\nTạo một file Python mới và import các package . Chúng ta sẽ import một hàm từ file utilities.py. Chúng ta sẽ xem sét hàm ở trong đó sau, và bay giờ thì import nó vào nào:\nimport numpy as np\nfrom sklearn import linear_model\nform utilities import visualize_classifier\n \u0026nbsp;\nDefine một vài dữ liệu đầu vào với vectors 2 chiều và dán nhãn tương ứng:\n# Definesample input data\nX = np.array([[3.1, 7.2], [4, 6.7], [2.9, 8], [5.1, 4.5], [6, 5], [5.6, 5],\n[3.3, 0.4], [3.9, 0.9], [2.8, 1], [0.5, 3.4], [1, 4], [0.6, 4.9]])\ny = np.array([0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3])\n Chúng ta sẽ train bộ phân loại bằng cách sử dụng nhãn dữ liệu. Giờ thì tạo một Lý luận hồi quy object:\n# create the logistic regression classifier\nclassifier = linear_model.LogisticRegression(solver=’liblinear’,C=1)\n Huấn luyện bộ phân loại sử dụng dữ liệu chúng ta đã định nghĩa ban đầu:\n# Train the classifier\nclassifier.fit(X,y)\n Nhắc lại sự thực hiện phân loại bằng cách nhìn vào ranh giới của các lớp:\n# Visualize the performance of the classifier\nvisualize_classifier(classifier, X, y)\n Chúng ta cần định nghĩa hàm này trước khi chúng ta dùng nó. Chúng ta sẽ sử dụng nhiều lần trong chapter này vị vậy tốt nhất là chúng ta định nghĩa nó trong một file và import hàm đó vào. Hàm này được đưa vào trong file utilities.py .\nTạo file Python đặt tên là utilities.py.\nImport numpy as np\nImport matplotlib.pyplot as plt\ndef visualize_classifier(classifier,X,y):\n# ĐỊnh nghĩa gí trị lớn nhất và nhỏ nhất cho X và y\n# nó sẽ được sử dụng trong một lưới\nmin_x,max_x=X[:,0].min() -1.0,X[:,0].max()+1.0\nmin_y,max_y=X[:,1].min()-1.0,X[:,1].max()+1.0\n Chúng ta đã xác định giá trị nhỏ nhất và lớn nhất của các hướng X và Y sẽ được sử dụng trong lưới của chúng ta . Lưới này về cơ bản là một tập hợp các giá trị được sử dụng để dánh giá các hàm, để chúng ta có thể hình dung được ranh giới của các lớp . Xác định kích thước bước cho lưới và tạo cho nó các giá trị tối thiểu và tối đa:\n\u0026nbsp;\n# Xác định kích thước bước cho lưới( mesh_stop_size=0.01\n# Define lưới cho các giá trị X và Y\nx_vals,y_vals=np.meshgrid(np.arange(min_x,max_x,mesh_step_size),np.arange(min_y,max_y,mesh_step_size))\n Chạy bộ phân loại trên tất cả các điểm của lưới\n# Chạy bộ phân loại trên lưới\noutput=classifier.predict(np.c_[x_vals,ravel(),y_vals.ravel()])\n# Xếp loại array đầu ra\noutput= ouput.reshape(x_vals.shape)\n Tạo một figure( giao diện đồ họa trong matplot), chọn một màu và đổ lên trên các điểm:\n# tạo một plot figure\nplt.figure()\n#Chọn màu cho plot\nplt.pcolormesh(x_vals,y_vals,output,cmap=plt.cm.gray)\n# Đổ màu các điểm huấn luyện trên plot\nplt.scatter(X[:,0],X[:,1],c=y,s=75,edgecolors=’black’,linewidth=1,cmap=plt.cm.Paired)\n# Chỉ ra các điểm viền bao quanh của plots sử dụng giá trị nhỏ nhất và lớn nhất, them tick marks và hiển thị figure # Điểm viền của plot\nplt.xlim(x_vals.min(),x_vals.max())\nplt.ylim(y_vals.min(),y_vals.max())\n# Chỉ địch đánh dấu trên trục X và Y\nplt.xticks((np.arange(int(X[:,0].min()-1),int(X[:,0].max()+1),1.0)))\nplt.yticks((np.arange(int(X[:,1].min()-1),int(X[:,1].max()+1,1.0)))\nplt.show();\n \u0026nbsp;\n\u0026nbsp;\nOk chạy xong rồi thì ta sẽ có hình như sau Ok giờ thay đổi giá trị C thành 100 trong object classifier classifier = linear_model.LogisticRegression(solver=’liblinear’,C=100)\nLý do giá trị C áp dụng loại bỏ phân loại sai, nên thuật toán sẽ phân loại tốt hơn để training dữ liệu. Bạn nên cẩn thận với tham số này, bởi vì nếu bạn tang quá nhiều nó sẽ không phù hợp với training dât, và nó sẽ không phù hợp.\nSau khi thay đổi tham số C thành 100 chạy thử lại file logistic_regression.py ta sẽ có kết quả như sau:\n\u0026nbsp;\nNếu so với figure phía trên bạn sẽ thấy đường viền xung quanh có vẻ nhìn tốt hơn.\nNaïve Bayes classifier\n\u0026nbsp;\nNaïve Bayes là một thuật toán để xây dựng phân loại sử dụng định lý Bayes. Định lý Bayes là một kết quả của lý thuyết xác suất. Định lý Bayes cho phép tính xác suất xảy ra của một sự kiện ngẫu nhiên Akhi biến sự kiện liên quan B đã xảy ra. Xác xuất này được ký hiệu là P(A|B) và đọc là: xác suất của A nếu có B. Đại lượng này được gọi là xác suất điều kiện hay xác suất hậu nghiệm vì nó được rút ra từ giá trị được cho của B hoặc phụ thuộc vào giá trị đó:\nTheo định lý Bayes, xác suất xảy ra A khi biết B sẽ phụ thuộc vào 3 yếu tố:\nXác xuất xẩy ra A của riêng nó ,không quan tâm đến B. Ký hiệu là P(A) và đọc là xác suất của A. Đây được gọi là xác suất biên duyên hay xác suất tiên nghiệm (prior). gọi là tiên nghiệm theo nghĩa rằng nó không quan tâm đến bất kỳ thông tin nào về B Xác suất xảy ra B của riêng nó, không quan tâm đến A. Ký hiệu là P(B) đọc là : xác suất của B. Đại lượng này gọi là hằng số chuẩn hóa (normalizing constant), vì nó luôn giống nhau, không phụ thuộc vào sự kiện A đang muốn biết. Xác suất xảy ra B khi biết A xảy ra . Ký hiệu là P(B|A) và đọc là “xác suất của B nếu có A”. Đại lượng này gọi là khả năng (likehood) xảy ra B khi biết A đã xyar ra. Chú ý không nhầm lẫn giữa khả năng xảy ra B khi biết A và xác suất xảy ra A khi biết B.  Khi biết ba đại lượng ày, xác suất của A khi biết B cho bởi công thức:\n\u0026nbsp;\nĐọc them tại wiki https://vi.wikipedia.org/wiki/%C4%90%E1%BB%8Bnh_l%C3%BD_Bayes\nChúng ta xây dựng một bộ phân loại NaiveBayes bằng cách gắn nhãn dán cho class cho từng trường hợp vấn đề. Những trường hợp vấn đề được biểu diễn như những vector giá trị nhiều chiều. Sau khi tính toán xác suất chuẩn hóa( P(B) ) cho một số giả thuyết khác nhau bạn có thể chọn giả thuyết có xác suất cao nhất. Đây là giả thuyết có thể thể xảy ra tối đa và có thể là chính thức được gọi là giả thuyết tối đa (MAP). Ta có công thức : MAP(B)=max(P(A|B)*P(B)).\nGiả định ở đây là giá trị của bất kỳ đặc tính được đưa vào là độc lập với giá trị của các đặc tình khác. Đây được gọi là giả định độc lập.\nXác suất lớp, chúng ta có thể thấy một tính năng giả định ảnh hưởng thế nào bất kể ảnh hưởng của nó đến các tính năng khác. Ví dụ : xét một con vật. nó có thể được coi là một con báo nếu nó lốm đốm, có 4 chân và có 1 cái đuôi, có thể chạy khoảng 70 dặm/giờ. Phân loại Naïve Bayes xem xét các tính năng độc lập để cho ra kết quả. Kết quả chỉ ra là con vật đó chính là một con báo. Chúng ta không quan tâm xem xét đến mối quan hệ có thể xảy ra giữa sự lốm đốm của da, số chân, số đuôi và tốc độ di chuyển. Bây giờ thì xây dựng một bộ phân loại Naïve Bayes bằng python.\nTạo 1 file python và import đống package sau:\nimport numpyas np\nimport matplotlib.pyplot as plt\nfrom sklearn.Naive_bayes import GaussianNB\nform sklearn import cross_validation\nform utilities import visiualize_classifier\n Chúng ta sử dụng một file txt giống như là một dữ liệu nguồn, file này chứa các giá trị được cách nhau bởi dấu phẩy trong mỗi dòng. File txt có dạng như sau :\n2.18,0.57,04.13,5.12,19.87,1.95,24.02,-0.8,31.18,1.03,04.59,5.74,18.25,1.3,23.91,-0.68,3\nRầu giờ khai báo một biến và đọc file txt này với numpy\ninput_file = ‘data_multiva_nb.txt’\ndata=np.loadtxt(input_file,delimiter=’,’)\nX,y=data[:,:-1],data[:,1]\n Tạo một instance của Class phân loại Naïve bayes. Chúng ta xử dụng Gaussian Naïve Bayes ở đây. Trong dạng phân loại này chúng ta giả định giá trị liên quan trong mỗi lớp theo Gaussian và train phân loại (train the classifier) với dữ liệu đã cho:\nclassifier= GaussianNB()\nclassifier.fit(X,y)\n (Naive Bayes có thể được mở rộng thành các thuộc tính có giá trị thực, phổ biến nhất bằng cách giả sử phân phối Gaussian.\nPhần mở rộng này của Naive Bayes được gọi là Gaussian Naive Bayes. Các hàm khác có thể được sử dụng để ước tính phân phối dữ liệu, nhưng Gaussian (hoặc phân phối chuẩn) là dễ nhất để làm việc vì bạn chỉ cần ước tính giá trị trung bình và độ lệch chuẩn từ dữ liệu đã train của bạn.)\nChạy classifier phân loại dữ liệu đã được train và dự đoán đầu ra:\ny_pred=classifier.predict(X)\nHãy tính độ chính xác của cách phân loại bằng cách so sánh giá trị dự đoán cùng với một nhãn dán thực, và sau đó thể hiện nó ra bằng đồ thị\naccuracy=100.0*(y=y_pred).sum()/X.shape[0]\nprint(“Accuracy of Naïve Bayes classifier=”,round(accuracy,2),”%”)\n#visualize\nvisualize_classifier(classifier,X,y)\n Console: Accuracy of Naive Bayes classifier = 99.75 $)\nCách dự đoán bằng phương thức predict cũng không phải là mạnh. Chúng ta cần phải thực hiện xác nhận chéo để chúng không sử dụng cùng một dữ liệu đã được train khi chúng ta test.\nChia dữ liệu đã được train và dữ liệu con để test. Giống như chỉ định bởi tham số test_size ở dòng code bên dưới, Chúng ta sẽ phân bổ chúng thành 80% để dành cho train và 20% dành cho test. Sau đó chúng ta train lại dữ liệu này với Naïve Bayes:\n# Split data into training and test data\nX_train, X_test, y_train, y_test = cross_validation.train_test_split(X, y,\ntest_size=0.2, random_state=3)\nclassifier_new = GaussianNB()\nclassifier_new.fit(X_train, y_train)\ny_test_pred = classifier_new.predict(X_test)\n Giờ tính lại độ chính xác của phân loại và biểu thị trên biểu đồ \u0026nbsp;\n# compute accuracy of the classifier\naccuracy = 100.0 * (y_test == y_test_pred).sum() / X_test.shape[0]\nprint(\"Accuracy of the new classifier =\", round(accuracy, 2), \"%\")\n# Visualize the performance of the classifier\nvisualize_classifier(classifier_new, X_test, y_test)\n \u0026nbsp;\nPrinted out : (Accuracy of Naive Bayes classifier = 99.75 $\nAccuracy of the new classifier = 100.0 %)\nvà giờ thì sử dụng những hàm có sẵn để tính độ chính xác , xác suất và gọi lại giá trị gấp 3 lần num_folds = 3\naccuracy_values = cross_validation.cross_val_score(classifier,\nX, y, scoring='accuracy', cv=num_folds)\nprint(\"Accuracy: \" + str(round(100*accuracy_values.mean(), 2)) + \"%\")\nprecision_values = cross_validation.cross_val_score(classifier,\nX, y, scoring='precision_weighted', cv=num_folds)\nprint(\"Precision: \" + str(round(100*precision_values.mean(), 2)) + \"%\")\nrecall_values = cross_validation.cross_val_score(classifier,\nX, y, scoring='recall_weighted', cv=num_folds)\nprint(\"Recall: \" + str(round(100*recall_values.mean(), 2)) + \"%\")\nf1_values = cross_validation.cross_val_score(classifier,\nX, y, scoring='f1_weighted', cv=num_folds)\nprint(\"F1: \" + str(round(100*f1_values.mean(), 2)) + \"%\")\n chạy tiếp đoạn code trên ta sẽ có kết quả như sau Accuracy: 99.75%\nPrecision: 99.76%\nRecall: 99.75%\nF1: 99.75%\n Confusion matrix (Ma trận hỗn loạn)\nMột ma trận hỗn loạn là một biểu đồ hoặc một bảng dùng đề biểu diễu một lớp phân loại. Nó thường được sử dụng để phân tích từ một tập dữ liệu thử nghiệm (test dataset) nơi mà ground truth đã được biết trước. Ở đây ta có một khái niệm “Ground Truth” về cơ bản ground truth là nhãn/đầu rathực sự của các điểm trong test dataset, khái niệm này được dùng nhiều trong ML. Chúng ta so sánh mỗi class cùng với nhau và sẽ nhìn thấy bao nhiêu mẫu thử đã phân loại sai. Trong suốt quá trình xây dựng bảng này, chúng ta sẽ đi qua một vài key metrics (từ khóa chính) những thứ vô cùng quan trọng trong lĩnh vực ML. Chúng ta sẽ xem xét mã nhị phân phân loại nơi mà đầu ra chỉ là 0 hoặc 1:\nTrue positives TP: Đây là mẫu thử mà chúng ta dự đoán kết quả sẽ là 1 ở đầu ra và kết quả thực sự là 1 True negatives TN: Những mẫu thử mà chúng ta dự đoán là 0 (predict 0) ở đầu ra và kết quả thực sự là 0 False positives FP: Đây là mẫu thử mà chúng ta dự đoán giá trị là 1 ở đầu ra nhưng kết quả thực sự là 0. Cái này còn được biết đến là Type I error. False negatives FN: Đây là mẫu thử mà chúng ta dự đoán giá trị là 0 ở đầu ra nhưng kết quả thực sự là 1. Cái này còn được gọi là Type II error.  \u0026nbsp;\nTrong bài toán phân loại sau khi đã xử lý dữ liệu và đưa nó vào mô hình ( preprogcessand model) thì đầu ra của mô hình này sẽ là một tập vector xác xuất tương ứng của từng lớp. Ta có thể đánh giá mức độ chính xác của mô thinh thông qua chỉ số về độ chính xác (accuracy). vd ta có một bài toán chuẩn đoán hành lý mang bom trong 100 túi hành lý. ví dụ trong 100 túi đó có 1 túi mang bom mà mô hình của chúng ta dự đoán 100 hành lý đều không có bom thì độ chính xác của mô hình này là 99% siêu cao phải ko? nhưng với 1% là đủ tèo rồi nên chúng ta cần có một cách giải khác đó là confusion matrix. Confusion Matrix là một phương pháp đánh giá kết quả của những bài toán phân loại, với việc xem xét cả những chỉ số về độ chính xác và độ bao quát của các dự đoán cho từng lớp.\nTùy thuộc vào những vấn để gặp phải, chúng ta có thể tối ưu thuật toán của mình để giám tỷ lệ gặp phải FP và FN. Ví dụ, trong một hệ thống nhận dạng sinh trắc học (biometric identification), Chúng ta cần tránh gặp phải FP, điều này rất quan trọng vì có thể gặp phải những người xấu khai thác thông tin cá nhân. Từ 4 chỉ số trên ta có 2 con số để đánh giá mức độ tin cậy của một mô hình :\nPrecision: Trong tất cả các dự đoán Positive được đưa ra bao nhiêu dự đoán là chính xác? Chỉ số này được tính theo công thức :  Recall: Trong tất cả các trường hợp Positive, bao nhiêu trường hợp đã được dự đoán chính xác? Chỉ số này được tính theo công thức :   Quay trở lại bài toán tìm hành lý . Giả sử ta có 1 tập vector dữ liệu gồm 100 dữ liệu hành lý với 99 hành lý ok ( Negative) và 10 hành lý có vấn đề ( Positive) và mô hình của chúng ta dự đoán 2/10 hành lý có vấn đề tức là đưa ra dự đoán 2 hành lý có vấn đề thì cả 2 đều chính xác. Như vậy chỉ số Precision khi dự đoán lớp hành lý có vấn đề là 1. Tuy nhiên 8/10 hành lý còn lại bị bỏ qua nên chỉ số recall chỉ là 0.2. Để đánh giá độ tin cậy chung của mô hình người ta kết hợp 2 chỉ số Precision và Recall thành một chỉ số duy nhất là F-Score : ta có công thức : Một mô hình có chỉ số F-score cao chỉ khi cả 2 chỉ số Precision và Recall để cao. Một trong 2 chỉ số này thấp đều sẽ kéo điểm F-score xuống. Trường hợp xấu nhất khi 1 trong hai chỉ số Precison và Recall bằng 0 sẽ kéo điểm F-score về 0. Trường hợp tốt nhất khi cả điểm chỉ số đều đạt giá trị bằng 1, khi đó điểm F-score sẽ là 1.\nQua việc sử dụng chỉ số F-score, ta đã có một thước đo đáng tin cậy về hiệu năng của mô hình trong các bài toán phân loại, đặc biệt khi dữ liệu về một lớp lớn hơn gấp nhiều lần so với dữ liệu về lớp còn lại (Nguồn confusion matrix lấy từ towardsdatascience Understanding Confusion Matrix dịch bởi bạn Nguyễn Hoàng Nam )\n\u0026nbsp;\nOkey giờ thì tạo thử một ma trận hỗn loạn (confusion matrix).Rầu bắt đầu tạo một file Python mới và import các package cần thiết:\nimport numpy as np\nimport matplotlib.pylot as pit\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n# Định nghĩa một vài nhãn mẫu thử chokết quả thực sự và dự đoán kết quả đầu ra:\ntrue_label=[2,0,0,2,4,4,1,0,3,3,3]\npred_label=[2,1,0,2,4,3,1,0,1,3,3]\n# Tạo một confusion matrix\nconfusion_mat=confusion_matrix(true_label,pred_label]\n# In confusion matrix ra màn hình\nplt.imshow(confusion_mat,interpolation=’nearest’,cmap=plt.cm.gray)\nplt.title(‘confusion matrix’)\nplt.colorbar()\nticks=np.arange(5)\nplt.xticks(ticks,ticks)\nplt.yticks(ticks,ticks)\nplt.ylabel(‘True labels’)\npt.xlabel(‘Predict labels’)\nplt.show()\n Chạy code trên với PyCharm ta có hình bên trên\nTrên hình bên trên, biến ticks đề cập đến sự phân hóa của các lớp. trong trường hợp này chúng ta dùng 5 nhãn riêng biệt. Màu trắng thể hiện giá trị cao hơn, trong khi màu đen thể hiện giá trị thấp hơn . Trong trường hợp lý tưởng thì tất cả các ô sẽ là màu trắng và các ô còn lại sẽ là màu đen, nó thể hiện độ chính xác là 100%.\nGiờ thì in báo cáo phân loại ra:\n# Classification report\ntarget =[‘Class-0’,’Class-1’,’Class-2’,’Class-3’,’Class-4’]\nprint(‘\\n’,classification_report(true_label,pred_label,target_names=target))\n \u0026nbsp;\nKết quả in ra ở Terminal:\nprecisionrecall f1-score support\nClass-0 1.00 0.67 0.80 3\nClass-1 0.33 1.00 0.50 1\nClass-2 1.00 1.00 1.00 2\nClass-3 0.67 0.67 0.67 3\nClass-4 1.00 0.50 0.67 2\nmicroavg 0.73 0.73 0.73 11\nmacroavg 0.80 0.77 0.73 11\nweightedavg 0.85 0.73 0.75 11\n Support Vector Machines\nMột Support Vector Machine (SVM) là một kiểu phân loại sử dụng siêu mặt phẳng giữa các lớp. Một siêu mặt phẳng (hyperplane) mà có N-Chiều trên một đường. Đưa ra những dữ liệu đã được training và một vấn đề phân loại nhị phân . SVM là để tìm phương pháp tối ưu cho siêu mặt phẳng mà trên đó sẽ chia những dữ liệu được train thành 2 lớp. Nó dễ dàng mở rộng ra với vấn đề gặp lại với N-Lớp.\nHãy xem xét một vấn đề 2 chiều cùng với 2 lớp điểm. Cái đưa ra là 2D, chúng ta sẽ xem xét giữa các điểm và đường thẳng trong một mặt phẳng 2D, Cái này để dễ dàng diễn tả hơn là vector và siêu mặt phẳng trong một không gian nhiều chiều. Tất nhiên đây là một phiên bản cơ bản của cách phân loại SVM, nhưng nó rất quan trọng để hiểu nó và tưởng tượng ra nó trước khi chúng ta có thể áp dụng nó vào dữ liệu nhiều chiều.\nXem xét hình đồ thị dưới đây: ở đây có 2 lớp ( class0,class1) gồm những điểm mà chúng ta muốn tìm siêu mặt phẳng tối ưu để chia chúng thành 2 lớp. Nhưng làm sao chúng ta có thể định nghĩa là tối ưu ?Trên hình bên trên đường thẳng kẻ đậm là đường thẳng giới thiệu về siêu mặt phẳng. Bạn có thể vẽ nhiều đường thẳng để chia 2 lớp tập hợp 2 điểm nhưng đường thẳng kẻ đậm là đường thẳng phân chia tốt nhất, bởi nó chứa những điểm có khoảng cách đều nhất tới các điểm được phân chia. Những điểm chấm trên dòng kẻ chấm chấm được gọi là Support Vector. Những khoảng cách vuông góc giữa hai đường kẻ chấm được gọi là lề tối đa(maximum margin).\n\u0026nbsp;\nPhân loại dữ liệu Thu Nhập sử dụng SVM\nChúng ta sẽ xây dựng một class SVM để dự đoán mức thu nhập của một người dựa trên 14 thuộc tính. Thành công mong đợi ở dự án này là tìm ra mức thu nhập của người đó cao hơn hay thấp hơn 50.000$ một năm, do đó đây là một cách phân loại nhị phân ( cao hay thấp). Chúng ta sẽ xử dụng dữ liệu điều tra dân số có sẵn tại trang web https://archive.ics.uci.edu/ml/datasets/Census+Income. Một thứ cần chú ý dữ liệu ở đây là dữ liệu này là một datapoint nó là một hỗn hợp xáo trộn gồm chữ và số . Chúng ta không thể xử dụng dữ liệu này lập tức dưới dạng của nó được, bởi vì thuật toán không biết làm cách nào để xử lý dữ liệu chữ. Chúng ta cũng không thể convert mọi thứ sửa dụng mã hóa nhãn (label encoder) bởi vì những số ở đó có giá trị. Vì thế chúng ta cần xử dụng kết hợp giữa mã hóa nhãn và dữ liệu số thô để xây dựng một lớp phân loại hiệu quả nhất:\nTạo 1 file Python mới và import các package:\nimport numpy as npfrom sklearn import preprocessingfrom sklearn.svm import LinearSVCfrom sklearn.multiclass import OneVsOneClassifierfrom sklearn import model_selection# Chúng ta xử dụng file income_data.txt làm dữ liệu. file này chứa dữ liệu thu nhập chi tiết:input_file =\"data/income_data.txt\"# Theo thứ tự tải dữ liệu từ file, chúng ta cần xử lý nó trước vì vậy nên chúng ta sẽ cần chuẩn bị để phân loại. Chúng ta sẽ dùng 25000 điểm dữ liệu cho mỗi lớp:X=[]y=[]count_class1=0count_class2=0max_datapoints=25000# Mở file và bắt đầu đọc các dòngwith open(input_file,'r') as f:for line in f.readlines():if count_class1\u0026gt;=max_datapoints and count_class2\u0026gt;=max_datapoints:break;if '?' in line:continue# mỗi dòng được chia ra bằng dấu phẩy vì thế chúng ta cần chia nó một cách phù hợp. thành phần cuối cùng trong mỗi dòng đại diện cho nhãn. Dựa trên nhãn đó chúng ta sẽ chỉ định nó vào một lớp:data=line[:-1].split(', ')if data[-1]=='\u0026lt;=50K' and count_class1\u0026lt;max_datapoints:X.append(data)count_class1 +=1if data[-1]=='\u0026gt;50K' and count_class2\u0026lt;max_datapoints:X.append(data)count_class2 +=1# convert X list này dưới dạng numpy array chúng ta đã có dữ liệu đầu vào cho hàm sklearnX=np.array(X)# nếu có bất kỳ thuộc tính nào là string ( dữ liệu chữ), khi đó chúng ta cần mã hóa nó. Nếu dữ liệu là số chúng ta có thể giữ nó lại. Chú ý chúng ta kết thúc cùng với nhiều nhãn được mã hóa và chúng ta cần theo dõi tất cả chúng:label_encoder = []X_encoded = np.empty(X.shape)for i,item in enumerate(X[0]):if item.isdigit():X_encoded[:, i] = X[:, i]else:label_encoder.append(preprocessing.LabelEncoder())X_encoded[:, i] = label_encoder[-1].fit_transform(X[:, i])print(X[:, i])X = X_encoded[:, :-1].astype(int)y = X_encoded[:, -1].astype(int)Z=[[2,3,1],[4,5,1],[6,7,1]]Z=np.array(Z)D=Z[:,-1]#print(X[:,len(X[0])])for i,mitem in enumerate(label_encoder[-2].classes_):print(mitem,\"--\u0026gt;\",i)print(label_encoder[-1].transform(['\u0026lt;=50K']))# Tạo lớp phân loại SVM với một linear kernelclassifier=OneVsOneClassifier(LinearSVC(random_state=0))# train classifierclassifier.fit(X,y)# Thực hiện xác nhận chéo sử dụng cách chia 80/20 để training và testing, sau đó dự đoán kết quả đầu ra cho dữ liệu được training:# xác nhận chéoX_train, X_test, y_train, y_test = model_selection.train_test_split(X, y,test_size=0.2, random_state=5)classifier = OneVsOneClassifier(LinearSVC(random_state=0))classifier.fit(X_train, y_train)y_test_pred = classifier.predict(X_test)# Tính toán kết quả F1 cho phân loại :f1=model_selection.cross_val_score(classifier,X,y,scoring='f1_weighted',cv=2)print(\"Đẻ lần F1: \" + str(round(100*f1.mean(),2))+\"%\")# giờ thì classifier đã sẵn sang, hãy xem làm thế nào để lấy ngẫu nhiên một dữ liệu điểm đầu vào và dự đoán kết quả đầu ra. Định nghĩa một điểm data đầu vào như sau:# đoán dữ liệu đầu ra cho một datapoint test:input_data = ['36', 'Private', '215646', 'Some-college', '9', 'Married-civ-spouse','Prof-specialty', 'Husband', 'White', 'Male', '0', '0', '40','Vietnam']# Trước khi ta thực hiện dự đoán, chúng ta cần mã hóa dữ liệu này bằng cách sử dụng mã hóa nhãn mà chúng ta đã tạo từ trước:input_data_encoded = [-1] * len(input_data)count = 0for i, item in enumerate(input_data):if item.isdigit():input_data_encoded[i] = int(input_data[i])else:d=[input_data[i]]input_data_encoded[i] = int(label_encoder[count].transform(d))count += 1input_data_encoded=np.array(input_data_encoded)# Giờ thì chúng ta đã sẵn sang để dự đoán kết quả đầu ra sử dụng classifier:predict_classifier=classifier.predict([input_data_encoded])print(label_encoder[-1].inverse_transform(predict_classifier)[0])\n Kết quả in ra ở Terminal\nĐẻ lần F1: 73.23%\n\u0026lt;=50K\n Nếu bạn kiểm tra dữ liệu đó, bạn sẽ thấy nó gần giống với dữ liệu đã cho ở lớp thấp hơn 50k. Bạn có thể thay đổi kết quả của phép phân loại ( F1 score, độ chính xác,…) bằng cách xử dụng nhiều nhân khác nhau và thử kết hợp nhiều biến số.\nHồi quy là gì?\nHồi quy là quá trình xử lý dự đoán,ước tính mối quan hệ giữa biến đầu vào và biến đầu ra. Một thứ cần chú ý ở đây đó là biến đầu ra là biến số liên tục ( continuous-valued). Vì thế nên nó là số vô tận khả năng. Cái này trái ngược với phân loại. nơi các số ở lớp đầu ra là cố định. Các lớp thuộc về một tập có “hữu hạn” khả năng.\nTrong hồi quy, giả định rằng các biến đầu ra phụ thuộc vào các biến đầu vào, và chúng ta muốn xem nó liên quan thế nào. Vậy thì giá trị đầu vào được gọi là biến độc lập và được gọi là biến “dự đoán”, còn biến đầu ra được gọi là biến phụ thuộc hay còn gọi là biến tiêu chí. Không phải tất cả các biến đầu vào đều độc lập với nhau. Có rất nhiều trường hợp có mối quan hệ giữa các biến đầu vào với nhau.\nPhân tích hồi quy giúp chúng ta hiểu làm thế nào giá trị đầu ra biến đổi khi chúng ta thay đổi một vài biến đầu vào trong khi các biến khác giữ nguyên. Trong hồi quy tuyến tính, chúng ta giả định rằng mối quan hệ giữa các biến đấu vào và đầu ra là tuyến tính. Điều này đặt một mối ràng buộc vào quy trình mô hình ( modeling procedure) của chúng ta, nhưng nó nhanh và hiệu quả. Đôi khi hồi quy tuyến tính không đủ để phân tích mối quan hệ giữa đầu vào và đầu ra, vì vậy chúng ta sử dụng hồi quy đa thức( polynomial regression). Điều này phức tạp hơn về mặt tính toán nhưng nó cho chúng ta kết quả chính xác hơn. Dựa trên những vấn đề xảy ra với chúng ta, mà chúng ta xử dụng các dạng hồi quy để phân tích mối quan hệ. Hồi quy thường được xử dụng để dự đoán mức giá, kinh tế, sự biến đổi và những thứ tương tự thế.\nví dụ :\n1: Ngân hàng KMNO muốn tang lượng tiền huy động vốn. Ngân hàng này muốn biết mối quan hệ giữa lượng tiền gửi và lãi suất tiền gửi. Cụ thể hơn là họ muốn biết khi tăng lãi suất them 0.1% thì lượng tiền gửi sẽ tăng trung bình là bao nhiêu.\n2: Một kỹ sư nông nghiệp muốn biết năng suất nuôi tôm sú trong hệ thống thâm canh phụ thuộc thế nào vào diện tích ao nuôi, mật độ thả tôm giống, chi phí hóa chất xử lý môi trường, trình độ nhân công….. Từ phân tích hồi quy ông ta đề ra các chỉ tiêu kỹ thuật phù hợp cho loại hình này.\nXây dựng một biến hồi quy đơn Đây là một cách xây dựng một mẫu biến hồi quy đơn. Tạo file python với regression_linear.py\n# import các package cần thiết.\nimport numpy as np\nimport pickle\nfrom sklearn import linear_model\nimport sklearn.metrics as sm\nimport matplotlib.pyplot as plt\n# Chúng ta xử dụng dữ liệu trong file data_singlevar_regr.txt. Đây là dữ liệu nguồn của chúng ta\ninput_file=”data/data_singlevar_regr.txt”\n# file dữ liệu được ngăn cách bởi dấu , ở mỗi dòng nên chúng ta load và parse data\ndata=np.loadtxt(input_file,delimiter=’,’)\nX,y=data[:,:-1],data[:,-1]\n# chia dữ liệu (split data) để training và testing:\nnum_training=int(0.8*len(X))\nnum_text=len(X)-num_training\n# Training data\nX_train,y_train=X[:num_training],y[:num_training]\nX_test,y_test=X[num_training:],y[num_training:]\n#Tạo một object hồi quy tuyến tính và train nó xử dụng training data:\nregressor=linear_model.LinearRegression()\nregressor.fit(X_train,y_train)\n#dự đoán kết quả đầu ra cho dữ liệu kiểm tra xử dụng training model:\ny_test_pred=regressor.predict(X_test)\n# Vẽ đồ thị kết quả đầu ra xử dụng plot(plt)\nplt.scatter(X_test,y_test,color=’green’)\nplt.plot(X_test,y_test_pred,color=’black’,linewidth=4)\nplt.xticks(())\nplt.yticks(())\nplt.show()\n# Tính toán số liệu hiệu suất cho object hồi quy (regressor bằng cách so sánh với đầu ra thực sự (ground truth, cùng với đầu ra đã dự đoán (predicted outputs):\n# In tính toán số liệu hiệu suất\nprint(\"Linear regressor performance:\")\nprint(\"Mean absolute error =\", round(sm.mean_absolute_error(y_test,y_test_pred), 2))\nprint(\"Mean squared error =\", round(sm.mean_squared_error(y_test,y_test_pred), 2))\nprint(\"Median absolute error =\", round(sm.median_absolute_error(y_test,y_test_pred), 2))\nprint(\"Explain variance score =\", round(sm.explained_variance_score(y_test,y_test_pred), 2))\nprint(\"R2 score =\", round(sm.r2_score(y_test, y_test_pred), 2))\n# Khi mô hình đã được tạo chúng ta có thể lưu nó lại dưới dạng 1 file và dùng lại sau. Python có một công cụ gọi là pickle để chúng ta làm việc đó:\noutput_model_file=’model.pkl’\nwith open(output_model_file,’wb’) as f:\npickle.dump(regressor,f)\n# giờ thì load model từ file và biểu diễn dự đóan:\nwith open(output_model_file,’rb’) as f:\nregressor_model=pickle.load(f)\ny_test_pred_new=regressor_model.predict(X_test)\nprint(“\\n New mean absolute error=”, round(sm.mean_absolute_error(y_test,y_test_pred_new),2)\n Chạy code trên ta có hình sau được in ra\nVà đoạn sau ở Terminal:\nLinear regressor performance:\nMean absolute error = 0.59\nMean squared error = 0.49\nMedian absolute error = 0.51\nExplain variance score = 0.86\nR2 score = 0.86\nNew mean absolute error= 0.59\nProcess finished with exit code 0\n \u0026nbsp;\nXây dựng một hồi quy đa biến (multivariable regressor )\nTrong phần trên chúng ta đã biết cách làm thế nào để xây dựng một model hồi quy cho biến đơn. Trong phần này chúng ta sẽ làm việc cùng với dữ liệu nhiều chiều ( multidimensional data). Tạo file Python và làm việc nào :\n# import packageimport numpy as npfrom sklearn import linear_modelimport matplotlib.pyplot as pltimport sklearn.metrics as smfrom sklearn.preprocessing import PolynomialFeatures# chúng ta xử dụng file data_multivar_regr.txt để làm dữ liệuinput_file ='data/data_multivar_regr.txt'data=np.loadtxt(input_file,delimiter=',')X,y=data[:,:-1],data[:,-1]# chia data để training và testnum_training=int(0.8*len(X))num_test=len(X)-num_trainingX_train,y_train=X[:num_training],y[:num_training]X_test,y_test=X[num_training:],y[num_training:]# tạo linear regressor model:linear_regressor=linear_model.LinearRegression()linear_regressor.fit(X_train,y_train)y_test_pred=linear_regressor.predict(X_test)print(X_test[-1],y_test[-1])print(\"Linear Regressor performance:\")print(\"Mean absolute error =\", round(sm.mean_absolute_error(y_test,y_test_pred), 2))print(\"Mean squared error =\", round(sm.mean_squared_error(y_test,y_test_pred), 2))print(\"Median absolute error =\", round(sm.median_absolute_error(y_test,y_test_pred), 2))print(\"Explained variance score =\",round(sm.explained_variance_score(y_test, y_test_pred), 2))print(\"R2 score =\", round(sm.r2_score(y_test, y_test_pred), 2))#Tạo một đa thức hồi quy(polynomial regression) bậc 10. Train Hồi quy object này trên training dataset. Lấy một mẫu thử và xem nó thực hiện dự đoán thế nào. Bước đầu tiên là phải chuyển đổi nó thành một đa thức (polynomial):polynomial=PolynomialFeatures(degree=10)X_train_transformed=polynomial.fit_transform(X_train)datapoint=[[7.75,6.35,5.56]]poly_datapoint=polynomial.fit_transform(datapoint)# Bạn hãy để ý datapoint này khá giống với datapoint ở dòng 11 trong file txt dữ liệu [7.66,6.29,5.66]. Vậy thì phép hồi quy tốt sẽ dự đoán một kết quả đầu ra gần với số 41.35, Tạo một phép hồi quy tuyến tính (linear regressor) và biểu diễn đa thức .Biểu diễn dự đoán xử dụng cả hồi quy tuyến tính và hồi quy đa thức (linear and polynomial regressor) để xem sự khác biệtpoly_linear_model=linear_model.LinearRegression()poly_linear_model.fit(X_train_transformed,y_train)print(\"\\nLinear regression:\\n\", linear_regressor.predict(datapoint))print(\"\\nPolynomial regression:\\n\",poly_linear_model.predict(poly_datapoint))y_linear_pred=linear_regressor.predict(datapoint)y_poly_pred=poly_linear_model.predict(poly_datapoint)\n\u0026nbsp;\nDự đoán giá nhà sử dụng SVR( Support Vector Regressor )\nHãy xem code về cách sử dụng khái niệm SVM ( support vectors machine) để dự đoán giá nhà. Chúng ta sẽ sử dụng dataset có trong sklearn nơi các data point được định nghĩa bởi 13 thuộc tính. Nhiệm vụ của chúng ta là dự đoán giá nhà dựa trên các thuộc tính đó.\n#import packagefrom sklearn import datasetsfrom sklearn.svm import SVRfrom sklearn.metrics import mean_squared_error,explained_variance_scorefrom sklearn.utils import shuffle# load dữ liệu từ datasetsdata=datasets.load_boston()# thử xáo trộn data để chúng ta không nhầm lẫn dữ liệu phân tích:X,y=shuffle(data.data,data.target,random_state=7)# Chia dataset để train và testnum_training = int(0.8*len(X))X_train,y_train=X[:num_training],y[:num_training]X_test,y_test=X[num_training:],y[num_training:]# Tạo và train SVR sử dụng một nhân tuyến tính (linear kernel). Tham số C dùng để thay thế/phạt cho dữ liệu train bị lỗi. nếu bạn tăng giá trị của C, model sẽ tốt hơn và trùng hơn với dữ liệu training. Nhưng nó cũng có thể làm Overfitting(quá mức phù hợp - trong Supervised Learning chúng ta chỉ cần xấp xỉ) và sẽ mất tính tổng quát. Tham số epsilon được coi như là một ngưỡng ( threshold); nó không bỏ qua cho dữ liệu train lỗi nếu giá trị dự đoán trong khoảng này so với giá trị thực tế:sv_regressor=SVR(kernel='linear',C=1.0,epsilon=0.1)sv_regressor.fit(X_train,y_train)# Đánh giá hiệu suất của hồi quy và in các số liệuy_test_pred=sv_regressor.predict(X_test)mse=mean_squared_error(y_test,y_test_pred)evs=explained_variance_score(y_test,y_test_pred)print(\"\\nPerformance\")# sai số toàn phương trung bình MSE của một phép dự đoán là trung bình của bình phương các sai số, tức là sự khác biệt giữa các dự đoán và những gì được đánh giá. MSE là hàm rủi roprint(\"Sai số toàn phương trung bình =\",round(mse,2))# Điểm phương saiprint(\"Điểm phương sai =\", round(evs,2))# Lấy một data để kiểm thử và lấy kết quả dự đoántest_data=[3.7,0,18.4,1,0.87,5.95,91,2.5052,26,666,20.2,351.34,15.27]print(\"\\nDự đoán giá nhà:\",sv_regressor.predict([test_data])[0])\n\u0026nbsp;\nChạy file trên với PyCharm ta có kết quả ở Terminal như sau:\nD:/PycharmProjects/AILearn/house_prices_SVR.py\nPerformance\nSai số toàn phương trung bình = 15.38\nĐiểm phương sai = 0.82\nDự đoán giá nhà: 18.521780107258536\nProcess finished with exit code 0\n Tổng Kết\nTrong chương này chúng ta học được về sự khác nhau giữa học giám sát và học không giám sát. Chúng ta đã thảo luận các vấn đề vè phân loại data và làm thế nào để giải quyết nó. Chúng ta hiểu làm thế nào để xử lý dữ liệu sử dụng nhiều phương thức khác nhau. Chúng ta cũng học được về mã hóa nhãn và cách nào để xây dựng một class để mã hóa nhãn. Chúng ta thảo luận về lý thuyết phân hồi quy (logistic regression). Chúng ta cũng đã hiểu cái gì là phân loại Naïve Bayes và học làm cách nào để xây dựng lên nó. Chúng ta cũng học về cách xây dựng lên một ma trận hỗn loạn confusion matrix.\nChúng ta đã thảo luận về SVM (Support Vector Machine) và hiểu cách xây dựng một bộ phân loại dựa trên đó. Chúng ta đã học về hồi quy (Regression) và hiểu cách sử dụng hồi quy tuyến tính và hồi quy đa thức ( linear and polynomial ) cho dữ liệu đơn biến và đa biến. Sau đó sử dụng SVR (Support Vector Regressor) để dự đoán giá nhà dựa trên các tham số đã cho.\nTrong chapter tiếp theo chúng ta sẽ học về phân tích dự đoán và cách xây dựng một engine dự đoán dựa trênensemble learning. \u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n "
},
{
	"uri": "https://bamboofx.github.io/ai-with-python/chapter3/",
	"title": "C3: Ensemble Learing",
	"tags": [],
	"description": "",
	"content": "PythonAI Chapter33\nPhân tích dự đoán cùng với Ensemble Learing\nTrong chương này chúng ta học về Ensemble Learning and cách sử dụng nó để làm phân tích dự đoán. Kết thúc chương này chúng ta sẽ hiểu các vấn đều sau:\nXây dựng nguyên mẫu (models) cùng với Ensemble Learning Mô hình cây quyết định ( Decision Trees) và làm thế nào để xây dựng một Hàm phân loại Cây quyết định ( Decision Tree Classifier) Cái gì là Random Forests và Extremely Random Forests, và cách làm thế nào để xây dựng một bộ phân loại dựa trên nó Ước tính độ tin cậy của các dự đoán Xử lý sự mất cân bằng của các lớp Tìm tham số tối ưu cho training bằng cách xử dụng tìm kiếm lưới Tính toán tính năng quan trọng tương đối Dự đoán tình hình giao thông dựa trên Extremely Random Forests regressor  Ensemble Learing là gì ?\nEnsemble Learning là cách xây dựng nhiều mô hình (model) và sau đó kết hợp chúng lại thành một và tạo ra một kết quả tốt hơn những mô hình đó một mình. Như chúng ta đã biết các mô hình (models) đó được tạo ra từ phân loại ( classifer), hồi quy (regressor) hoặc bất cứ cách nào tạo ra models của riêng nó đều có khả năng tính toán khác nhau và để thực hiện một công việc nhất định, khi kết hợp các mô hình này lại với nhau một cách hợp lý thì sẽ tạo ra một mô hình mới mạnh và có hiệu suất cao hơn khi chỉ sử dụng mô hình một cách riêng lẻ. Học tập đồng bộ (Ensemble Learning)  được sử dụng trên nhiều lĩnh vực khác nhau bao gồm phân loại dữ liệu (data classification), dự đoán mô hình (predictive modeling), kiểm thử bất thường ( anomaly detection) và nhiều thứ khác nữa.\nTại sao chúng ta cần học tập đồng bộ đầu tiên? Để hiều điều này, chúng ta cần lấy một ví dụ thực tế. Bạn muốn mua một cái TV mới, Nhưng bạn không biết mẫu mới nhất là gì. Nhiệm vụ của bạn là phải tìm kiếm một cái tốt nhất trong tầm giá bạn có thể, nhưng bạn không có đủ hiểu biết trong vấn đề này để đưa ra một quyết định tốt nhất. Khi bạn phải đưa ra một quyết định kiểu dạng thế này bạn phải đi tìm những chuyên gia để tham khảo ý kiến cho vấn đề đó ( tìm kiếm review trên youtube, google ….) Nó sẽ giúp bạn đưa ra một quyết định đúng đắn nhất. Có còn hơn không, thay vì bạn đưa ra quyết định riêng thì bạn thường có xu hướng thu thập thông tin dựa trên quyết định cá nhân và kết hợp vào đó là những ý kiến của những người có chuyên môn. Bởi vì chúng ta thường muốn tối ưu quyết định và giảm thiểu những sai xót.\nXây dựng một mô hình học cùng với học tập đồng bộ (Ensemble Learning)\nKhi chúng ta chọn một mô hình, chúng ta thường sử dụng phương pháp là chọn một cái có it lỗi nhất trên dữ liệu training. Vấn đề với phương pháp này là nó có thể không luôn hoạt động tốt. Mô hình này có thể bị thiên vị hoặc không trung với dữ liệu training. THường khi chúng ta tính toán mô hình xử dụng xác nhận chéo. Nó có thể không thể hiện gì cả ở những dữ liệu nó không biết.\nMột trong những lý do chính để sử dụng học tập đồng bộ là nó rất hiểu quả bởi nó giảm thiểu nguy cơ lựa trọn trên những mô hình kém. Điều này cho phép nó train dữ liệu một cách đa dạng và sau đó thực hiện tốt trên những dữ liệu chưa biết ( unknow data). Khi chúng ta xây dựng một mô hình sử dụng ensemble learning, những mô hình riêng cần phải đa dạng. Điều này cho phép chúng ( chúng ở đây là cái méo gì thì méo biết- là ensemble learning hay individual models) chọn ra nhiều sắc thái khác nhau trong dữ liệu của chúng ta, vì thế mô hình được tổng hợp sẽ trở nên chính xác hơn.\nSự đa dạng đạt được bằng cách sủ dụng nhiều tham số đào tạo khác nhau cho mỗi mô hình riêng. Nó cho phép những mô hình riêng tạo ra những phán quyết riêng cho dữ liệu đào tạo. Có nghĩa là mỗi mô hình sẽ sử dụng những luật riêng để suy luận, đây là cách mạnh nhất để tạo ra kết quả cuối cùng. Nếu có sự giống nhau giữa các mô hình, chúng ta sẽ biết kết quả đầu ra là chính xác. Cây quyết định (Decision Tree) là cái gì?\n\u0026nbsp;\nMột cây quyết định (Decision Tree) là một cấu trúc giúp chúng ta chia dữ liệu thành các nhánh ( branches ) và sau đó tạo một quyết định trên các cấp độ(level) khác nhau . Nó cho phép chúng ta đạt tới quyết định cuối cùng bằng cách đi xuống cái cây này . Cây quyết định  là một sản phẩm của những thuật toán huấn luyện, những thứ định danh làm cách nào mà chúng ta chia dữ liệu một cách tốt nhất.\nMỗi quyết định được xử lý bắt đầu ở root node ở vị trí trên cùng của cái cây quyết định. Mỗi điểm (node) ở trên cây cơ bản là một quy tắc quyết định ( decision rule ). Các thuật toán xây dựng nên các quy tắc này dựa trên mối quan hệ giữa dữ liệu đầu vào (input data) và những nhãn đích trong dữ liệu đào tạo. Những giá trị trong dữ liệu đầu vào được sử dụng tận dụng để dự đoán kết quả cho giá trị đầu ra.\nBây giờ thì tạm hiểu khái niệm cơ bản về Cây quyết định , Cái tiếp theo cần hiểu là làm thế nào để những cái cây đó tự động được xây dựng ( tự mọc ). Chúng ta cần những thuật toán có thể xây dựng một cái cây tối ưu dựa trên dữ liệu của chúng ta. Để hiểu điều này chúng ta cần hiểu khái niệm về entropy. Trong chủ đề này chúng ta nhắc đến đó là entropy thông tin không phải là entropy nhiệt động học trong vật lý. Entropy cơ bản là một cái thước đo của sự không chắc chắn. Một trong những mục tiêu chính của Cây quyết định là sự giảm thiểu những thứ không chắc chắn khi chúng ta di chuyển từ root node (điểm gốc) tới những điểm khác (leaf nodes). Khi chúng ta nhìn thấy những điểm dữ liệu không biết, chúng ta hoàn toàn không thể chắc chắn về kết quả đầu ra. Khi chúng ta tới các nút, điểm lá (leaf node) chúng ta phải biết được kết quả đầu ra. điều này có nghĩa là chúng ta cần xây dựng một Cây quyết định theo một cách là giảm thiểu những dữ liệu không biết theo các cấp độ khác nhau. điều này có nghĩa là chúng ta cần giảm số entropy khi chúng ta di chuyển dần xuống cây dữ liệu.\nMột cây dữ liệu cơ bản lấy từ website: https://prateekvjoshi.com/\n\u0026nbsp;\nTúm cái vái lại là Cây quyết định là một một mô hình học máy có dạng như một cái cây. Mỗi nhánh không có lá trên cái cây này là một điểm quyết định, những điểm khác gọi là điểm quyết định. Mỗi điểm đưa ra một thử nghiệm cụ thể để xác định nơi đến tiếp theo. Dựa trên những kết quả đầu ra chúng ta sẽ đưa ra quyết định đi theo hướng trái hay phải của cái cây. Mô hình Cây quyết định  phía bên trên là một bài toán dự đoán xem trời có mưa hay không dựa trên 3 tham số cơ bản là nhiệt độ,tốc độ gió,và độ ẩm.\nĐể xây dựng một mô hình cây quyết định một cách tự động thì thật sự là một thủ thuật… hiểu khái niệm về cái cây này thì rất dễ. nhưng xây dựng được một cây tốt ưu lại còn tự động nữa thì ….. Làm sao biết nó là tối ưu, lấy thuộc tính nào làm root node? làm sao chúng ta quyết định được các ngưỡng… đó là entropy nhưng làm sao để đo được entropy ??? tacó hàm số sau để đo entropy \n\nLàm sao để giảm số entropy ở cây quyết định ? Hãy xem một ví dụ với bộ dữ liệu (dataset) với 60 mục trong đó mục đầu tiên xuất hiện 14 lần mục thứ 2 xuất hiện 27 lần và mục thứ 3 xuất hiện 19 lần thay vào hàm số entropy bên trên ta có:\n\u0026nbsp;\nTrong một cây quyết định, chúng ta cần chia bộ dữ liệu thành 2 đường và giảm số entropy. đây là kết quả sau khi chúng ta chia bộ dữ liệu:\n\u0026nbsp;\nGiờ thì đo đạc kết quả entropy thế nào\nleft entropy = - (5/37)log(5/37) - (21/37)log(21/37) - (11/37)log(11/37) = 1.374 right entropy = - (9/23)log(9/23) - (6/23)log(6/23) - (8/23)log(8/23) = 1.565\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n \u0026nbsp;\nĐể đo lường kết quả tổng thể entropy của 2 nhánh nhỏ. Chúng ta cần lấy tổng số dựa trên số lượng mục trên mỗi nhánh. bên trên ta coi nhánh trái có 37 mục và bên phải có 23 mục (items).\n(kết quả tổng thể) overall entropy = (37/60)*1.374 + (23/60)*1.565 = 1.447\n\u0026nbsp;\nxem thử kết quả khác nhau giữa số entropy ban đầu và số entropy tổng thể ta vừa tính\ninformation gain = 1.537 - 1.447 = 0.09\n\u0026nbsp;\ninformation gain là kết quả thông tin ta thu được nếu chia dữ liệu theo cách trên. Ở mỗi điểm chúng ta lặp lại việc này và lấy điểm thông tin thu được cao nhất.\nXây dựng một phân loại Cây quyết định ( Decision Tree classifier)\nGiờ thì mở PyCharm lên và tạo một file Python nào:\n\u0026nbsp;\n# import packageimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.metrics import classification_reportfrom sklearn import model_selectionfrom sklearn.tree import DecisionTreeClassifierfrom utilities import visualize_classifier# Chúng ta xử dụng dữ liệu trong file data_decision_trees.txt . Trong file này dữ liệu ở mỗi dòng được tách bởi dấu [,]. 2 giá trị đầu tiên tương ứng với dữ liệu vào(input data) và giá trị cuối cùng tương ứng là nhãn đích (target label).input_file=\"data/data_decision_trees.txt\"data=np.loadtxt(input_file,delimiter=',')X,y=data[:,:-1],data[:,-1]# Tách dữ liệu thành 2 lớp dựa trên nhãn của chúngclass_0=np.array(X[y==0])class_1=np.array(X[y==1])# Xem thử dữ liệu nhập xử dụng scatter plot của plt:plt.figure()plt.scatter(class_0[:,0],class_0[:,1],s=75,facecolors='gray',edgecolors='gray',linewidth=1,marker='x')plt.scatter(class_1[:, 0], class_1[:, 1], s=75, facecolors='white', edgecolors='black', linewidth=1, marker='o')plt.title('Dữ liệu nhập')# Chúng ta cần chia dữ liệu vào trong tập dữ liệu để train và testX_train,X_test,y_train,y_test = model_selection.train_test_split(X,y,test_size=0.25,random_state=5)# Tạo xây dựng và biểu diễn phân loại Cây Quyết định dựa trên tập dữ liệu. tham số random_state chỉ đến số hạt giống được sử dụng bởi những số ngẫu nhiên cần thiết được tạo rađể khởi tạo cho thuật toán phân loại Cây Quyết Định. Tham số max_depth chỉ ra \"độ cao\" của cây quyết định mà chúng ta muốn xây dựng:params={'random_state':0,'max_depth' :4}classifier=DecisionTreeClassifier(**params)classifier.fit(X_train,y_train)visualize_classifier(classifier,X_train,y_train,'Tập dữ liệu train')# tính dữ liệu đầu ra trên phép phân loại dựa trên tập dữ liệu và biểu diễn nó:y_test_pred=classifier.predict(X_test)visualize_classifier(classifier,X_test,y_test,\"Tập dữ liệu test\")# Đánh giá hiệu suất của phép phân loại bằng cách in báo cáo của phép phân loạiclass_names=['Class-0','Class-1']print(\"\\n\"+\"#\"*40)print(\"\\nĐánh giá hiệu suất phân loại trên Tập dữ liệu train\\n\")print(classification_report(y_train,classifier.predict(X_train),target_names=class_names))print(\"#\"*40+\"\\n\")print(\"#\"*40)print(\"\\nHiệu suất phân loại trên Tập dữ test\\n\")print(classification_report(y_test,y_test_pred,target_names=class_names))print(\"#\"*40+\"\\n\")plt.show()\n\u0026nbsp;\nChạy code trên với PyCharm bạn sẽ thấy nó hiện lên 2 Biểu đồ như sau.\n1.0 Biểu đồ này biểu diễn dữ liệu nhập\n2.0 Biểu đồ này thể hiện ranh giới phân loại dựa trên tập dữ liệu test\n\u0026nbsp;\nVà sau đây là output được in ra ở Terminal:\n########################################\nĐánh giá hiệu suất phân loại trên Tập dữ liệu train\nprecisionrecall f1-score support\nClass-0 0.99 1.00 1.00 137\nClass-1 1.00 0.99 1.00 133\nmicroavg 1.00 1.00 1.00 270\nmacroavg 1.00 1.00 1.00 270\nweightedavg 1.00 1.00 1.00 270\n########################################\n########################################\nHiệu suất phân loại trên Tập dữ test\nprecisionrecall f1-score support\nClass-0 0.93 1.00 0.97 43\nClass-1 1.00 0.94 0.97 47\n\u0026nbsp;\nmicroavg 0.97 0.97 0.97 90\nmacroavg 0.97 0.97 0.97 90\nweightedavg 0.97 0.97 0.97 90\n\u0026nbsp;\nNhìn vào phần output trên terminal bạn có thể thấy một Hiệu suất của phép phân loại được biểu hiện bởi (Precision(độ chính xác),recall(triệu hồi …hồi tưởng méo biết là cái giề), và f1-scores ( điểm f1). Độ chính xác chỉ ra tính chính xác và recall là số lượng phần tử (items) được lấy theo tỷ lệ phần tram của tổng số items. Một bộ phân loại tốt sẽ có điểm Precision(độ chính xác),recall cao. nhưng thường phải đánh đổi giữa hai số này. Vì thế chúng ta có chỉ số f1-score để tháy sự khác biệt. F1-Score  là số trung bình của precision và recall, giúp cân bằng hai giá trị đó.\nRandom Forset và Extremly Random Forset là gì?\nMột Random Forset là một trường hợp cụ thể của học độc lập (Ensemble learning) mà mô hình (models) được xây dựng bang Cây Quyết Định (Decision Tree). Nhóm cây quyết định này sau đó được sử dụng để dự đoán kết quả đầu ra. Chúng ta sử dụng một tập con ngẫu nhiên (random subset) của dữ liệu đào tạo (training data) để xây dựng lên mỗi Cây quyết định (Decision Tree). Điều này đảm bảo tính đa dạng giữa các cây quyết định  khác nhau. Trong phần đầu tiên, chúng ta sẽ thảo luận về một trong những thứ quan trọng nhất trong ensemble learning là đảm bảo sự đa dạng của các mô hình cá nhân.\nMột trong những thứ quan trọng về Random Forest là chúng không overfit. Như chúng ta đã biết, overfitting là vấn đề chúng ta thường phải gặp trong ML. Bằng cách xây dựng một bộ cây quyết định (Decision Trees) sử dụng nhiều tập hợp dữ liệu con khác nhau, chúng ta đảm bảo những mô hình đó không overfit dữ liệu đào tạo. Trong suốt quá trình xây dựng lên cái cây, những điểm (nodes) được chia ra liên tiếp điểm ngưỡng tốt nhất được chọn để giảm số entropy theo mỗi mức độ. Các điểm chia không xem xét tất cả các tính năng, đặc điểm trong bộ dữ liệu đầu vào, thay vì thế nó chọn sự phân chia tốt nhất trong số ngẫu nhiên các tập dữ liệu của các tính năng được xem xét. Vì thế tính ngẫu nhiên có xu hướng làm tăng độ lệch (số bias) của một Random Forset, nhưng phương sai giảm ( số variance) bởi tính trung bình. Vì thế chúng ta sẽ kết thúc với một mô hình mạnh.\nEntremely Random Forest  lấy ngẫu nhiên trên level tiếp theo, cùng với việc lấy ngẫu nhiên các tập tính năng(features), hạn mức, mức ngưỡng (thresholds) cũng được chọn ngẫu nhiên. Các mức ngẫu nhiên được tạo ra và chọn làm quy tắc chia,tách. Và làm giảm phương sai (variance) của phương trình mo hình. Vì thế vùng biên chọn sử dụng Extremely Random Forest có xu hướng chuẩn hơn là sử dụng một cái Random Forest.\nXây dựng một bộ phân loại sử dụng Random Forests và Extremely Random Forests\nBây giờ thì chúng ta thử xây dựng một bộ phân loại dựa trên Random Forests và Extremely Random Forests. Cách xây dựng 2 bộ phân loại trên rất giống nhau, vậy nên chúng ta sẽ xử dụng một bộ đầu vào được chỉ định cần thiết để xây dựng.\nTạo một File Python mới và bắt đầu:\nimport argparseimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.metrics import classification_reportfrom sklearn import model_selectionfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifierfrom utilities import visualize_classifier# Định nghĩa một đối số phân tích cho Python để chúng ta có thể lấy kiểu phân loại như là một tham số đầu vào. Dựa trên tham số này chúng ta có thể xây dựng một bộ phân loại Random Forest hoặc một bộ phân loại Extremely Random Forestsdef build_arg_parser():parser=argparse.ArgumentParser(description='Classify data using Enxemble Learning Techniques')parser.add_argument('--classifier-type',dest='classifier_type',required=True,choices=['rf','erf'],help=\"Type of classifier to use can be either 'rf' or 'erf'\")return parser# Định nghĩa hàm Main và parser tham số đầu vàoif __name__=='__main__':# Parser tham số đầu vàoargs=build_arg_parser().parse_args()classifier_type=args.classifier_type# Chúng ta sẽ xử dụng dữ liệu từ file data/data_random_forest.txt. Mỗi dòng trong file này sẽ có một dấu phẩy để phân chia các giá trị. Hai giá trị đầu tiên tương ứng là giá trị đầu vào ,và giá trị cưới cùng tương ứng là nhãn đích. Chúng ta có 3 lớp khác biệt trong tập dũ liệu này.# Load input datainput_file='data/data_random_forests.txt'data=np.loadtxt(input_file,delimiter=\",\")X,y=data[:,:-1],data[:,-1]# Tách dữ liệu đầu vào thành 3 lớpclass_0=np.array(X[y==0])class_1=np.array(X[y==1])class_2=np.array(X[y==2])# In dữ liệu đầu vào lên biểu đồplt.figure()plt.scatter(class_0[:,0],class_0[:,1],s=75,facecolors=\"white\",edgecolors=\"black\",linewidths=1,marker='s')plt.scatter(class_1[:,0],class_1[:,1],s=75,facecolors=\"black\",edgecolors=\"black\",linewidths=1,marker='o')plt.scatter(class_2[:,0],class_2[:,1],s=75,facecolors=\"gray\",edgecolors=\"black\",linewidths=1,marker='^')plt.title(\" Dữ liệu đầu vào \")# Chia dữ liệu vào trong tập training và testing (split the data into training and testing datasets):X_train,X_test,y_train,y_test=model_selection.train_test_split(X,y,test_size=0.25,random_state=5)#Định nghĩa tham số để sử dụng khi chúng ta xây dựng bộ phân loại. tham số n_estimators chỉ ra số cây (trees) chúng ta sẽ xây dựng, và tham số max_depth là số bậc (level) trên mỗi cây. Tham số random_state là số hạt giống (seed) của số ngẫu nhiên cần thiết để khởi tạo một thuật toán phân loại Random Forest# Ensemble Learning classifierparams={'n_estimators':100,'max_depth':4,'random_state':0}#Dựa trên tham số đầu vào, chúng ta cũng xây dựng một Bộ phân loại Random Forests hoặc một Extremely Random Forest classifierif classifier_type=='rf':classifier=RandomForestClassifier(**params)else:classifier=ExtraTreesClassifier(**params)# Train và hiển thị bộ phân loại ra màn hình:classifier.fit(X_train,y_train)visualize_classifier(classifier,X_train,y_train,\"Bộ dữ liệu training(training dataset)\")# Tính toán (dự đoán) kết quả đầu ra dựa trên bộ dữ liệu test và hiển thị ra màn hình:y_test_pred=classifier.predict(X_test)visualize_classifier(classifier,X_test,y_test,\"Bộ dữ liệu testing(testing dataset)\")# Đánh giá hiệu suất của phép phân loại bằng cách print reportclass_names=['Class-0','Class-1','Class-2']print(\"\\n\",\"#\"*44)print(\"\\nHiệu suất phân loại trên dữ liệu training (training dataset)\")print(classification_report(y_train,classifier.predict(X_train),target_names=class_names))print(\"#\"*44,\"\\n\")print(\"\\n\",\"*\"*44)print(\"\\nHiệu suất phân loại trên dữ liệu testing(testing dataset)\")print(classification_report(y_test,y_test_pred,target_names=class_names))print(\"*\"*40)\n\u0026nbsp;\nLưu file python trên dưới tên random_forest.py và chạy file đó trong terminal với tham số--classifier-types rf như sau:\n\u0026nbsp;\nTa có kết quả sau\nFigure 1 Dữ liệu đầu vào\nHình 1 Dữ liệu training với tham số rf\nHình 1 Dữ liệu training với tham số rf\nHình 2 Bộ dữ liệu train với tham số erf\nHình 2 Bộ dữ liệu train với tham số erf\n1 Dữ liệu test với tham số rf\n1 Dữ liệu test với tham số rf\n2 Dữ liệu test với tham số erf\n\u0026nbsp;\nOutput ở Terminal tham số rf:\n############################################\nHiệu suất phân loại trên dữ liệu training (training dataset)\nprecisionrecall f1-score support\nClass-0 0.91 0.86 0.88 221\nClass-1 0.84 0.87 0.86 230\nClass-2 0.86 0.87 0.86 224\nmicroavg 0.87 0.87 0.87 675\nmacroavg 0.87 0.87 0.87 675\nweightedavg 0.87 0.87 0.87 675\n############################################ ********************************************\nHiệu suất phân loại trên dữ liệu testing(testing dataset)\nprecisionrecall f1-score support\nClass-0 0.92 0.85 0.88 79\nClass-1 0.86 0.84 0.85 70\nClass-2 0.84 0.92 0.88 76\n\u0026nbsp;\nmicroavg 0.87 0.87 0.87 225\nmacroavg 0.87 0.87 0.87 225\nweightedavg 0.87 0.87 0.87 225\n****************************************\nOutput Terminal Tham số erf:\n############################################\nHiệu suất phân loại trên dữ liệu training (training dataset)\nprecisionrecall f1-score support\nClass-0 0.89 0.83 0.86 221\nClass-1 0.82 0.84 0.83 230\nClass-2 0.83 0.86 0.85 224\n\u0026nbsp;\nmicroavg 0.85 0.85 0.85 675\nmacroavg 0.85 0.85 0.85 675\nweightedavg 0.85 0.85 0.85 675\n############################################ \u0026nbsp;\n\u0026nbsp;\n********************************************\nHiệu suất phân loại trên dữ liệu testing(testing dataset)\nprecisionrecall f1-score support\n\u0026nbsp;\nClass-0 0.92 0.85 0.88 79\nClass-1 0.84 0.84 0.84 70\nClass-2 0.85 0.92 0.89 76\n\u0026nbsp;\nmicroavg 0.87 0.87 0.87 225\nmacroavg 0.87 0.87 0.87 225\nweightedavg 0.87 0.87 0.87 225\n\u0026nbsp;\n****************************************\nĐể thêm tham số khi run file trong PyCharm bạn phải edit trong configuartions như sau Chúng ta xét 2 hình output bên cạnh nhau khi thay đổi tham số rf và erf ta cố thể thấy đường viền bao quanh bởi Extremely Random Forest tốt hơn là RandomForest.\nƯớc tính độ tin cậy của một dự đoán\nHãy quan sát các đầu ra thu được ở Terminal, bạn sẽ thấy xác suất được in ra ở mỗi điểm dữ liệu. Những xác suất đó được sử dụng như giá trị để đo độ tin cậy của mỗi lớp. Ước tính giá trị độ tin cậy là một nhiệm vụ rất quan trọng trong Machine Learning. Trong cùng một file python bên trên ta thêm vài dòng để tính toán độ tin cậy của mô hình:\n# Tính toán độ tin cậy của một mô hình\n#định nghĩa một array của test data points:test_datapoints=np.array([[5,5],[3,6],[6,4],[7,2],[4,4],[5,2]])# Object classifier là một phương thức được xây dựng sẵn để tính toán độ tin cậy. Hãy phân loại mỗi điểm và tính toán giá trị độ tin cậy:print(\"\\nThước đo độ tin cậy\")for datapoint in test_datapoints:probabilities=classifier.predict_proba([datapoint])[0]predicted_class='Class-'+str(np.argmax(probabilities))print('\\nDataPoint:',datapoint)print('Predict Class:',predicted_class)# In ra màn hìnhvisualize_classifier(classifier,test_datapoints,[0]*len(test_datapoints),\"Kiểm tra điểm dữ liệu(Test datapoints)\")\n \u0026nbsp;\nChạy đoạn code trên với lần lượt 2 tham số là rf và erf ta sẽ có kết quả như sau ở terminal và hình output:\n# Flag erf:\n\u0026nbsp;\nThước đo độ tin cậy\nProbabilities: [0.48904419 0.28020114 0.23075467]\nDataPoint: [5 5]\nPredict Class: Class-0\nProbabilities: [0.66707383 0.12424406 0.20868211]\nDataPoint: [3 6]\nPredict Class: Class-0\nProbabilities: [0.25788769 0.49535144 0.24676087]\nDataPoint: [6 4]\nPredict Class: Class-1\nProbabilities: [0.10794013 0.6246677 0.26739217]\nDataPoint: [7 2]\nPredict Class: Class-1\nProbabilities: [0.33383778 0.21495182 0.45121039]\nDataPoint: [4 4]\nPredict Class: Class-2\nProbabilities: [0.18671115 0.28760896 0.52567989]\nDataPoint: [5 2]\nPredict Class: Class-2\n\u0026nbsp;\n#Flag rf\nThước đo độ tin cậy\nProbabilities: [0.81427532 0.08639273 0.09933195]\nDataPoint: [5 5]\nPredict Class: Class-0\nProbabilities: [0.93574458 0.02465345 0.03960197]\nDataPoint: [3 6]\nPredict Class: Class-0\nProbabilities: [0.12232404 0.7451078 0.13256816]\nDataPoint: [6 4]\nPredict Class: Class-1\nProbabilities: [0.05415465 0.70660226 0.23924309]\nDataPoint: [7 2]\nPredict Class: Class-1\nProbabilities: [0.20594744 0.15523491 0.63881765]\nDataPoint: [4 4]\nPredict Class: Class-2\nProbabilities: [0.05403583 0.0931115 0.85285267]\nDataPoint: [5 2]\nPredict Class: Class-2\n\u0026nbsp;\n\u0026nbsp;\nTrên mỗi điểm dữ liệu nó sẽ tính toán số phần tram của điểm đó thuộc về lớp nào trong 3 lớp chúng ta đã tạo, chúng sẽ chọn một điểm cùng với độ tin cậy cao nhất.\nLàm việc cùng với lớp mất cân bằng\nMột bộ phân loại chỉ tốt nếu như dữ liệu được sử dụng cho đào tạo. Một trong những vấn đề chúng ta thường phải đối mặt trong thực tế là chất lượng của dữ liệu. Để cho một bộ phân loại được hoạt động tốt, là nó cần nhìn thấy những số bằng nhau của các điểm trong mỗi lớp. Nhưng khi chúng ta thu thập dữ liệu trong thực tế, nó không phải luôn luôn đảm bảo mỗi lớp có chính xác số giống với số của điểm dữ liệu của chúng ta. Nếu một lớp có 10 lần các số điểm dữ liệu hơn mỗi lớp khác, thì bộ phân loại sẽ có xu hướng thiên vị hơn cho lớp đó. Vì thế chúng ta cần đảm bảo chúng ta tính toán đúng cho thuật toán mất cân bằng. Hãy xem điều đó cần phải làm thế nào bằng Python.\n# import package cần thiếtimport sysimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.ensemble import ExtraTreesClassifierfrom sklearn import model_selectionfrom sklearn.metrics import classification_reportfrom utilities import visualize_classifierfrom utilities import report_print# Chúng ta sẽ sử dụng dữ liệu trong file data/data_imbalance.txt để làm dữ liệu phân tích. Tải dữ liệu. mỗi dòng trong file các giá trị được tách với nhau bởi dấu phẩy. Hai giá trị đầu tiên đối xứng nhau là giá trị đầu vào, và giá trị cuối cùng đại diện cho nhãn đích. Chúng ta có 2 lớp trong bộ dữ liệu(dataset)input_file=\"data/data_imbalance.txt\"data=np.loadtxt(input_file,delimiter=',')X,y=data[:,:-1],data[:,-1]# Chia dữ liệu nhập vào 2 lớp dựa trên nhãn của nóclass_0=np.array(X[y==0])class_1=np.array(X[y==1])# Biểu diễn dữ liệu nhập lên màn hình sử dụng scatter trong plot:plt.figure()plt.scatter(class_0[:,0],class_0[:,1],s=75,facecolors='black',edgecolors='black',linewidths=1,marker=\"x\")plt.scatter(class_1[:,0],class_1[:,1],s=75,facecolors='gray',edgecolors='black',linewidths=1,marker=\"o\")plt.title(\"Dữ liệu nhập\")# Chia dữ liệu để tạo bộ dữ liệu train và testingX_train,X_test,y_train,y_test=model_selection.train_test_split(X,y,test_size=0.25,random_state=5)#Tiếp theo chúng ta cần định nghĩa tham số cho bộ phân loại Extremely Random Forest.# Chú ý ở đây là một tham số đầu vào được gọi là balance tham số này điều khiển việc chúng ta có muốn hoặc không muốn sử dụng thuật toán tính toán cho lớp cân băng.# nếu vậy chúng ta cần thêm một tham số được gọi là class_weight tham số này nói cho lớp phân loại biết nó cần cân bằng với tham số này, vậy nó tỷ lệ với số điểm dữ liệu ở mỗi lớp:# tham số cho ERFparams={'n_estimators':100,'max_depth':4,'random_state':0}if len(sys.argv)\u0026gt;1:if sys.argv[1]=='balance':params={'n_estimators':100,'max_depth':4,'random_state':0,'class_weight':'balanced'}else:raise TypeError(\"Invalid input argument; Thêm balance vào argument đi pa\")# Xây dựng, fit để luyện và biểu diễn lớp phân loại sử dụng dữ liệu training:classifier=ExtraTreesClassifier(**params)classifier.fit(X_train,y_train)visualize_classifier(classifier,X_train,y_train,'Dữ liệu training')# Predict dầu ra - dự đoán đầu ra và biểu diễn dữ liệu đầu ra:y_test_pred=classifier.predict(X_test)visualize_classifier(classifier,X_test,y_test,'Dữ liệu test')report_print(classifier,['Class-0','Class-1'],X_train,y_train,y_test,y_test_pred)\n \u0026nbsp;\nBạn chạy code trên và sẽ thấy một vài hình output như sau:\n\u0026nbsp;\n\u0026nbsp;\nBạn có thấy khoảng màu đen chính là ranh giới giữa hai lớp. Mảng màu đen trên cùng chính là đại diện cho ranh giới. Output ra Terminal có dạng như sau. precisionrecall f1-score support\nClass-0 0.00 0.00 0.00 69\nClass-1 0.82 1.00 0.90 306\nmicroavg 0.82 0.82 0.82 375\nmacroavg 0.41 0.50 0.45 375\nweightedavg 0.67 0.82 0.73 375\n########################################\nVà kèm theo 1 warning UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n'precision', 'predicted', average, warn_for)\nBạn thấy warning này bởi vì giá trị là 0 trong hàng đầu tiên, nó là lý do phép lỗi chia cho 0(ZeroDivisionError) khi chúng ta tính f1-score.\nTiếp theo ta thêm tham số balance vào cho file imbalance_class.py\n$ python3 imbalance_class.py balance\ngiờ thì hình output sẽ trông thế này:\nBằng cách tính toán sự mất cân bằng của lớp (class imbalance), chúng ta đã phân loại điểm dữ liệu ở class-0 với độ chính xác khác 0 (non-zero accuracy)\nTìm tham số training tối ưu sử dụng tìm kiếm lưới (grid-search)\nKhi cúng ta làm việc cùng với các lớp phân loại, chúng ta thường luôn luôn không biết tham số tốt nhất là gì. Bạn không thể thử tất cả các trường hợp (brute-force) lần lượt để tìm số tốt nhất một cách thủ công. Đây là nơi grid-search trở nên thích hợp để dùng. Grid-search cho phép chúng ta chỉ ra một khoảng giá trị và bộ phân loại lớp (the classifier) sẽ tự động chạy vài trường hợp cấu hình khác nhau để tìm ra những tham số thích hợp. Hãy xem làm thế nào để thực hiện nó:\nimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.metrics import classification_reportfrom sklearn import model_selectionfrom sklearn.model_selection import GridSearchCVfrom sklearn.ensemble import ExtraTreesClassifierfrom utilities import visualize_classifier,report_print# Chúng ta sử dụng dữ liệu tại file data_random_forests.txtinput_file=\"data/data_random_forests.txt\"data=np.loadtxt(input_file,delimiter=',')X,y=data[:,:-1],data[:,-1]#Chia dữ liệu thành các lớpclass_0=np.array(X[y==0])class_1=np.array(X[y==1])class_2=np.array(X[y==2])# chia dữ liệu thành tệp dữ liệu để training và testingX_train,X_test,y_train,y_test=model_selection.train_test_split(X,y,test_size=0.25,random_state=5)# Tạo một lưới các tham số mà bạn muốn bộ phân loại kiểm tra. Thường thì chúng ta sẽ giữ một tham số hằng ( parameter constant) và những tham số khác nhau (2 tham số thì giữ nguyên một cái còn cái sau thì đưa ra nhiều trường hợp) . Sau đó chúng ta làm ngược lại để chỉ ra sự kết hợp nào là tốt nhất. Trong trường hợp này chúng ta muốn tìm giá trị tốt nhất cho n_estimators và max_depth# Định nghĩa một lưới tham sốparameter_grid=[ {'n_estimators': [100], 'max_depth': [2, 4, 7, 12, 16]},{'max_depth': [4], 'n_estimators': [25, 50, 100,250]}]# giờ thì định nghĩa số liệu của bộ phân loại sẽ dùng để tìm ra tham số kết hợp tốt nhấtmetrics = ['precision_weighted', 'recall_weighted']# Cho mỗi số liệu, chúng ta cần chạy grid-search, Nơi mà chúng ta train bộ phân loại cho một bộ kết hợp các tham sốfor metric in metrics:print(\"\\nTìm tham số cho: \",metric)classifier=GridSearchCV(ExtraTreesClassifier(random_state=0),parameter_grid,cv=5,scoring=metric)classifier.fit(X_train,y_train)#print(getattr(classifier, 'cv_results_', None))#print(classifier.cv_results_.keys())for params in classifier.cv_results_['params']:i=classifier.cv_results_['params'].index(params)print(params,\"----\u0026gt;\",round(classifier.cv_results_['mean_test_score'][i],3))print(\"\\nTham số tốt nhất\", classifier.best_params_)# print terminal cho mỗi tham số kết hợp:print(\"\\nĐiểm trên lưới cho tham số trên grid:\")#in reporty_pred=classifier.predict(X_test)print(\"\\nBáo cáo hiệu suất:\\n\")print(classification_report(y_test,y_pred))\n Chạy file trên ta có output sau:\nTìm tham số cho: precision_weighted\n{'max_depth': 2, 'n_estimators': 100} ----\u0026gt; 0.847\n{'max_depth': 4, 'n_estimators': 100} ----\u0026gt; 0.841\n{'max_depth': 7, 'n_estimators': 100} ----\u0026gt; 0.844\n{'max_depth': 12, 'n_estimators': 100} ----\u0026gt; 0.836\n{'max_depth': 16, 'n_estimators': 100} ----\u0026gt; 0.818\n{'max_depth': 4, 'n_estimators': 25} ----\u0026gt; 0.846\n{'max_depth': 4, 'n_estimators': 50} ----\u0026gt; 0.84\n{'max_depth': 4, 'n_estimators': 100} ----\u0026gt; 0.841\n{'max_depth': 4, 'n_estimators': 250} ----\u0026gt; 0.845\nTham số tốt nhất {'max_depth': 2, 'n_estimators': 100}\nĐiểm trên lưới cho tham số trên grid:\nBáo cáo hiệu suất: precision recall f1-score support\n0.0 0.94 0.81 0.87 79\n1.0 0.81 0.86 0.83 70\n2.0 0.83 0.91 0.87 76\n\u0026nbsp;\nmicro avg 0.86 0.86 0.86 225\nmacro avg 0.86 0.86 0.86 225\nweighted avg 0.86 0.86 0.86 225\nvà tiếp theo với recall:\nTìm tham số cho: recall_weighted\n{'max_depth': 2, 'n_estimators': 100} ----\u0026gt; 0.84\n{'max_depth': 4, 'n_estimators': 100} ----\u0026gt; 0.837\n{'max_depth': 7, 'n_estimators': 100} ----\u0026gt; 0.841\n{'max_depth': 12, 'n_estimators': 100} ----\u0026gt; 0.834\n{'max_depth': 16, 'n_estimators': 100} ----\u0026gt; 0.816\n{'max_depth': 4, 'n_estimators': 25} ----\u0026gt; 0.843\n{'max_depth': 4, 'n_estimators': 50} ----\u0026gt; 0.836\n{'max_depth': 4, 'n_estimators': 100} ----\u0026gt; 0.837\n{'max_depth': 4, 'n_estimators': 250} ----\u0026gt; 0.841\nTham số tốt nhất {'max_depth': 4, 'n_estimators': 25}\nĐiểm trên lưới cho tham số trên grid:\nBáo cáo hiệu suất: precision recall f1-score support\n0.0 0.93 0.84 0.88 79\n1.0 0.85 0.86 0.85 70\n2.0 0.84 0.92 0.88 76\nmicro avg 0.87 0.87 0.87 225\nmacro avg 0.87 0.87 0.87 225\nweighted avg 0.87 0.87 0.87 225\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\nTa thấy kết quả thu được là khác nhau bởi vì precision weight,và recall weight là hai số liệu khác nhau và đòi hỏi kết hợp các tham số khác nhau.\nTính toán sự quan trọng tương đối\nKhi chúng ta làm việc cùng với một tập dữ liệu (dataset) có N-chiều điểm dữ liệu, chúng ta phải hiểu tất cả các tính năng không phải đều quan trọng như nhau. Một vài cái cần phải phân biệt với những cái khác. Nếu chúng ta có những thông tin này, chúng ta ó thể dùng nó để giảm các chiều lại. Nó rất hữu dụng trong việc giảm sự phức tạp và tăng tốc độ của thuật tóa. Thi thoảng một vài tính năng thật sự dư thừa. vì thế chúng cần phải \"di dời\" ra khỏi tập dự liệu. Chúng ta sẽ sử dụng AdaBoost Regressor để tính toán tính năng quan trọng. AdaBoost, là từ viết tắt của Adaptive Boosting \u0026ndash; Tăng cường thích ứng, là một thuật toán thường được dùng kết hợp với những thuật toán Machine Learning khác để tăng hiệu quả. Trong AdaBoost, một điểm dữ liệu luyên tập (training data point) được rút ra từ một bộ phân phốiđể luyện cho bộ phân loại hiện tại. Bộ phân phối này được cập nhật lặp đi lặp lại để các bộ phân loại tiếp theo tập trung vào những điểm dữ liệu khó. Điểm dữ liệu khó là những điểm dữ liệu phân loại sai. Điều này được thực hiện bởi cách cập nhật cácbộ phân phối ở mỗi bước. Điều này sẽ làm cho điểm dữ liệu mà trước đó phân loại sai nhiều khả năng xuất hiện trong tập dữ liệu mẫu tiếp theo để training. Những bộ phân loại này sau đó sẽ được xếp chồng lên nhau và quyết định sẽ được đưa ra thông qua bầu chọn đa số.\nBắt đầu với đoạn code sau\nimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.ensemble import AdaBoostClassifierfrom sklearn.tree import DecisionTreeRegressorfrom sklearn import datasetsfrom sklearn.metrics import mean_squared_error,explained_variance_scorefrom sklearn.model_selection import train_test_splitfrom sklearn.utils import shufflefrom sklearn.svm import SVC# Đầu tiên ta sử dụng data có sẵn trong scikit-learn:data=datasets.load_diabetes()# Xáo trộn dataset để không làm phân tích của chúng ta bị giống nhauX,y=data['data'],data['target']#shuffle(iris.data,iris.target,random_state=7)#shuffle(data[:,:-1],data[:,-1],random_state=7) #print(data.feature_names)print(\"*\"*40)#print(y)# Chia dữ liệu để train và testX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)# Định nghĩa và train AdaBoost sử dụng Decision Tree regressor như là một mô hình riêngsvc=SVC(probability=True,kernel='linear')DTR=DecisionTreeRegressor(max_depth=4)regressor=AdaBoostClassifier(base_estimator=None,algorithm=\"SAMME\",n_estimators=50,learning_rate=2)model=regressor.fit(X_train,y_train)# Ước tính hiệu suất của phép hồi quy (regressor):y_pred=model.predict(X_test)mse=mean_squared_error(y_test,y_pred)evs=explained_variance_score(y_test,y_pred)print(\"\\nAdaptiveBoost REGRESSOR\")print(\"\\nMean square error\",round(mse,2))print(\"\\nVariance Score: \",round(evs,2))# Phép hồi quy này có một phương thức có sẵn có thể gọi để tính độ quan trọng tính năng tương đối:feature_importances=regressor.feature_importances_feature_name=data.feature_names# Đơn giản hóa giá trị của độ quan trọng tính năng tương đối:feature_importances=100.0*(feature_importances/max(feature_importances))# Sắp xếp feature lại (sort) để có thể phác họa thành đồ thị:index_sorted=np.flipud(np.argsort(feature_importances))# Sắp xếp điểm trên trục X để làm đồ thị dạng biểu đồpos=np.arange(index_sorted.shape[0])+1# vẽ biểu đồ với plotplt.figure()plt.bar(pos,feature_importances[index_sorted],align='center')plt.xticks(pos,np.array(feature_name)[index_sorted])plt.ylabel('Độ quan trọng tương đối')plt.title(\"Độ quan trọng của tính năng sử dụng AdaBoost\")plt.show()\n \u0026nbsp;\nvà ta có biểu đồ cột như sau Nhìn vào biểu đồ trên ta có thể thấy đối với việc lấy dữ liệu để chuẩn đoán bệnh tiểu đường thì chỉ số bmi là chỉ số quan trọng nhất cần được chú ý.\nDự đoán tình hình giao thông sử dụng Extremely Random Forest regressor\nHãy ứng dụng những cái ta đã học ở phần trước để giải quyết một vấn đề thực tế. Chúng ta có thể sử dụng dữ liệu ở đây : https://archive.ics.uci.edu/ml/datasets/Dodgers+Loop+Sensor . Bộ dữ liệu này bao gồm dữ liệu đã tính toán số xe cộ di truyển trên đường trong các trận bóng chày được chơi ở sân Los Angerles Dodgers. Để dữ liệu sẵn sàng để phân tích chúng ta phải xử lý thô nó trước. Dữ liệu xử lý thô có trong file traffic_data.txt. trong file này mỗi dòng dùng dấu ',' để chia các chữ ra. Hãy xem dòng đầu tiên như thế nào: Tuesday,00:00,San Francisco,no,3\nNhìn vào dữ liệu trên ta có thể thấy nó có dạng sau: Ngày trong tuần, thời gian trong ngày, tên đội đối thủ,giá trị binarray chỉ ra trận đấu đó có đang diễn ra hay không (yes,no), cuối cùng là số phương tiện di chuyển.\nNhiệm vụ của chúng ta là dự đoán số phương tiện đang di chuyển bằng cách đưa ra những thông tin. Từ kết quả output được lấy giá trị liên tục, chúng ta cần xây dựng một mô hình có thể dự đoán được kết quả output. (từ giờ mình sẽ dùng output-đầu ra và input-đầu vào ko dịch sang tiếng việt 2 từ này nữa). Chúng ta sẽ sử dụng ERF để xây dựng mô hình này.\nTạo file python với tên gọi traffic_prediction.py\nimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.metrics import classification_report,mean_absolute_errorfrom sklearn import model_selection,preprocessingfrom sklearn.ensemble import ExtraTreesRegressor# Load data từ file txtinput_file=\"data/traffic_data.txt\"data=[]with open(input_file,'r') as f:for line in f.readlines():items=line[:-1].split(',')data.append(items)data=np.array(data)# Chúng ta cần mã hóa những features không phải là số trong dữ liệu. Chúng ta cũng cần đảm bảo là chúng ta không mã hóa nhầm số. Mỗi tính năng (features) cần được mã hóa cũng cần phải có một nhãn được mã hóa riêng biệt. Chúng ta cần theo dõi những mã hóa này bởi vì chúng ta sẽ cần chúng khi chúng ta muốn tính toán output cho một điểm dữ liệu không biết.#Giờ thì tạo một bộ mã hóa nhãn# Chuyển đổi dữ liệu chữ thành dữ liệu sốlabel_encoder=[]X_encoded=np.empty(data.shape)for i,item in enumerate(data[0]):if item.isdigit():X_encoded[:,i]=data[:,i]else:label_encoder.append(preprocessing.LabelEncoder())X_encoded[:,i]=label_encoder[-1].fit_transform(data[:,i])X=X_encoded[:,:-1].astype(int)y=X_encoded[:,-1].astype(int)# Chia dữ liệu vào tập training và testingX_train,X_test,y_train,y_test=model_selection.train_test_split(X,y,test_size=0.25,random_state=5)# Train một model dùng Extremely Forestregressor=ExtraTreesRegressor(n_estimators=100,max_depth=4,random_state=0)model=regressor.fit(X_train,y_train)# Tinhs toán hiệu suất của mô hình dựa trên dữ liệu testy_pred=model.predict(X_test)print(\"Mean absolute error: \",round(mean_absolute_error(y_test,y_pred),2))# Bây giờ sẽ xem xét làm sao để tính Output trên một điểm dữ liệu không biết. Chúng ta sẽ sử dụng những bộ mã hóa nhãn để chuyển đổi những tính năng không phải số thành những giá trị số:test_datapoint=['Tuesday','02:00','San Francisco','no']test_datapoint_encoded=[-1]*len(test_datapoint)count=0for i,item in enumerate(test_datapoint):if item.isdigit():test_datapoint_encoded[i]=int(test_datapoint[i])else:test_datapoint_encoded[i]=int(label_encoder[count].transform([test_datapoint[i]]))count+=1test_datapoint_encoded=np.array(test_datapoint_encoded)# Dự đoán kết quả Outputprint(\"Dự đoán số lượng xe là: \",model.predict([test_datapoint_encoded])[0])\n Kết quả ở Terminal:\nMean absolute error: 7.42\nDự đoán số lượng xelà: 4.937275750980459\nProcess finished with exit code 0\nTổng kết\nTrong chương này chúng ta đã học về Ensemble Learning và học cách làm thế nào để ứng dụng nó trong thực tế. Chúng ta bàn luận về Decision Tree (Cây quyết định) và cách xây dựng một mô hình phân loại dựa trên nó. Chúng ta đã học về Random Forest và Extremely Random Forest, và cách xây dựng mô hình phân loại dựa trên chúng. Chúng ta hiểu cách để ước tính mức độ tin cậy của một mô hình dự đoán. Chúng ta cũng học cách làm thế nào để giải quyết vấn đề mất cân bằng giữa các lớp.\nChúng ta đã thảo luận về cách tìm tham số tối ưu để xây dựng những mô hình sử dụng tìm kiếm lưới (grid-search). Chúng ta học về cách tính độ quan trọng tính năng tương đối. Và sau đó áp dụng kỹ thuật Ensemble Learning để giải quyết vấn đề trong thực tế là, thử dự đoán mật độ giao thông sử dung Extremely Random Forests.\nTrong chương tiếp theo chúng ta sẽ thảo luận về học không giám sát và cách phát hiện mẫu dữ liệu thị trường chứng khoán.\n\u0026nbsp;\n "
},
{
	"uri": "https://bamboofx.github.io/ai-with-python/chapter4/",
	"title": "C4: Detecting Patterns with Unsupervised Learning",
	"tags": [],
	"description": "",
	"content": "PythonAI Chapter44\nPhát hiện mẫu (Detecting Patterns) với Học không giám sát (Unsupervised Learning)\nTrong chương này chúng ta sẽ học về học không giám sát và cách sử dụng nó trong thực tế. Khi học hết chương này thì chúng ta sẽ biết các kiến thức như sau:\nHọc không giám sát là gì? Phân nhóm dữ liệu(Clustering data) cùng với thuật toán K-Means Tính toán số nhóm (cluster) cùng với thuật toán Mean Shift Dự toán chất lượng của tổ hợp cùng với silhouette scores Mô hình Gaussian Mixture là gì ? Xây dựng mô hình phân loại dựa trên Gaussian Mixture Models Tìm kiếm phân nhóm trong thị trường chứng khoán sử dụng mô hình Affinity Propagation Phân khúc thị trường chứng khoán dựa trên mô hình mua sắm (shopping patterns !?)  Học không giám sát là gì (what's unsupervised learning)?\nHọc không giám sát là cách xây dựng một mô hình machine learning mà không sử dụng tới tập nhãn trong tập dữ liệu training. Học không giám sát được tìm thấy trong các ứng dụng khác nhau trong lĩnh vực học tập, kể cả phân khúc thị trường, thị trường chứng khoán, xử lý ngôn ngữ, computer vision, và nhiều thứ khác tương tụ thế.\nTrong chương trước chúng ta đã làm việc cùng với những dữ liệu mà nó đã được dán nhãn (labeled) sẵn. Khi chúng ta có các nhãn dán trong dữ liệu training, thuật toán học cách phân loại dựa trên những nhãn đó. Nhưng trong thực tế, chúng ta không phải lúc nào cũng có những dữ liệu được dán nhãn sẵn. Đôi khi chúng ta có cả đống dữ liệu và chúng ta cần phải phân loại nó bằng một cách nào đó. Đây là lúc cần để cho Học Không giám sát thể hiện khả năng. Học không giám sát là thuật toán cố gắng xây dựng một mô hình học mà nó có thể tìm các nhóm nhỏ trong tập dữ liệu được cho sử dụng một số số liệu tương tự.\nHãy xem làm thế nào mà chúng ta xây dựng công thức vấn đề học tập trong học không giám sát. Khi chúng ta có một tập dữ liệu mà nó không có một nhãn nào trong đó, chúng ta giả định rằng dữ liệu đã được tạo ra bởi các biến được phân phối theo một cách nào đó. Quá trình học có thể tiến hành theo cách phân cấp. Bắt đầu từ những điểm dữ liệu chúng ta tạo ra. Chúng ta có thể xây dựng lên những lớp sâu hơn đại điện cho dữ liệu đó.\nPhân nhóm dữ liệu cùng với thuật toán K-Means\nPhân nhóm là một trong những thứ thông dụng nhất trong kỹ thuật học không giám sát. Kỹ thuật này được sử dụng để phân tích dữ liệu và tìm những nhóm bên trong trong bộ dữ liệu đó. Để tìm những nhóm chúng ta sử dụng một vài thứ như tính toán khoảng cách Euclidean ( Euclidean distance), để tìm nhóm nhỏ hơn. Biện pháp này cũng tương tự có thể ước tính độ chặt chẽ của một nhóm. Chúng ta có thể gọi cách phân nhóm này là quá trình tổ chức dữ liệu của chúng ta thành các nhóm nhỏ nơi mà những thành phần trong đó giống với nhau.\nMục đích của chúng ta là xác định các thuộc tính của các điểm dữ liệu và làm cho chúng thuộc về chung một nhóm. Không có một hàm phổ cập hay thuật toán nào có thể sử dụng cho tất cả các trường hợp. Nó dựa trên vấn đề mà chúng ta đang có. Ví dụ, chúng ta có thể thích tìm những điểm dữ liệu trùng hợp trong tập dữ liệu hoặc chúng ta có thể thích tìm những trường hợp ngoại lệ trong tập dữ liệu của chúng ta. Tùy tình hình mà chúng ta sẽ quyết định chọn những thước đo phù hợp.\nK-means là một thuật toán nổi tiếng trong việc phân nhóm dữ liệu. Để dùng thuật toán này, chúng ta cần phải giả định số của những nhóm này được biết trước. Sau đó chúng ta phân chia dữ liệu vào trong K-nhóm sử dụng những thuộc tính dữ liệu khác nhau. Chúng ta bắt đầu bằng việc cố định số nhóm và phân loại dữ liệu của chúng ta dựa trên đó. Ý tưởng chính ở đây là chúng ta cần cập nhật vị trí của trọng tâm K bằng cách lặp đi lặp lại liên tục cho tới khi chúng ta có một chỗ đặt tối ưu nhất cho nó.\nChúng ta có thể thấy vị trí đặt ban đầu của trọng tâm (centroid) là quan trọng nhất trong thuật toán. Những trọng tâm (centroids) nên được đặt một cách thông minh, bởi vì nó sẽ tác động trực tiếp đến kết quả. Cách tốt nhất là chúng ta nên đặt nó cách xa nhau. Về cơ bản thuật toán K-Means đặt những trọng tâm này một cách ngẫu nhiên nơi K-Means++ chọn những điểm thuật toán từ những điểm dữ liệu của danh sách input. Nó sẽ cố đặt những điểm trọng tâm cách xa nhau và gộp lại nhanh chóng. Sau đó chúng ta xét qua tập dữ liệu training và đặt những điểm dữ liệu này gần điểm trọng tâm.\nKhi chúng ta duyệt qua toàn bộ dữ liệu, chúng ta gọi đó là lần lặp đầu tiên đã kết thúc. Chúng ta có những điểm được nhóm lại dựa trên những trọng tâm đã được khởi tạo. Giờ thì chúng ta cần tính lại vị trí của những điểm trọng tâm dựa trên những nhóm mới mà chúng ta có được ở lần lặp lại đầu tiên. Khi chúng ta có được bộ điểm trọng tâm K mới, chúng ta lặp lại việc xử lý một lần nữa, chúng ta lặp lại tập dữ liệu và gán những điểm mới thành điểm trọng tâm.\nBằng cách lặp lại các bước như thế, Điểm trọng tâm di chuyển dần tới vị trí cân bằng. Sau một số lần lặp nhất định, điểm trung tâm sẽ không thay đổi vị trí của nó nữa. Điều đó có nghĩa là chúng ta đã tìm được vị trí cuối cùng của điểm trọng tâm. Những điểm trọng tâm K này là những điểm K-Means mà chúng ta sẽ sử dụng để kết luận.\nGiờ thì đặt những nhóm K-Means này vào mảng dữ liệu hai chiều và xem nó làm việc như thế nào. CHúng ta sẽ sử dụng dữ liệu ở trong file data/chap4/data_clustering.txt. Mỗi dòng có 2 số được phân tách với nhau bởi dấu ','.\nTạo 1 file python mới và đặt tên là kmeans.py\nimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.cluster import KMeansfrom sklearn import metrics# Load dữ liệuinput_file=\"data/chap4/data_clustering.txt\"X=np.loadtxt(input_file,delimiter=\",\")# Thử biểu diễn dữ liệu input để xem chúng hỗn loạn thế nàoplt.figure()plt.scatter(X[:,0],X[:,1],marker='o',facecolors='gray',edgecolors='black',s=80)#print((X[:,0]))x_min,x_max=X[:,0].min()-1,X[:,0].max()+1#print(x_min,x_max)y_min,y_max =X[:,1].min()-1,X[:,1].max()+1plt.title('Dữ liệu nhập')plt.xlim(x_min,x_max)plt.ylim(y_min,y_max)plt.xticks()plt.yticks()plt.show()# Chạy thử code ở đoạn này bạn sẽ thấy dữ liệu input được phân thành 5 nhóm. Tạo 1 K-Means Object sử dụng các tham số khai báo init,n_clusters,n_init.# Tham số init đại diện cho phương thức của phép khởi tạo để khởi tạo vị trí trung tâm của trọng tâm, thay vì chọn chúng một cách ngẫu nhiên chúng ta chọn sử dụng 'k-means++' để chọn vị trí trung tâm một cách tốt hơn# Tham số n_cluslters chỉ số nhóm sẽ tạo# Tham số n_init chỉ ra số lần thuật toán sẽ chạy trước khi quyết định ra số outcome tốt nhất.kmeans=KMeans(init='k-means++',n_clusters=5,n_init=10)# Train K-means với dữ liệu inputmodel=kmeans.fit(X)# Để biểu diễn vòng bao quanh dữ liệu chúng ta cần tạo một lưới gồm những điểm và đánh giá mô hình trên những điểm đó,# Define các bước của grid này:step_size=0.01#Chúng ta định nghĩa lưới điểm này và đảm bảo chúng ta đã bọc tất cả những giá trị dữ liệu inputx_vals,y_vals=np.meshgrid(np.arange(x_min,x_max,step_size),np.arange(y_min,y_max,step_size))# Dự đoán kết quả output cho tất cả các điểm trên lưới sử dụng mô hình K-means đã train;output=kmeans.predict(np.c_[x_vals.ravel(),y_vals.ravel()])# Biểu diễn tất cả các giá trị ouput và đổ màu cho mõi nhóm:output=output.reshape(x_vals.shape)plt.figure()plt.clf()plt.imshow(output,interpolation='nearest',extent=(x_vals.min(),x_vals.max(),y_vals.min(),y_vals.max()),cmap=plt.cm.Paired,aspect='auto',origin='lower')# Chồng những điểm dữ liệu input lên trên những vùng được tô màu:plt.scatter(X[:,0],X[:,1],marker='o',facecolors='none',edgecolors='gray',facecolor='gray',s=50)# Vẽ điểm trọng tâm của nhóm có được sử dụng thuật toán K-meanscluster_centers=kmeans.cluster_centers_plt.scatter(cluster_centers[:,0],cluster_centers[:,1],marker='X',s=200,edgecolors='red')plt.title(\"Vùng bao quanh của nhóm\")plt.xlim(x_min,x_max)plt.ylim(y_min,y_max)plt.xticks()plt.yticks()plt.show()\n \u0026nbsp;\nChạy file python trên ta có 2 hình như sau Đây là hình dữ liệu đầu vào Và đây là hình sau khi đã được phân nhóm sau khi sử dụng thuật toán KMeans. Dấu Xmàu xanh viền đỏ đại diện cho điểm trọng tâm của nhóm đó.\nTính toán số của nhóm bằng thuật toán Mean Shift.\nMean Shift là một thuật toán rất mạnh được sử dụng nhiều trong unsupervised learning. Nó là một thuật toán thống kê phi tham số được sử dụng thường xuyên cho phân nhóm. (Phi tham số là gì thì các thím tìm sách thông kê đọc tiếp nhé). ở đây mình chỉ xét Mean Shift không cần phải đưa cho nó số nhóm mà nó sẽ tự tìm ra số nhóm. Mean Shift được ứng dụng rất nhiều trong nhiều lĩnh vực khác nhau như Theo dõi vật thể hay xử lý dữ liệu trong thời gian thực.\nMục đích của Mean Shift là tìm điểm trọng tâm. Trên mỗi điểm dữ liệu trong tập dữ liệu training nó sẽ định nghĩa một vùng window xung quanh đó. Sau đó nó sẽ tính điểm trọng tâm cho vùng window này và cập nhật vị trí trọng tâm. Nó sẽ lặp lại việc này với vị trí mới bằng cách định nghĩa một vùng window khác xung quanh nó. bằng cách lặp đi lặp lại như thế chúng ta sẽ tiến dần tới trọng tâm của nhóm. Mỗi điểm dữ liệu sẽ di chuyển tới nhóm mà nó thuộc về. Những điểm này sẽ di chuyển dần tới những vùng có mật độ cao hơn. Và vùng window này là vùng quét để tính mean\nChúng tiếp tục di chuyển những điểm trọng tâm một khoảng cách và nó được gọi là (means). Khi di chuyển (shifting) một khoảng (means) nên nó được gọi là Mean Shift! Chúng tiếp tục di chuyển cho tới khi thuật toán dừng lại và các điểm trọng tâm không di chuyển nữa. Nói nhiều cũng méo hiểu mấy vì kiến thức về xác suất thống kê thủng một lỗ to đùng :D xem code thế nào nào:\ntạo 1 file đặt tên là mean_shift.py\n\u0026nbsp;\n\u0026nbsp;\nimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.cluster import MeanShift,estimate_bandwidth# load dữ liệu làm dữ liệu đầu vàoX=np.loadtxt(\"data/chap4/data_clustering.txt\",delimiter=',')# Ước tính mật độ của dữ liệu đầu vào ( Bandwidth of input data).# Tham số bandwidth là tham số cơ sở ước tính mật độ hạt nhân (kernel estimation) được sử dụng bởi thuật toán Mean Shift# Băng thông ( mật độ ) ảnh hưởng đến tốc độ di chuyển của thuật toán và số lượng nhóm# vì thế đây làm một tham số quan trọng. Nếu số bandwidth nhỏ, nó sẽ tạo ra kết quả là có quá nhiều nhóm, nếu giá trị của bandwidth lớn thì nó sẽ nhập những nhóm khác biệt vào với nhau# Tham số quantile ảnh hưởng tới tham số bandwidth, nếu số quantile lớn nó sẽ làm tăng số bandwidthbandwidth_X=estimate_bandwidth(X,quantile=0.1,n_samples=len(X))# Train mô hình MeanShift sử dụng số bandwidth bên trênmeanshift_model=MeanShift(bandwidth=bandwidth_X,bin_seeding=True)meanshift_model.fit(X)# Tìm những điểm trung tâm của tất cả các nhómcluster_centers=meanshift_model.cluster_centers_print(\"\\nCác điểm trọng tâm: \",cluster_centers)# Tìm những số của nhómlabels=meanshift_model.labels_num_clusters=len(np.unique(labels))print(\"\\nSố nhóm được phân chia =\",num_clusters)#biểu diễn dữ liệu thành hình ảnhplt.figure()markers='o*xvs'for i,markers in zip(range(num_clusters),markers):plt.scatter(X[labels==i,0],X[labels==i,1],marker=markers,color='gray')cluster_center=cluster_centers[i]plt.plot(cluster_center[0],cluster_center[1],marker='X',markerfacecolor='red',markersize=15)plt.title('Phân nhóm với Mean Shift')plt.show()\n \u0026nbsp;\nKết quả thu được\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\nTerminal :\n[7.20690909 2.20836364]\n[2.17603774 8.03283019]\n[5.97960784 8.39078431]\n[4.99466667 4.65844444]]\n\u0026nbsp;\n\u0026nbsp;\nƯớc tính chất lượng của nhóm cùng với điểm silhouette:\nNếu dữ liệu được tổ chức tự nhiên thành những nhóm riêng biệt thì nó quá dễ để hình dung và rút ra được kết luận. Nhưng nó rất hiếm khi xảy ra trong thực tế. Dữ liệu thực tế rất lớn và xáo trộn. Vì vậy chúng ta cần phải định nghĩa veefchaats lượng của các nhóm.\nSố Silhouette là một phương thức sử dụng để kiểm tra tính chắc chắn của nhóm trong dữ liệu của chúng ta. Nó đưa ra một ước tính về mỗi điểm dữ liệu có phù hợp với nhóm nó thuộc về không. Điểm Silhouette là một số liệu để đo điểm dữ liệu có phù hợp với một nhóm, cũng như so sánh với các nhóm khác. Trên mỗi điểm dữ liệu điểm silhouette score được tính dựa trên công thức:\nsilhouette score=(p-q)/max(p,q)\nở đây số q là khoảng cách trung bình (mean) đến tất cả các điểm trong nhóm mà điểm dữ liệu đang xét thuộc về nhóm đó số p là khoảng cách trung bình (mean) tới các điểm gần nhất trong các nhóm khác .  Giá trị của số silhouette nằm trong khoảng từ -1 -\u0026gt; 1. Điểm số càng gần với 1 thì có nghĩa là điểm dữ liệu đó giống với các điểm dữ liệu thuộc nhóm đó. Nếu bạn có quá nhiều ddiemr âm silhouette thì có nghĩa là chúng ta có thể có quá nhiều nhóm trong dữ liệu của chúng ta. Chúng ta cần chạy thuật toán phân nhóm một lần nữa để tìm số nhóm tối ưu hơn.\nGiờ thì thử đoạn code sau với silhouette score nào. File python -\u0026gt; ten là silhouette_scores.py\nimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.cluster import KMeansfrom sklearn import metricsX=np.loadtxt(\"data/chap4/data_quality.txt\",delimiter=',')scores=[]# Khởi tạo giá trị. values array là một danh sách dữ liệu mà chúng ta muốn lặp để tìm số nhóm tối ưuvalues=np.arange(2,10)# Lặp tất cả các giá trị và xây dựng một mô hình KMeans trong mỗi lần lặp:for num_clusters in values:kmeans=KMeans(init='k-means++',n_clusters=num_clusters,n_init=6)# Train Kmeans modelkmeans.fit(X)#Ước tính số điểm silhouette cho mô hình bên trên sử dụng phép tính khoảng cách Euclideanscore=metrics.silhouette_score(X,kmeans.labels_,metric='euclidean',sample_size=len(X))print(\"Số nhóm =\",num_clusters)print(\"Điểm silhouette: \",round(score,3))scores.append(score)#Biểu diễn điểm số silhouette cho những giá trị khác nhauplt.figure()plt.bar(values,scores,width=0.8,color='blue')plt.title('Điểm số Silhouette dựa trên số nhóm')plt.show()# Lấy Số nhóm tương ứng tốt nhất dựa trên điểm Silhouettenum_clusters=np.argmax(scores)+values[0]print(\" Số nhóm tối ưu nhất: \",num_clusters)# Train lại dữ liệu với số nhóm tối ưu nhất để vẽ ra màn hìnhkmeans.n_clusters=num_clusterskmeans.fit(X)# Biểu diễn lại dữ liệu input với số nhóm được chia#visualize_clusters(X,kmeans.labels_,'Phân nhóm tối ưu dữ liệu Input')labels=kmeans.labels_plt.figure()colors = 'rgbcmykw'markers = '.,ov^\u0026lt;\u0026gt;12348spP*hH+xXdD|_'num_clusters = len(np.unique(labels))markers = markers[0:num_clusters]colors = colors[0:num_clusters]for i, marker in zip(range(num_clusters), markers):plt.scatter(X[labels == i, 0], X[labels == i, 1], marker=marker, color=colors[i])x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1# print(x_min,x_max)y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1plt.title = 'Phân nhóm tối ưu với Silhouette Scores'plt.xlim(x_min, x_max)plt.ylim(y_min, y_max)plt.xticks()plt.yticks()plt.show()\n \u0026nbsp;\nKết quả :\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\nSố nhóm = 2\nĐiểm silhouette: 0.478\nSố nhóm = 3\nĐiểm silhouette: 0.547\nSố nhóm = 4\nĐiểm silhouette: 0.579\nSố nhóm = 5\nĐiểm silhouette: 0.589\nSố nhóm = 6\nĐiểm silhouette: 0.61\nSố nhóm = 7\nĐiểm silhouette: 0.554\nSố nhóm = 8\nĐiểm silhouette: 0.498\nSố nhóm = 9\nĐiểm silhouette: 0.445\nSố nhóm tối ưu nhất:\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\nBạn cũng có thể thay dữ liệu đầu vào bằng file data_clustering.txt sẽ có kết quả phân nhóm tối ưu là 5\n\u0026nbsp;\nMô hình Gaussian Mixture là gì ?\nTrước khi chúng ta nói về mô hình Gaussian Mixture chúng ta cần phải hiểu mô hình Mixture là gì. Một mô hình Mixture là một dạng mô hình tính mật độ xác suất, chúng ta giả định những dữ liệu được điều chỉnh bởi một ố thành phần phân phối. Nếu những thành phần phân phối đó là Gaussian, thì nhưng mô hình đó được gọi là mô hình Gaussian Mixture. Những thành phần phân phối này được kết hợp theo thứ tự để tạo thành một hàm mật độ đa phương thức (multi-modal) thứ mà sẽ trở thành mô hình hỗn hợp (mixture model).\nHãy thử xem một ví dụ để hiểu cách làm việc của mô hình hỗn hợp (Mixture Model).  Chúng ta muốn xây dựng một mô hình thói quem mua sắm của tất cả người dân ở Nam Mỹ. Có một cách đó là tìm tất cả thói quen mua sắm của cả lục địa nam mỹ vào trong một mô hình. Nhưng ta cũng biết là mỗi người ở mỗi nước có những thói quen mua sắm khác nhau. Chúng ta cần hiểu cách mọi người trong mỗi quốc gia mua sắm như thế nào. Nếu chúng ta muốn có được một mô hình tiêu biểu, chúng ta cần phải tính cho tất cả những thay đổi trong lục địa Nam mỹ. Trong trường hợp này chúng ta có thể dùng mixture models để xây dựng mô hình thói quen mua sắm của từng nước và sau đó kết hợp chúng lại thành một mô hình lớn Mixture Models. Bằng cách này chúng ta sẽ không bị thiếu các hành vi cơ bản của từng nước. Bằng cách không bắt tất cả các nước dùng chung một mô hình, chúng ta có thể trích xuất dữ liệu chính xác hơn.\nMột thứ thú vị được chú ý ở đây mixture models là một bán tham số, nó có nghĩa là chúng phụ thuộc một phần vào một tập hợp các hàm xác định trước (predefied functions). Chúng cũng có thể cung cấp xác suất tốt hơn trong mô hình hóa các phân phối cơ bản trong dữ liệu của chúng ta. Chúng có thể lấp đầy các khoảng trống trong một bộ dữ liệu thưa thớt.\nNếu chúng ta định nghĩa hàm, thì mixture model sẽ biến từ bán-tham số (semi-parametric) thành tham số (prametric). Mô hình bao gồm cả tham số có số chiều hữu hạn và tham số có số chiều vô hạn thường được gọi là mô hình bán tham số. Vì thế Gaussian Mixture Model (GMM) là một mô hình tham số đại diện như một trọng số của hàm Gaussian ( Tìm hiểu thêm hàm Gaussian trên google nhé).. Chúng ta giả định những dữ liệu đó được tao ra bởi một bộ của mô hình Gaussian và kết hợp với nhau bằng cách nào đó. GMM rất mạnh và thường được ứng dụng trong rất nhiều lĩnh vực. Tham số của GMM được ước tính từ dữ liệu training sử dụng các thuật toán như (Expectation-maximization (EM) hay Maximum A-posteriori(MAP). Một vài ứng dụng thông dụng của GMM như là truy suất cơ sở dữ liệu hình ảnh, mô hình biến động thị trường chứng khoán, xác minh sinh trắc, và nhiều thứ nữa.\nXây dựng một bộ phân loại dựa trên GMM\nGiờ thì dùng Python làm một mô hình GMM để xem thử. Tạo một file Python đặt tên là Gaussian_mixture.py:\nimport numpy as npimport matplotlib.pyplot as pltfrom matplotlib import patchesfrom sklearn import datasetsfrom sklearn.mixture import GaussianMixturefrom sklearn.model_selection import StratifiedKFold# Lấy bộ dữ liệu iris trong scikit-learn để làm dữ liệu phân tích:iris=datasets.load_iris()# Chia dữ liệu thành 2 bộ dữ liệu Training và testing với tỉ lệ 8/2.#Tham số n_folds là số tập hợp con bạn sẽ có được. Chúng ta gán cho nó giá trị 5 có nghĩa là bộdữ liệu sẽ được chia thành 5 phần. Chúng ta sẽ dùng 4 phần để training và một phần còn lại để test:indices=StratifiedKFold(n_splits=5)train_index, test_index = next(iter(indices.split(iris.data, iris.target)))# chia dữ liệu train và test:X_train,y_train=iris.data[train_index],iris.target[train_index]X_test,y_test=iris.data[test_index],iris.target[test_index]# Phân chia số lớp trong dữ liệu trainnum_classes=len(np.unique(y_train))# Xây dựng một bộ phân loại GMM sử dụng những tham số thích hợp# Tham số n_components là số thành phần trong phân phối cơ bản. Trong trường hợp này nó sẽ là số lớp riêng biệt trong dữ liệu của chúng ta.# Tham số coveriance_type, Chúng ta cần chỉ rõ kiểu (type) của phương sai. mặc định là 'full'# Tham số init_params điều khiển số tham số cần đề cập nhật trong suốt quá trình training. chúng ta dùng tham trị là 'wc' (mặc định là kmeans) có nghĩa là trọng số và hiệu phương sai được cập nhật liên tục trong quá trình training# Tham só max_iter là số lần lặp Expectation_Maximization sẽ thực hiện trong suốt quá trình trainingclassifier=GaussianMixture(n_components=num_classes,covariance_type='full',max_iter=20)# Khởi tạo means (trung bình) của classifier:classifier.means_init=np.array([X_train[y_train==i].mean(axis=0) for i in range(num_classes)])# Train mô hình GMM sử dụng dữ liệu trainingmodel=classifier.fit(X_train)# Vẽ biểu đồ bao quanh cho classifier. Chúng ta cần phân chia giá trị vùng (eigenvalues) và vector vùng (eigenvectors) để vẽ hình elip bao quanh những nhóm đó.plt.figure()colors='rgb'markers='ox*'for i,color in enumerate(colors):covariances=classifier.covariances_[i][:2,:2]eigenvalues,eigenvectors=np.linalg.eig(covariances)# Normalize eigenvector đầu tiên:norm_vec=eigenvectors[1]/np.linalg.norm(eigenvectors[0])# Hình elip cần phải xoay chính xác để chỉ ra vùng phân chia : ước tính góc:angle=np.arctan2(norm_vec[1],norm_vec[0])angle=180*angle/np.pi# Phóng to hình eclipse để biểu diễn. số eigenvalues tượng trưng cho cỡ của hình eclipse#scaling_factor=8#eigenvalues*=scaling_factoreigenvalues = 2. * np.sqrt(2.) * np.sqrt(eigenvalues)# Vẽ hình eclipseeclipse=patches.Ellipse(classifier.means_[i,:2],eigenvalues[0],eigenvalues[1],180+angle,color=color)axis_handle=plt.subplot(1,1,1)eclipse.set_clip_box(axis_handle.bbox)eclipse.set_alpha(0.5)axis_handle.add_artist(eclipse)# vẽ dữ liệu inputcurr_data=iris.data[iris.target==i]plt.scatter(curr_data[:,0],curr_data[:,1],marker='\u0026gt;',facecolors='c',s=10,label=iris.target_names[i])test_data=X_test[y_test==i]plt.scatter(test_data[:,0],test_data[:,1],marker=markers[i],facecolors=color,s=50,label=iris.target_names[i])# Tính toán dự đoán cho dữ liệu train và dữ liệu testy_train_pred=classifier.predict(X_train)accuracy_training=np.mean(y_train_pred.ravel()==y_train.ravel())*100print(\"Độ chính xác của training data: \",accuracy_training)y_test_pred=classifier.predict(X_test)accuracy_test=np.mean(y_test_pred.ravel()==y_test.ravel())*100print(\"Độ chính xác của test data: \",accuracy_test)plt.title(' Phân loại GMM ')plt.xticks()plt.yticks()plt.show()\n \u0026nbsp;\nKết quả được in ra :\nTerminal:\nĐộ chính xác của training data: 95.83333333333334\nĐộ chính xác của test data: 100.0\nTìm nhóm trong thị trường chứng khoán sử dụng Affinity Propagation model\nAffinity Propagation (lan truyền mối quan hệ) là một thuật toán phân nhóm không bắt buộc chúng ta phải chỉ định số nhóm trước. Bởi vì tính chất chung của nó và dễ dàng thực hiện, nó được tìm thấy rất nhiều trong các ứng dụng ở nhiều lĩnh vực. Nó tìm ra những đại diện của các nhóm được gọi là các chuẩn mực ( exemplars) sử dụng một kỹ thuật gọi là truyền thông tin (message passing). Chúng ta bắt đầu bằng cách chỉ định những biện pháp tương tự mà chúng ta muốn nó xem xét. Nó sẽ đồng thời xem xét tất cả nhũng dữ liệu training như là một chuẩn mực có khả năng. Sau đó nó sẽ truyền những gói thông tin giữa các điểm dữ liệu cho tới khi nó tìm thấy một bộ chuẩn mực riêng.\nNhững thông tin được truyền trong 2 bước luân phiên được gọi là responsibility (trách nhiệm) và avaibility (khả dụng). Responsibility là tin được gửi từ các thành phần trong nhóm tới thành phần chuẩn được chọn làm \"ứng cử viên\" ( candidate exemplars), cho biết mức độ phù hợp của điểm dữ liệu này như là một vật mẫu của nhóm. Avaibility là tin nhắn được gửi từ các ứng cử viên tới các thành phần khác của nhóm cho biết nó phù hợp thế nào ở vai trò của một ứng cử viên ( as an exemplar). Thuật toán sẽ làm như thế cho tới khi một ứng cử viên tối ưu nhất.\nCũng có một tham số được gọi là số ứng cử viên được ưu tiên tìm thấy. Nếu ta chọn một số có giá trị lớn , nó sẽ làm thuật toán của chúng ta tìm quá nhiều nhóm. Nếu ta chọn số có giá trị thấp nó sẽ làm cho số nhóm nhỏ. Một giá trị phù hợp là một giá trị trung bình giữa 2 số.\nSử dụng Affinity Propagation # Author: Gael Varoquaux gael.varoquaux@normalesup.org# License: BSD 3 clauseimport sysimport numpy as npimport matplotlib.pyplot as pltfrom matplotlib.collections import LineCollectionimport pandas as pdfrom sklearn import cluster, covariance, manifoldprint(__doc__)# ############################################################################## Lấy dữ liệu từ internet# Dữ liệu này từ năm 2003 - 2008. Dữ liệu này dễ xử lý để so sánh: (không quá lâu vì thì chúng ta có thể lấy dữ liệu về các công ty công nghệ và không sup đổ trước năm 2008# Đây là dữ liệu lịch sử có thể dễ dàng lấy được từ các API như quandl.com và alphavantage.cosymbol_dict = {'TOT': 'Total','XOM': 'Exxon','CVX': 'Chevron','COP': 'ConocoPhillips','VLO': 'Valero Energy','MSFT': 'Microsoft','IBM': 'IBM','TWX': 'Time Warner','CMCSA': 'Comcast','CVC': 'Cablevision','YHOO': 'Yahoo','DELL': 'Dell','HPQ': 'HP','AMZN': 'Amazon','TM': 'Toyota','CAJ': 'Canon','SNE': 'Sony','F': 'Ford','HMC': 'Honda','NAV': 'Navistar','NOC': 'Northrop Grumman','BA': 'Boeing','KO': 'Coca Cola','MMM': '3M','MCD': 'McDonald\\'s','PEP': 'Pepsi','K': 'Kellogg','UN': 'Unilever','MAR': 'Marriott','PG': 'Procter Gamble','CL': 'Colgate-Palmolive','GE': 'General Electrics','WFC': 'Wells Fargo','JPM': 'JPMorgan Chase','AIG': 'AIG','AXP': 'American express','BAC': 'Bank of America','GS': 'Goldman Sachs','AAPL': 'Apple','SAP': 'SAP','CSCO': 'Cisco','TXN': 'Texas Instruments','XRX': 'Xerox','WMT': 'Wal-Mart','HD': 'Home Depot','GSK': 'GlaxoSmithKline','PFE': 'Pfizer','SNY': 'Sanofi-Aventis','NVS': 'Novartis','KMB': 'Kimberly-Clark','R': 'Ryder','GD': 'General Dynamics','RTN': 'Raytheon','CVS': 'CVS','CAT': 'Caterpillar','DD': 'DuPont de Nemours'}symbols, names = np.array(sorted(symbol_dict.items())).Tquotes = []for symbol in symbols:print('Fetching quote history for %r' % symbol, file=sys.stderr)url = ('https://raw.githubusercontent.com/scikit-learn/examples-data/''master/financial-data/{}.csv')quotes.append(pd.read_csv(url.format(symbol)))close_prices = np.vstack([q['close'] for q in quotes])open_prices = np.vstack([q['open'] for q in quotes])#Các thay đổi hàng ngày được để trong dấu ngoặc kép là những thứ mang nhiều thông tin nhấtvariation = close_prices - open_prices# ############################################################################## Tìm hiểu cấu trúc đồ họa từ các mối tương quanedge_model = covariance.GraphicalLassoCV(cv=5)# chuẩn hóa chuỗi thời gian: sử dụng correlations thay vì covariance hiệu quả hơn đề phục hồi cấu trúc#X = variation.copy().TX /= X.std(axis=0)edge_model.fit(X)# ############################################################################## Nhóm các nhóm sử dụng affinity propagation_, labels = cluster.affinity_propagation(edge_model.covariance_)n_labels = labels.max()for i in range(n_labels + 1):print('Cluster %i: %s' % ((i + 1), ', '.join(names[labels == i])))# ############################################################################## Tìm một chiều thấp nhỏ(low - dimension) để hiển thị biểu đồ. Tìm vị trí tốt nhất của các điểm ( the stocks) trên mặt phẳng 2D# chúng ta sử dụng tham giá trị dense( dày đặc) cho tham số eigen_solver ( là khởi tạo một tập hợp các vector ngẫu nhiên mà chúng ta không kiểm soát)# ngoài ra chúng ta sử dụng một số lớn cho tham số neighbors để nắm bắt được những cấu trúc lớnnode_position_model = manifold.LocallyLinearEmbedding(n_components=2, eigen_solver='dense', n_neighbors=6)embedding = node_position_model.fit_transform(X.T).T# ############################################################################## Vẽ đồ thịplt.figure(1, facecolor='w', figsize=(10, 8))plt.clf()ax = plt.axes([0., 0., 1., 1.])plt.axis('off')# Biểu diễn đồ thị các mối tương quanpartial_correlations = edge_model.precision_.copy()d = 1 / np.sqrt(np.diag(partial_correlations))partial_correlations *= dpartial_correlations *= d[:, np.newaxis]non_zero = (np.abs(np.triu(partial_correlations, k=1)) \u0026gt; 0.02)# Plot the nodes using the coordinates of our embeddingplt.scatter(embedding[0], embedding[1], s=100 * d ** 2, c=labels,cmap=plt.cm.nipy_spectral)# Phác họa các cạnhstart_idx, end_idx = np.where(non_zero)# a sequence of (*line0*, *line1*, *line2*), where::# linen = (x0, y0), (x1, y1), ... (xm, ym)segments = [[embedding[:, start], embedding[:, stop]]for start, stop in zip(start_idx, end_idx)]values = np.abs(partial_correlations[non_zero])lc = LineCollection(segments,zorder=0, cmap=plt.cm.hot_r,norm=plt.Normalize(0, .7 * values.max()))lc.set_array(values)lc.set_linewidths(15 * values)ax.add_collection(lc)# Biểu hiện các nhãn. Điều khó ở đây là chúng ta muốn xác định các vị trí nhãn để tránh trùng lặp với các nhãn khácfor index, (name, label, (x, y)) in enumerate(zip(names, labels, embedding.T)):dx = x - embedding[0]dx[index] = 1dy = y - embedding[1]dy[index] = 1this_dx = dx[np.argmin(np.abs(dy))]this_dy = dy[np.argmin(np.abs(dx))]if this_dx \u0026gt; 0:horizontalalignment = 'left'x = x + .002else:horizontalalignment = 'right'x = x - .002if this_dy \u0026gt; 0:verticalalignment = 'bottom'y = y + .002else:verticalalignment = 'top'y = y - .002plt.text(x, y, name, size=10,horizontalalignment=horizontalalignment,verticalalignment=verticalalignment,bbox=dict(facecolor='w',edgecolor=plt.cm.nipy_spectral(label / float(n_labels)),alpha=.6))plt.xlim(embedding[0].min() - .15 * embedding[0].ptp(),embedding[0].max() + .10 * embedding[0].ptp(),)plt.ylim(embedding[1].min() - .03 * embedding[1].ptp(),embedding[1].max() + .03 * embedding[1].ptp())plt.show()\n \u0026nbsp;\nĐồ thị được vẽ \u0026nbsp;\n\u0026nbsp;\nOutput ở Terminal Cluster 1: Apple, Amazon, Yahoo\nCluster 2: Comcast, Cablevision, Time Warner\nCluster 3: ConocoPhillips, Chevron, Total, Valero Energy, Exxon\nCluster 4: Cisco, Dell, HP, IBM, Microsoft, SAP, Texas Instruments\nCluster 5: Boeing, General Dynamics, Northrop Grumman, Raytheon\nCluster 6: AIG, American express, Bank of America, Caterpillar, CVS, DuPont de Nemours, Ford, General Electrics, Goldman Sachs, Home Depot, JPMorgan Chase, Marriott, 3M, Ryder, Wells Fargo, Wal-Mart\nCluster 7: McDonald's\nCluster 8: GlaxoSmithKline, Novartis, Pfizer, Sanofi-Aventis, Unilever\nCluster 9: Kellogg, Coca Cola, Pepsi\nCluster 10: Colgate-Palmolive, Kimberly-Clark, Procter Gamble\nCluster 11: Canon, Honda, Navistar, Sony, Toyota, Xerox\n\u0026nbsp;\nPhân khúc thị trường dựa trên mô hình thói quen mua sắm.\nHãy xem làm sao để chúng ta có thể áp dụng học koong giám sát vào phân khúc thị trường dựa trên thói quen mua sắm. Bạn được cung cấp một file gọi là sales.csv trong thư mục data/chap4. File này chưa các mua bán chi tiết của trên cùng từ những cửa hàng bán lé quần áo. Nhiệm vụ của chúng ta cần đạt được là xác định các mẫu và phân khúc thị trường dựa trên số đơn vị bán ra trong cửa hàng.\nimport csvimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.cluster import MeanShift,estimate_bandwidthfrom mpl_toolkits.mplot3d import Axes3D# Load dữ liệu từ file csv. Chúng ta sử dụng csv reader trong python để đọc dữ liệu từ file và chuyển nó thành numpy arrayinput_file=\"data/chap4/sales.csv\"file_reader=csv.reader(open(input_file,'r'),delimiter=',')X=[]for count,row in enumerate(file_reader):if not count:names=row[1:]continueX.append([float(x) for x in row[1:]])X=np.array(X)# Tình băng thông của dữ liệu inputbandwidth=estimate_bandwidth(X,quantile=0.8,n_samples=len(X))# Train một mô hình mean shift dựa trên số bandwidthmeanshift_model=MeanShift(bandwidth=bandwidth,bin_seeding=True)meanshift_model.fit(X)# Tách nhãn và tất cả các điểm trung tâm của nhóm:labels=meanshift_model.labels_cluster_centers=meanshift_model.cluster_centers_num_cluster=len(np.unique(labels))# In ra terminal các số để kiểm traprint(\"Số nhóm của dữ liệu nhập: \",num_cluster)print(\"Điểm trung tâm của các nhóm: \")print('\\t'.join([name[:5] for name in names]))for cluster_center in cluster_centers:print(\"\\t\".join([str(int(x)) for x in cluster_center]))# chúng ta làm việc với dữ liệu 6 chiều. Lần lượt hiển thị dữ liệu, chúng ta lấy dữ liệu 2 chiều sử dụng chiều thứ 2 và thứ 3:cluster_centers_2d=cluster_centers[:,0:2]# phác họa các điểm trung tâm của nhóm trên biểu đồfig=plt.figure()ax=fig.add_subplot(111,projection='3d')x=cluster_centers[:,0]y=cluster_centers[:,1]z=cluster_centers[:,2]c=cluster_centers[:,3]ax.scatter(x,y,z,c=c,cmap=plt.hot())#plt.scatter(cluster_centers_2d[:,0],cluster_centers_2d[:,1],s=120,edgecolors='r',facecolors='none')##offset=0.25#plt.xlim(cluster_centers_2d[:,0].min() - offset * cluster_centers_2d[:,0].ptp(),# cluster_centers_2d[:,0].max() + offset * cluster_centers_2d[:,0].ptp(),)#plt.ylim(cluster_centers_2d[:,1].min() - offset * cluster_centers_2d[:,1].ptp(),# cluster_centers_2d[:,1].max() + offset * cluster_centers_2d[:,1].ptp())#for i,name in enumerate(names):# plt.text(cluster_centers_2d[i,0],cluster_centers_2d[i,1],name)print(cluster_centers_2d[:,0])plt.title('các điểm trung tâm')plt.show()\n \u0026nbsp;\nplot thể hiện ra đồ thị :\n\u0026nbsp;\n\u0026nbsp;\nSố nhóm của dữ liệu nhập: 9\nĐiểm trung tâm của các nhóm: Tshir\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Tank \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Halte\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Turtl\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Tube \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Sweat\n9823\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4637\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6539\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2607\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2228\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1239\n38589\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;44199\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;56158\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5030\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;24674\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4125\n104972\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;29186\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;19415\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;16016\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5060\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;9372\n38741\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;40539\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;20120\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;35059\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;255\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;50710\n35314\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;16745\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;12775\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;66900\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1298\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5613\n28333\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;34263\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;24065\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5575\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4229\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;18076\n22617\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;77873\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;32543\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1005\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;21035\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;837\n14987\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;46397\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97393\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1127\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;37315\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3235\n7852\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4939\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;63081\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;134\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;40066\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1332\n\u0026nbsp;\nTổng kết chương :\nTrong chương này chúng ta đã bắt đầu bằng cách thảo luận về học không giám sát và ứng dụng của nó. Chúng ta học về nhóm dữ liệu và cách nhóm dữ liệu sử dụng thuật toán K-Means. Chúng ta thảo luận về cách dự toán số lượng nhóm cùng với thuật toán Mean Shift. Chúng ta bàn về silhouete scores và cách tính toán chất lượng của nhóm. Chúng ta học về mô hình Gaussian Mixture và cách xây dựng một bộ phân loại dựa trên nó. Chúng ta cũng thảo luận về mô hình Affinity Propagation và cách sử dụng nó để phân nhóm những nhóm nhỏ trong thị trường chứng khoán. Sau đó chúng ta ứng dụng thuật toán Mean Shift để phân loại thì trường dựa trên thói quen mua sắm. Trong chapter tiếp theo chúng ta sẽ học về cách xây dựng một recommendation engine.\n\u0026nbsp;\n\u0026nbsp;\n "
},
{
	"uri": "https://bamboofx.github.io/ai-with-python/chapter5/",
	"title": "C5: Building Recommender Systems",
	"tags": [],
	"description": "",
	"content": "PythonAI Chapter55\nXây dựng hệ thống gợi ý, giới thiệu\n\u0026nbsp;\n\u0026nbsp;\nTrong chương này chúng ta sẽ học về các xây dựng một hệ thống gợi ý video. Chúng ta sẽ thảo luận về cách xây dựng một đường ống training (training pipeline) có thể train cùng với tham số tùy biến. Chúng ta sẽ học về bộ phân loại Nearest Neighbors và xem làm thế nào để thực hiện nó. Chúng ta sẽ dùng những khái niệm để thảo luận hợp tác các bộ lọc và sau đó sử dụng nó để xây dựng một recmmender system.\nSauk hi học xong chương này chúng ta sẽ học được những thứ sau:\nTạo một training pipeline Tách những điểm dữ liệu hàng xóm gần nhất (Nearest Neighbors) Xây dựng một bộ phân loại K Nearest Neighbors Tính điểm tương tự trong bộ dữ liệu Tìm những người dùng giống nhau sử dụng bộ lọc tích hợp Xây dựng một hệ thống gợi ý xem phim  Tạo một training pipeline\nNhững hệ thống Machine-Learning thường được xây dựng bằng cách sử dụng nhiều modules khác nhau. Những modules này được kết hợp theo một cách riêng để đạt được mục đích cuối cùng. Thư viện sckit-learn có những hàm có thể giúp chúng ta xây dựng nhữngđường ống bằng cách nối những modules khác nhau vào với nhau. Chúng ta chỉ phải chỉ định những modules cùng với cái thông số tương ứng. Sau đó nó sẽ xây dựng một đường ống bằng cách sử dụng những modules để sử lý và huấn luyện dữ liệu hệ thống.\nCác đường ống này có thể bao gồm các modules để thực hiện các chức năng khác nhau như lựa chọn tính năng (feature selection), xử lý thô (preprocessing), random forest, phân nhóm, và nhiều thứ như vậy. Trong phần này, chúng ta sẽ thực hiện xây dựng một đường ống để chọn tính năng K-top từ một điểm dữ liệu input và sau đó phân loại chúng sử dụng một bộ phân loại Extremely Random Forest.\nfrom sklearn.datasets import samples_generatorfrom sklearn.feature_selection import SelectKBest,f_regressionfrom sklearn.pipeline import Pipelinefrom sklearn.ensemble import ExtraTreesRegressor# Giờ thì hãy tạo một vài nhãn từ dữ liệu cho trước để train và test. Trong scikit-learn có một functions có thể thực hiện nó.# Trong chỗ này chúng ta sẽ tạo 150 điểm dữ liệu, tại mỗi điểm dữ liệu có một vector 25 chiều.# Những số trong mỗi vector này sẽ được tạo ra bằng cách sử dụng một bộ tạo số ngẫu nhiên. Mỗi điểm dữ liệu có 6 thông tin tính năng và không có tính năng thừa.#n_sample điểm dữ liệu#n_feature số vector trong điểm dữ liệu#n_class số lớp#n_informative số thông tin trên điểm dữ liệuX,y=samples_generator.make_classification(n_samples=150,n_features=25,n_classes=3,n_informative=6,n_redundant=0,random_state=7)# Khối đầu tiên trong đường ống là bộ chọn tính năng. Khối này sẽ chọn số K tính năng tốt nhất.# Hãy đặt giá trị của số K là 9k_best_selector=SelectKBest(f_regression,k=9)# Khối tiếp theo trong đường ống là một bộ phân loại Extremely Random Forest#n_estimator số lần ước tính#max_depth độ cao lớn nhất của cây phân loạiclassifier=ExtraTreesRegressor(n_estimators=60,max_depth=4)# Giờ thì xây dựng một đường ống bằng cách nối những khối riêng biệt bên trên chúng ta đã tạo. Chúng ta có thể đặt tên cho từng khối để theo dõi:processor_pipeline=Pipeline([('selector',k_best_selector),('erf',classifier)])# Chúng ta có thể thay đổi tham số của những nhóm riêng biệt này. Hãy thử thay đổi giá trị của số K trong khối đầu tiên thành 7 và số lần tính của khối 2 thành 30.# Chúng ta sẽ dụng tên chúng ta đã gán phần trước để làm:processor_pipeline.set_params(selector__k=5,erf__n_estimators=30)# Train đường ống này sử dụng dữ liệu ví dụprocessor_pipeline.fit(X,y)# Dự đoán kết quả đầu ra cho tất cả dữ liệu nhập và in nó:output=processor_pipeline.predict(X)print('Dự đoán đầu ra:',output)# Tính điểm sử dụng nhãn dữ liệu đã dduwwocj gánprint(\"Điểm số: \",processor_pipeline.score(X,y))# Phân tách những tính năng được chọn bởi bộ chọn khối. Chúng ta chỉ định chúng ta muốn chọn 7 tính năng trong số 25 tính năngstatus=processor_pipeline.named_steps['selector'].get_support()print(status)selected=[i for i,x in enumerate(status) if x]print(\"Chỉ số của các tính năng được chọn: \",', '.join(str(x) for x in selected))\n \u0026nbsp;\nDự đoán đầu ra: [0.72580607 1.48776254 1.57350286 0.16845332 1.63143811 0.28419715\n1.75438204 0.85543849 0.20870588 0.76611338 0.91033707 1.45821884\n1.07736331 0.46991242 1.60225032 1.38814221 0.9318791 0.34375345\n0.62729184 0.80638229 0.29684763 1.58691235 0.9449351 0.97980186\n1.613547 1.54260186 0.54987841 0.25793025 1.29203871 1.12941252\n0.72099818 1.18018859 1.28317036 0.23628288 1.52248457 1.5537845\n0.81060883 1.03988114 1.82119663 1.86657518 1.50205423 0.48127497\n0.73752893 1.15401467 1.73428078 0.67778417 1.44112959 1.78170262\n0.8867858 0.31649897 0.89994623 1.7522823 1.1798259 1.3315383\n1.50206304 0.2391394 1.78071697 1.62861004 0.27189563 1.82601046\n1.58085223 0.30161375 1.01566276 0.38762182 1.59002443 1.14571478\n0.59566876 0.82466357 1.00773185 1.70603515 0.975447 0.85403612\n0.22619174 1.78244246 0.55902649 0.27046838 0.86079451 1.28609422\n1.74811993 0.11410267 0.12870315 1.27552995 1.29504346 1.46579916\n1.12245889 0.80675573 0.2941248 0.34417039 1.32394419 1.39283537\n1.47331864 1.17032674 1.80521567 0.71298127 1.79290549 1.01303105\n1.45748857 1.02292709 0.62299891 0.4167403 0.86323926 0.77563993\n0.79056248 0.96381714 1.85775872 1.40334825 1.17785629 1.72186092\n0.43689893 0.89294742 1.0053075 0.18375809 1.60450265 0.44927514\n0.51530143 0.47989225 0.84356646 0.78441825 0.84729926 0.81339102\n0.31165777 0.67248316 0.2571075 1.10245832 1.54534611 0.3781706\n0.48948835 0.43782342 1.65147322 0.78225598 1.66001697 0.30721129\n0.29983231 0.81797258 0.55205279 0.95097526 0.78301223 0.75155813\n0.74325836 0.62748663 0.68803258 1.06119408 1.2500917 1.20557905\n0.60565937 0.78766494 1.50937821 0.63082446 1.27099315 1.26319842]\nĐiểm số: 0.6754705760516474\n[False False False False True False False True False False False False\nTrue False False False False True False False False False True False\nFalse]\nChỉ số của các tính năng được chọn: 4, 7, 12, 17, 22\n\u0026nbsp;\n\u0026nbsp;\nDanh sách output cho thấy các nhãn được dự đoán sử dụng bộ xử lý. Điểm số là hiệu quả của phép phân tích. và cuối cùng là các chỉ số của các tính năng được chọn\nTrích xuất nearest neighbors\nHệ thống Recommender system sử dụng khái niệm nearest neighbors để tìm những khuyến nghị tốt nhất. Nearest neighbors( hàng xóm gần nhất) đề cập đến quá trình xử lý tìm kiếm những điểm dữ liệu gần nhất với điểm dữ liệu đầu vào từ bộ dữ liệu cho trước. Nó thường được dùng để xây dựng hệt thống phân loại để phân loại một điểm dữ liệu dựa trên những điểm tương tự của tập dữ liệu input tới các lớp khác nhau. import numpy as npimport matplotlib.pyplot as pltfrom sklearn.neighbors import NearestNeighbors# Tạo một bộ dữ liệu 2DX=np.array([[2.1,1.3],[1.3, 3.2], [2.9, 2.5], [2.7, 5.4], [3.8, 0.9],[7.3, 2.1],[4.2, 6.5], [3.8, 3.7], [2.5, 4.1], [3.4, 1.9],[5.7, 3.5], [6.1, 4.3], [5.1, 2.2], [6.2, 1.1]])# Định nghĩa một điểm nearest neighbors chúng ta muốn táchk=5# tạo một bộ dữ liệu testtest_datapoint=[4.3,2.7]# Vẽ dữ liệu inputplt.figure()plt.title(\"Dữ liệu nhập\")plt.scatter(X[:,0],X[:,1],marker='o',s=75,color='r')# Tạo và huấn luyện một mô hình điểm K Nearest Neigbors sử dụng dữ liệu nhập.knn_model=NearestNeighbors(n_neighbors=k,algorithm='ball_tree')knn_model.fit(X)# Sử dụng mô hình này để tách dữ liệu nearest neighbors dựa trên điểm dữ liệu testdistance,indices=knn_model.kneighbors([test_datapoint])print('K Nearest Neighbors')for rank,i in enumerate(indices[0][:k],start=1):print(str(rank)+\"==\u0026gt;\",X[i])# Vẽ đồ thị điểm gần nhất:plt.figure()plt.title('Nearest neighbors')plt.scatter(X[:,0],X[:,1],marker='o',s=75,color='r')plt.scatter(X[indices][0][:][:, 0], X[indices][0][:][:, 1],marker='H',s=350,color=\"c\",facecolor='none')plt.scatter(test_datapoint[0],test_datapoint[1],marker='x',s=75,color='y')plt.show();\n \u0026nbsp;\nKết quả:\n\u0026nbsp;\nK Nearest Neighbors\n1==\u0026gt; [5.1 2.2]\n2==\u0026gt; [3.8 3.7]\n3==\u0026gt; [3.4 1.9]\n4==\u0026gt; [2.9 2.5]\n5==\u0026gt; [5.7 3.5]\n\u0026nbsp;\n\u0026nbsp;\nDựa vào hình ta tìm thấy năm điểm gần nhất với điểm dữ liệu test Xây dựng một bộ phân loại K-nearest Neighbors\nMột bộ phân loại K-Nearest Neighbors là một mô hình phân loại sử dụng thuật toán tìm hàng xóm gần nhất của một điểm dữ liệu cho trước. Thuật toán này tìm những điểm K gần nhất trong bộ dữ liệu training để nhận diện thể loại của điểm dữ liệu input. Nó sẽ đặt một class cho điểm dự liệu này dựa trên một phương pháp bầu chọn đa số. Từ danh sách của những điểm K này, chúng ta sẽ nhìn vào những lớp tương ứng và chọn lấy một cùng với số phiếu bầu cao nhất. Code nào:\n\u0026nbsp;\nimport numpy as npimport matplotlib.pyplot as pltimport matplotlib.cm as cmfrom sklearn import datasetsfrom sklearn.neighbors import KNeighborsClassifier# lấy dữ liệu từ file chap5/data.txtdata=np.loadtxt(\"data/chap5/data.txt\",delimiter=',')X,y=data[:,:-1],data[:,-1].astype(np.int)# Vẽ dữ liệu nhậpplt.figure()plt.title(\"Dữ liệu input\")marker='v^os'marker=[marker[i] for i in y]for i in range(X.shape[0]):plt.scatter(X[i,0],X[i,1],marker=marker[i],s=75,edgecolors='r',facecolors='none')# Định nghĩa số điểm lân cận mà ta muốn lấynum_neighbors=12# Định nghĩa khoảng cách mỗi ô lưới mà chúng ta sẽ vẽgrid_step=0.01# Tọa một bộ phân loại K_nearest Neigborsclassifier=KNeighborsClassifier(n_neighbors=num_neighbors,weights='distance')# Train mô hìnhclassifier.fit(X,y)# tạo một lưới giá trị mà ta sẽ sử dụng để vẽ đồ thịx_min,x_max=X[:,0].min()-1,X[:,0].max()+1y_min,y_max=X[:,1].min()-1,X[:,1].max()+1x_values,y_values=np.meshgrid(np.arange(x_min,x_max,grid_step),np.arange(y_min,y_max,grid_step))# Đánh giá bộ phân loại trên tất cả các điểm trên lưới để vẽ đồ thịoutput=classifier.predict(np.c_[x_values.ravel(),y_values.ravel()])output=output.reshape(x_values.shape)plt.figure()plt.pcolormesh(x_values,y_values,output,cmap=cm.Paired)# Phủ dữ liệu train lên lướifor i in range(X.shape[0]):plt.scatter(X[i,0],X[i,1],marker=marker[i],s=50,edgecolors=\"c\",facecolors='none')# Đặt giới hạn trục X và Yplt.xlim(x_values.min(),x_values.max())plt.ylim(y_values.min(),y_values.max())plt.title('Mô hình phân loại K Nearest Neighbors')# Tạo một testpoint để xem bộ phân loại làm việctest_datapoint=[5.1,3.6]# Tạo đò thị cùng với dữ liệu trên ning và kiểm thử testpoint xem nó nằm ở chỗ nàoplt.figure()plt.title('Test point')for i in range(X.shape[0]):plt.scatter(X[i,0],X[i,1],marker=marker[i],s=80,edgecolors='black',facecolors='none')plt.scatter(test_datapoint[0],test_datapoint[1],marker='x',s=200,facecolors='black')#Tách điểm dữ liệu lân cận K (K Nearét Neighbors) để test dữ liệu dựa trên mô hình phân loại:_,indices=classifier.kneighbors([test_datapoint])indices=indices.astype(np.int)[0]# Vẽ điểm K lân cận lên biểu đồplt.figure()plt.title('K Nearest Neighbors')for i in indices:plt.scatter(X[i,0],X[i,1],marker=marker[i],linewidths=3,s=100,facecolors='none')# Biểu diễn điểm dữ liệu testplt.scatter(test_datapoint[0],test_datapoint[1],marker='x',linewidths=10,edgecolors='r')# Bểu diễn dữ liệu inputfor i in range(X.shape[0]):plt.scatter(X[i,0],X[i,1],marker=marker[y[i]],s=75,edgecolors='c',facecolors='none')# Print dữ liệu ra terminalprint('Predict output',classifier.predict([test_datapoint])[0])plt.show()\n \u0026nbsp;\nKết quả\n\nBiên giới của bộ phân loại\n\nDấu X là điểm dữ liệu test trong dữ liệu input để tìm Knearest Neighbors\n\u0026nbsp;\n12 điểm dữ liệu gần nhất với điểm test data chúng ta chọn được tô màu xanh\nOutput ở terminal\nPredict output: 1\n\u0026nbsp;\nTính điểm tương tự (similarity scores)\nĐể xây dựng một hệ thống gợi ý, điều quan trọng cần hiểu là làm sao có thể so sánh những đối tượng khác nhau trong bộ dữ liệu của chúng ta. Giả sử bộ dữ liệu của chúng ta gồm những người và những sở thích xem phim khác nhau. Để gợi ý một bộ phim nào đó, chúng ta cần phải so sánh sở thích mỗi 2 người với nhau. Đây là lúc mà những điểm tương tự cần được chú ý một cách cẩn thận. Những điểm tương đồng cho chúng ta một ý tưởng về tính tương tự của 2 đối tượng.\nCó 2 điểm số chúng ta thường sử dụng trong trường hợp này\nEuclidean Score ( điểm số Euclidean) sử dụng khoảng cách Euclidean giữa 2 điểm dữ liệu để tính điểm. Nếu bạn cần xem thêm về cách tính khoảng cách Euclidean thì lên wiki tại địa chỉ https://en.wikipedia.org/wiki/Euclidean_distance. Giá trị của khoảng cách Euclidean có thể không có giới hạn. Vì thế chúng ta lấy giá trị của nó và chuyển nó về thành điểm số Euclidean có giá trị từ 0-\u0026gt;1. Nếu khoảng cách Euclidean giữa 2 đối tượng là quá lớn thì điểm số Euclidean sẽ nhỏ bởi vì điểm số nhỏ tương ứng với việc 2 đối tượng này không giống nhau. Vì vậy khoản cách Euclidean tỉ lệ nghịch với điểm Euclidean Pearson Score ( điểm số Pearson) là đo khoảng cách tương quan giữa 2 đối tượng. Nó dùng hiệp phương sai (covariance) giữa 2 đối tượng cùng với độ lệch chuẩn của chúng để tính điểm. ĐIểm số này có khoảng cách từ -1 -\u0026gt; 1. Điểm số càng gần với +1 thì tính chất của chúng càng giống nhau còn càng gần với -1 thì càng không giống. Điểm số bằng 0 có nghĩa là 2 đối tượng chẳng liên quan gì mấy.   import argparseimport jsonimport numpy as np# Xây dựng mộ bộ phân tích cú pháp xử lý tham số input. nó sẽ chấp nhận 2 người dùng và dạng điểm số nó cần đử sử dụng tính toán điểm tương đồng:def build_arg_parser():paser=argparse.ArgumentParser(description='Tính toán điểm tương đồng')paser.add_argument('--user1',dest='user1',required=True,help='First User')paser.add_argument('--user2',dest='user2',required=True,help='Second User')paser.add_argument('--score-type',dest='score_type',required=True,choices=['Euclidean','Pearson','Both'],help='Sử dụng thước đo nào')return paser# Tạo một hàm để tính toán điểm số Euclidean giữa 2 dùng. Nếu người dùng không có trong dữ liệu thì báo lỗidef euclidean_score(dataset,user1,user2):if user1 not in dataset:raise TypeError(' Không tìm thấy '+ user1+'Trong bảng dữ liệu ')if user2 not in dataset:raise TypeError(' Không tìm thấy '+ user2+'Trong bảng dữ liệu ')# Tạo một object để theo dõi phim được đánh giá bởi cả 2 user:common_movies={}# Tách những bộ phim được đánh giá bởi 2 user:for item in dataset[user1]:if item in dataset[user2]:common_movies[item]=1# Nếu không có phim nào gióng nhau chúng ta không thể tính toán điểm số:if len(common_movies) ==0:return 0# Tính sai số giữa các xếp hạng và dùng nó để tính điểm số Euclidean:square_diff=[]for item in dataset[user1]:if item in dataset[user2]:square_diff.append(np.square(dataset[user1][item]-dataset[user2][item]))return 1/(1+np.sqrt(np.sum(square_diff)))# Tạo một hàm để tính điểm số Pearson giữa 2 sốdef pearson_score(dataset,user1,user2):if user1 not in dataset:raise TypeError(' Không tìm thấy '+ user1+'Trong bảng dữ liệu ')if user2 not in dataset:raise TypeError(' Không tìm thấy '+ user2+'Trong bảng dữ liệu ')common_movies={}for item in dataset[user1]:if item in dataset[user2]:common_movies[item]=1num_ratings=len(common_movies)if num_ratings==0:return 0user1_sum=np.sum([dataset[user1][item] for item in common_movies])user2_sum = np.sum([dataset[user2][item] for item in common_movies])user1_square_sum=np.sum([np.square(dataset[user1][item]) for item in common_movies])user2_square_sum=np.sum([np.square(dataset[user2][item]) for item in common_movies])sum_of_products=np.sum([dataset[user1][item]*dataset[user2][item] for item in common_movies])# Tính toán những tham số khác nhau để tính điểm số Pearson sử dụng những kết quả bên trênSxy=sum_of_products-(user1_sum*user2_sum)/num_ratingsSxx=user1_square_sum-np.square(user1_sum)/num_ratingsSyy=user2_square_sum-np.square(user2_sum)/num_ratings# Nếu không có độ sai lệch thì điểm số =0 :if Sxx*Syy==0:return 0# trả về điểm số Pearsonreturn Sxy/np.sqrt(Sxx*Syy)# Tạo hàm Main để gán tham số khi chạy file pythonif __name__=='__main__':args=build_arg_parser().parse_args()user1=args.user1user2=args.user2score_type=args.score_typeratings_file='data/chap5/ratings.json'with open(ratings_file,'r')as f:data=json.loads(f.read())if score_type=='Euclidean':print('Điểm số Euclidean:')print(euclidean_score(data,user1,user2))elif score_type=='Pearson':print('Điểm số Pearson:')print(pearson_score(data,user1,user2))else:print('Điểm số Pearson:')print(pearson_score(data, user1, user2))print('Điểm số Euclidean:')print(euclidean_score(data, user1, user2))\n \u0026nbsp;\n\u0026nbsp;\nKết quả output:\nĐiểm số Pearson:\n0.9909924304103233\nĐiểm số Euclidean:\n0.585786437626905\n\u0026nbsp;\nTìm người dùng giống nhau sử dụng bộ lọc kết hợp Lọc kết hợp là xử lý xác định các mẫu trong các đối tượng trong một bộ dữ liệu để đưa ra quyết định về một đối tượng mới. Trong bối cảnh này , chúng ta sử dụng lọc hết hợp để cung cấp một sự giới thiệu bởi tìm những người dùng giống nhay trong bộ dữ liệu.\nBằng cách thu thập các thông tin của những người dùng khác nhau trong bộ dữ liệu, chúng ta kết hợp các thông tin đó để lọc người dùng. Do đó nó có tên là lọc kết hợp.  Giả định ở đây có 2 người có sự bầu chọn giống nhau cho những bộ phim, sau đó lựa chọn của họ cho một bộ phim mới cũng tương tự. Bằng cách xác định mô hình trong những bộ phim giống nhau, chúng ta làm một dự đoán. Ở phần trước chúng ta học về cách so sánh 2 người dùng khác nhau trong một bộ dữ liệu. Chúng ta sẽ sử dụng những kỹ thuật cách tính điểm đó để tìm những người dùng giống nhau trong dữ liệu của chúng ta. Lọc kết hợp là một dạng sử dụng khi phải đối mặt với bộ dữ liệu lớn. Những phương pháp này có thể dùng trong nhiều ngành khác nhau như tài chính, mua bán online, marketing, …..\nCode:\nimport argparseimport jsonimport numpy as npfrom compute_score import pearson_score# Tạo một hàm để tách tham số input. Chỉ có một tham số input để lấy tên của người dùng:def build_arg_parser():parser=argparse.ArgumentParser(description=\"Tìm user giống với thằng này\")parser.add_argument('--user',dest='user',required=True,help='Thằng input')return parser#Tạo một hàm để tìm người dùng trong bộ dữ liệu giống với thằng vừa input. Nếu thằng đó không có trong dữ liệu thì báo lỗi:def find_similar_users(dataset,user,num_user):if user not in dataset:raise TypeError('Méo tìm thấy thằng '+user+' trong cơ sở dữ liệu')# Chúng ta đã import hàm để tính điểm số Pearson. Giờ dùng hàm đó để tính thằng input với những thằng khác trong dataset:score=np.array([[x,pearson_score(dataset,user,x)] for x in dataset if x != user])# Sắp xếp điểm theo thứ tự giảm dần và lấy giá trị thấp nhấtscores_sortted=np.argsort(score[:,1])[::-1]# Tách số lượng num_user hàng đầu bởi tham số input ban đầu và return array:top_user=scores_sortted[:num_user]return score[top_user]# Tạo hàm main để nhận tách tham số đầu vào.if __name__=='__main__':args=build_arg_parser().parse_args()user=args.user# Lấy dữ liệu từ file rating.json. File này có tên và bầu chọn của họ cho những bộ phim khác nhau.with open(\"data/chap5/ratings.json\",'r') as f:data=json.loads(f.read())# Tim 3 user những thằng mà giống nhất với user được chỉ định bởi tham số input. Bạn có thể thay đổi số lượng tùy ý. Và in tên những thằng đó ra cùng với điểm số:print('Những thằng user có bình chọn giống thằng '+user)similar_user=find_similar_users(data,user,3)print('User\\t\\t\\t\\t\\tĐiểm số')print('-'*41)for item in similar_user:print(item[0],'\\t\\t\\t',round(float(item[1]),2))\n chạy đoạn code trên với tham số --user \"Bill Duffy\" bạn sẽ thấy output ở terminal như sau:\nNhững thằng user có bình chọn giống thằng Bill Duffy\nUser\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Điểm số\n-----------------------------------------\nDavid Smith \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0.99\nSamuel Miller \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0.88\nAdam Cohen \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 0.86\nXây dựng một hệ thống gợi ý xem phim\nBây giờ ta có tất cả các thành phần cần thiết để xây dựng một hệ thống gợi ý xem phim. Chúng ta đã học tất cả những khái niệm cơ bản cần để xây dựng một hệ thống gợi ý. Trong phần này chúng ta sẽ xây dựng một hệ thống gợi ý xem phim dựa trên cơ sở dữ liệu có trong file ratings.json . Khi chúng ta cần tìm một gợi ý phim cho một người dùng chúng ta sẽ cần tìm những người dùng giống với người đó trong cơ sở dữ liệu và gợi ý cho họ theo người vừa tìm đc:\nLet's build:\nimport argparseimport jsonimport numpy as npfrom compute_score import pearson_score# Tạo một hàm để lấy tham số đầu vào.def build_arg_parser():parser=argparse.ArgumentParser(description='Tìm film cho thằng này')parser.add_argument('--user',dest='user',required=True,help='Input User')return parser# Tạo một hàm để lấy phim gợi ý cho thằng vừa nhập. nếu thằng này không tồn tại trong cơ sở dữ liệu thì báo lỗi:def get_recommendations(dataset,user):if user not in dataset:raise TypeError('Không có thằng '+user+\" Trong cơ sở dữ liệu\")# Tạo biến để theo dõi điểm:overall_scores={}similarity_scores={}for u in [x for x in dataset if x!=user]:similarity_score=pearson_score(dataset,user,u)#Nếu điểm số similarity nhỏ hơn hoặc bằng 0, thì tìm thằng user khác trong dataset:if similarity_score\u0026lt;=0:continue# Lấy danh sách phim mà thằng user vừa lấy được đã bầu chọn nhưng thằng input chưa bầu chọn:filtered_list=[x for x in dataset[u] if x not in dataset[user] or dataset[user][x]==0]# Lặp lại để tìm kiếm trong filtered_líst theo dõi để đánh giá dựa trên điểm similarity_score. Và cũng đặt một item vào object similarity_scoresfor item in filtered_list:overall_scores.update({item:dataset[u][item]*similarity_score})similarity_scores.update({item:similarity_score})# Nếu không có phim nào giống nhau thì chúng ta không thể gợi ý cái giề cả:if len(overall_scores)==0:return ['Không có gợi ý phim nào cho thằng này']# Đơn giản hóa số điểm dựa trên điểm similarity:movie_scores=np.array([[score/similarity_scores[item],item] for item,score in overall_scores.items()])# Sắp xếp điểm số và lấy phim gợi ý:movie_scores=movie_scores[np.argsort(movie_scores[:,0])[::-1]]movie_recommends=[movie for _,movie in movie_scores]return movie_recommends# Tạo hàm main để lấy tham số input:if __name__==\"__main__\":args=build_arg_parser().parse_args()user=args.user# Lấy dữ liệu từ filewith open(\"data/chap5/ratings.json\",'r') as f:data=json.loads(f.read())movies=get_recommendations(data,user)print('Danh sách phim đề cử cho thằng',user,'là')for i,movie in enumerate(movies):print(str(i + 1),'. ',movie)\n \u0026nbsp;\nChạy file trên với tham số --user \"Bill Duffy\":\nDanh sách phim đề cử cho thằng Bill Duffy là\n1 . Raging Bull\nThay bằng \u0026ndash;user \"Chris Duncan\"\nDanh sách phim đề cử cho thằng Chris Duncan là\n1 . Goodfellas\n2 . Scarface\n3 . Vertigo\nTổng kết :\nTrong chương này chúng ta đã học về cách làm thế nào để tạo một đường ống xử lý dữ liệu có thể dùng để train một hệ thống Machine-learning. Chúng ta đã học về cách phân tách điểm K-gần nhất cho bất kỳ điểm dữ liệu nào trong một bộ dữ liệu. Sau đó chúng ta dùng cách này để xây dựng một hệ thống phân loại K-Nearest-Neighbors. Chúng ta đã thảo luận về cách sử dụng bộ lọc kết hợp để tìm điểm giống nhau giữa các người dùng trong một bộ dữ liệu và từ dó xây dựng một hệ thống gợi ý xem phim.\nTrong chương tiếp theo chúng ta sẽ học về lập trình logic và làm thế nào để xây dựng một động cơ suy diễn có thể giải quyết vấn đề trong thực tế.\n\u0026nbsp;\n "
},
{
	"uri": "https://bamboofx.github.io/ai-with-python/chapter6/",
	"title": "C6: Logic Programing",
	"tags": [],
	"description": "",
	"content": "PythonAI Chapter66\nLogic Programing\nTrong chương này chúng ta sẽ học về làm thế nào để viết một chương trình sử dụng logic programing. Chúng ta sẽ bàn luận về nhiều kiểu mẫu lập trình khác nhau và xem làm thế nào để xây dựng chương trình cùng với logic programing. Chúng ta sẽ học về xây dựng những khối (building blocks) cho lập trình logic ,cách giải quyết vấn đề trong lĩnh vực này. Chúng ta sẽ triển khai các chương trình Python để xây dựng một chương trình để giải quyết các vấn đề đa dạng.\nCác thứ bạn có thể học được sau khi giải quyết chương này:\nLập trình logic là gì ? Hiểu về vấn đề xây dựng khối của lập trình logci Giải quyết vấn đề sử dụng lập trình logic Cài đặt các package cho Python Kết hợp các biểu thức toán học (Matching mathematical expression) Xác nhận nguyen tố Phân tích một cây gia phả (parsing a family tree) Phân tích địa lý Xây dựng một AI đơn giản cho game câu đố  Lập trình logic là gì ?\nLập trình logic là một mô hình lập trình (programming paradigm). về cơ bản thì nó là một cách tiếp nhận với lập trình. Trước khi chúng ta nói về nó có liên quan gì đến AI thì hãy nói vềmô hình lập trình.\nKhái niệm về mô hình lập trình phát sinh do nhu cầu phân loại ngôn ngữ lập trình. Nó chỉ ra cách mà các chương trình máy tính giải quyết vấn đề thông qua code. Một vài mô hình lập trình chủ yế liên quan đến ý nghĩa hoặc trình tự của các hoạt đọng được sử dụng để đạt được kết quả. Các mô hình lập trình khác quan tâm đến cách chúng ta tổ chức code.\nĐây là một vài mô hình lập trình thường thấy:\nLập trình mệnh lệnh(imperative programming): Là sử dụng các dòng lệnh để thay đổi trạng thái chương trình. Do đó nó cũng gây ảnh hưởng khác nữa mà tao chưa biết nó là cái ẹm gì nên chưa nói đc. Lập trình chức năng( functional programming): Điều này coi việc tính toán như là một đánh giá của các hàm toán học và không cho phép thay đổi trạng thái hoặc biến đổi dữ liệu Lập trình khai báo(Declarative programming): Đây là một cách lập trình mà bạn viết chương trình bằng cách miêu tả những gì bạn muốn làm mà không phải là bạn muốn làm nó như thế nào để máy tính nó tự tính. Về ý tưởng thì nó ngược lại với lập trình mệnh lệnh( bạn nói cho máy tính bạn muốn gì và máy tính sẽ cho bạn kết quả bạn muốn). Lập trình hướng đối tượng( Object Oriented Programming): Cái này thì các thím học rồi nói ít thôi. Cơ bản là vứt vào object và cái đối tượng này chứa dữ liệu và các phương thức chỉ định công việc cần làm. Lập trình thủ tục (procedural programming): Nó nhóm code vào trong những hàm khác nhau và mỗi hàm này sẽ chịu trách nhiệm thực hiện các việc cụ thể khác nhau. Lập trình ký hiệu (Symbolic Programming): Là một mô hình lập trình trong đó chương trình sử dụng các công thức và thành phần của chương trình như thể chúng là dữ liệu thô  Lập trình Logic( Logic Programming): Là một mô hình lập trình dựa trên các logic toán học tính toán tự động trên cơ sở dữ liệu dựa trên sự hiểu biết bao gồm thực tế và lý luận toán.  Để hiểu về lập trình logic, chúng ta hãy tìm hiểu về khái niệm tính toán và suy đoán. Để tính toan một cái gì đó, chúng ta bắt đầu với một biểu thức và một bộ quy tắc. Bộ quy tắc này là một trương trình cơ bản. Chúng ta sử dụng những biểu thức và những quy tắc để tạo ra kết quả output. Ví dụ ta muốn tính tổng của 23,12 và 49 phương pháp là như sau\n23+12+49=\u0026gt;(3+2+9)-\u0026gt;)1+(2+1+4)|4=\u0026gt;84\nMặt khác nếu chúng ta muốn suy luận một cái gì đó, chúng ta cần bắt đầu từ một phương pháp phỏng đoán. Sau đó chúng ta cần xây dựng một lập luận dựa theo một bộ quy tắc. Về bản chất, quá trình tính toán là máy móc cần độ chính xác, còn quá trình phỏng đoán (deduction) thì sáng tạo hơn.\nKhi chúng ta viết một chương trình trong mô hình lập trình logic(logic programming paradigm), Chúng ta sẽ chỉ định ra một tập câu lệnh dựa trên sự việc xảy ra và quy tắc về vấn đề gặp phải và một cách giải quyết để giải quyết việc đó dựa trên những thông tin .\nHiểu về cách xây dựng các khối của lập trình logic( building blocks of logic programming)\nTrong lập trình hướng đối tượng (OOP) hoặc mô hình lập trình mệnh lệnh (imperative paradigms), Chúng ta luôn luôn phải định nghĩa các biến . Trong lập trình logic có một chút khác biệt. Chúng ta có thể truyền một tham số chưa được khởi tạo tới một hàm và một thông dịch viên sẽ khởi tạo biến cho chúng ta bằng cách tìm kiếm những yếu tố được định nghĩa bởi người dùng. Nó là một cách mạnh mẽ để tiếp cận vấn đề khớp về biến. Quá trình khớp các biến cùng với các mục khác nhau được gọi là hợp nhất (unification). Đây là tính năng nổi bật nhất của lập trình logic. Chúng ta cần chỉ định một vài thứ được gọi là các mối tương quan (quan hệ) trong lập trình logic. Những mối quan hệ này được định nghĩa bởi các mệnh đề gọi là những cơ sở lập luận (facts) và những quy tắc (rules).\nNhững cơ sở lập luận (Facts) là những tuyên bố sự thật về chương trình của chúng ta và dữ liệu nó đang sử dụng. Cấu trúc khá đơn giản. VD A là con của B, thì đây là tuyên bố. còn câu nói ai là con của B thì nó không thể là một tuyên bố được. Mỗi chương trình logic cần có các cơ sở lập luận để làm việc, để nó có thể đạt được mục đích nhất định dựa trên các cơ sở đó.\nQuy tắc (rules) là những thứ chúng ta phải học để diễn đạt lại các cơ sơ lập luận (facts) và làm cách nào để đặt ra câu hỏi về nó. Chúng là những ràng buộc mà chúng ta phải làm việc cùng với nó và nó cho phép chúng ta thực hiện các kết luận về những vấn đề . Ví dụ, Làm thế nào để xây dựng một máy đánh cờ. Bạn cần phải định nghĩa tất cả các quy tắc để các quân cờ di chuyển trên bàn cờ. Về cơ bản thì kết luận cuối cùng chỉ có giá trị nếu tất cả các mối quan hệ là đúng.\nGiải quyết vấn đề sử dụng lập trình logic\nLập trình logic tìm kiếm phương pháp bằng cách sử dụng cơ sở lập luận (facts) và quy tắc (rules). Chúng ta cần chỉ định đích đến cho mỗi chương trình. Trong trường hợp này một chương trình logic và một đích đến không có một biến nào cả, Một bộ phận giải quyết vấn đề sẽ đưa ra một cái cây và cấu thành không gian tìm kiếm ddeeer giải quyết vấn đề và đạt được đích đến. Một trong những thứ quan trọng nhất trong lập trình logics là làm sao để chúng ta đưa ra được các quy tắc. Các quy tắc có thể xem như là các câu lệnh logic, Hãy xem xét vấn đề sau:\nKathy thích chocolate=\u0026gt; Alex yêu Khathy\nCác này có thể đọc theo kiểu: Nếu Kathuy thích chocolate mà Alex lại thích Kathe thì nó cũng có thể được hiểu là Kathy thích chocolate của thằng Alex ngụ ý là Alex thích Kathy ngu vl nhưng ví dụ nào tao đéo hiểu lắm các mày tự nghĩ nhé .\nThêm ví dụ khác: Crime movies, English=\u0026gt; Martin Scorsese. Nó có thể hiểu một cách logic như sau.: Nếu mày thích phim Crime movies bằng tiếng anh thì mày cũng có thể thích phim tạo của Martin Scorsese.\nCấu trúc suy luận ngu ngu kiểu này sẽ được sử dụng nhiều trong suốt quá trình học lập trình logic. Giờ thì hãy xem làm việc này trong python thì làm thế nào\nCài đặt các package Python mới\nTrước khi học về lập trình logic trong python chúng ta cần install thêm 2 package là logpy và sympy nếu dùng pip3 để install gõ câu lệnh vào terminal:\n$pip3 install kanren\n$pip3 install sympy\nNgoài ra nếu bạn dùng pycharm thì đơn giản hơn :\nChọn File-\u0026gt;Settings-\u0026gt;Project Interpreter -\u0026gt; bấm vào dấu +Gõ vào ô tìm kiếm kanren chọn install\nlàm tương tự với sympy. done\nhoặc lên source gits của trang logpy để xem cách cài khác https://pypi.org/project/kanren/\nCách khác clone package từ github\ngit clone git://github.com/sympy/sympy.git my_folder cd my_folder python setup.py build python setup.py install\nHoặc cài trực tiếp :\npip install -e git+https://github.com/hmmlearn/hmmlearn.git#egg=hmmlearn\nCác biểu thức toán học tương xứng\nChúng ta gặp rất nhiều các phép toán trong rất nhiều hoạt động khác nhau. Lập trình logic rất hiệu quả trong việc so sánh các biểu thức và tìm các giá trị chưa biết.\nLets code:\nfrom kanren import run,var,factimport kanren.assoccomm as la#Tạo hai phép tính toán học cơ bảnadd='addition'mul='multiplication'# Hai phép cộng(add) và nhân(mul là hai phép tính có tính chất giao hoán(commutative) và kết hợp(associative). thử tính nào:fact(la.commutative,mul)fact(la.associative,mul)fact(la.commutative,add)fact(la.associative,add)# Tạo ra một vài biến :a,b,c=var('a'),var('b'),var('c')# ta xét thử biểu thức sau:#expression_orig=3*(-2)+(1+2*3)x(-1)# giơ thì thử ẩn biểu thức trên với các biến .# ta có biểu thức 1 expression1=(1+2*a)*b+3*c# biểu thức 2 expression2=c*3+bx(2*a+1)# biểu thức 3 expression3=(((2*a)*b)+b+3*c# Các mày hãy thử quan sát xem có thấy cả ba biểu thức đều biểu hiện một biểu thức cơ bản. Nhiệm vụ của chúng ta là kết hợp các biểu thức cùng với biểu thức cơ bản để tìm những biến ẩn không biết# Tạo biệu thứcoriginal_expression=(add,(mul,3,-2),(mul,(add,1,(mul,2,3)),-1))expression1=(add,(mul,(add,1,(mul,2,a)),b),(mul,3,c))expression2 = (add, (mul, c, 3), (mul, b, (add, (mul, 2, a), 1)))expression3 = (add, (add, (mul, (mul, 2, a), b), b), (mul, 3, c))# So sánh các biểu thức cùng biểu thức mẫu. Phương thức run thường được sử dụng trong karen. phương thức này lấy tham số input và chạy các biểu thức.# Tham số đầu tiên đầu tiên là số của giá trị, tham số thứ 2 là một biến, và tham số thứ 3 là một hàmk1=run(0,(a,b,c),la.eq_assoccomm(expression1,original_expression))k2=run(0,(a,b,c),la.eq_assoccomm(expression2,original_expression))k3=run(0,(a,b,c),la.eq_assoccomm(expression3,original_expression))print(k1)print(k2)print(k3)\n Chạy đoạn code trên bạn sẽ có kết quả sau\n((3, -1, -2),)\n((3, -1, -2),)\n()\nBa giá trị trong 2 dòng đầu tiên là giá trị của 3 biến a,b,c. Hai dòng đầu tiên vì biểu thức của chúng giống với biểu thức gốc (original_exp) còn dòng cuối cùng vì biểu thức của nó cũng giống nhưng về mặt cấu trúc nó khác nên kết quả là rỗng. So sánh mẫu làm việc bằng cách so sánh cấu trúc của biểu thức nên nó không trả lại kết quả .\nTìm số nguyên tố\nHãy xem làm thế nào để sử dụng lập trình logic để kiểm tra một số có phải số nguyên tố không. Chúng ta sẽ sử dụng cấu trúc có sẵn trong Kanren để xác định một số được cho trong một danh sách có phải là số nguyên tố hay không\n\u0026nbsp;\nimport kanren.core as kcimport itertools as itfrom kanren import membero,isvarfrom sympy.ntheory.generate import prime,isprime# Tiếp theo tạo một hàm để kiểm tra số được cho có phải là số nguyên tố hay không dựa trên dạng của dữ liệu. Nếu nó kiểu số thì mọi việc đơn giản. Nếu nó không phải số chúng ta phải chạy một cách hàm lại# Hàm conde là cấu trúc cung cấp các phép toán AND và OR# Hàm condeseq giống như conde nhưng nó hỗ trợ lặp:def check_prime(x):if isvar(x):return kc.condeseq([(kc.eq,x,p)] for p in map(prime,it.count(1)))else:return kc.success if isprime(x) else kc.fail# Tạo biến x để sử dụngx=kc.var()# tạo một dãy số và check nếu sô đó là số nguyên tố hay không# hàm membero kiểm tra nếu một số đã cho là một phần trong danh sách các số được chỉ định trong tham số đầu vào:list_num=(23,4,27,17,13,10,21,29,3,32,11,19)print(\"Danh sách của các nguyên tố\")print(set(kc.run(0,x,(membero,x,list_num),(check_prime,x))))# Dùng hàm trên theo cách khácprint(\"7 số nguyên tố đàu tiên: \")print(kc.run(7,x,check_prime(x)))\n Kết quả output:\nDanh sách của các nguyên tố\n{3, 11, 13, 17, 19, 23, 29}\n7 số nguyên tố đàu tiên: (2, 3, 5, 7, 11, 13, 17)\n\u0026nbsp;\nPhân tích cây phả hệ\nBây giờ chúng ta đã quen thuộc hơn với lập trình logic. Hãy sử dụng nó để giải quyết một vấn đề thú vị nào. Ta có một cây phả hệ như sau:\n\u0026nbsp;\nJohn và megan có 3 người con, William,David và Adam. vợ của William David và adam lần lượt là Emma Olivia và Lily……… Tự đọc đi nhá đứa nào cũng có kiến thức cơ bản rồi. Dựa trên những tuyên bố như trên (base on the facts), chúng ta có thể tạo một chương trình cây phả hệ có thể nói cho chúng ta biết ông của thằng Wayne là ai hay Chú của Sophi là ai. Dù chúng ta không chỉ định bất cứ một thứ gì về ông bà hay mối quan hệ khác như chú cháu, lập trình logic có thể suy luận ra nó.\nChúng ta có một cây phả hệ trong file json như sau :\n{\"father\": [{\"John\": \"William\"},{\"John\": \"David\"},{\"John\": \"Adam\"},{\"William\": \"Chris\"},{\"William\": \"Stephanie\"},{\"David\": \"Wayne\"},{\"David\": \"Tiffany\"},{\"David\": \"Julie\"},{\"David\": \"Neil\"},{\"David\": \"Peter\"},{\"Adam\": \"Sophia\"}],\"mother\": [{\"Megan\": \"William\"},{\"Megan\": \"David\"},{\"Megan\": \"Adam\"},{\"Emma\": \"Stephanie\"},{\"Emma\": \"Chris\"},{\"Olivia\": \"Tiffany\"},{\"Olivia\": \"Julie\"},{\"Olivia\": \"Neil\"},{\"Olivia\": \"Peter\"},{\"Lily\": \"Sophia\"}]}\n \u0026nbsp;\nNó là một file json chỉ có mối quan hệ là cha và mẹ. Chú ý chúng ta không chỉ định bất cứ thứ gì khác như là chồng hay vợ ông bà chú bác gì ở đây.\nGiờ chúng ta dùng Python để làm việc đó\nimport jsonfrom kanren import Relation,facts,run,conde,var,eq# Tạo một hàm để kiểm tra nếu X là cha mẹ của Y chúng ta sẽ sử dụng suy luận nếu X là cha mẹ cảu y thì X cũng đông thời là cha hoặc mẹ. nếu chúng ta định nghĩa \"Bố\" hay \"Mẹ\" vào bên trong fact:# khởi tạo mối quan hệ father và motherfather=Relation()mother=Relation()def parent(x,y):return conde([father(x,y)],[mother(x,y)])# Tạo một hàm để kiểm tra nếu x là ông bà của y. sau đó chúng ta sẽ suy ra là nếu x là ông bà của y thì có nghĩa là con của x là bố mẹ của ydef grandparent(x,y):temp=var()return conde((parent(x,temp),parent(temp,y)))#Tạo một hàm nếu x là anh chị em của y. Chúng ta sẽ sử dụng logic nếu x là anh chị em của y thì suy ra x,y có cùng cha mẹ. Chú ý khi chúng ta liệt kê tất cả danh sách anh chị em của x. thì# x cũng được liệt kê bởi vì x cũng thỏa mãn các điều kiện so sánh. Vì thế khi chúng ta in ra kết quả chúng ta phải loại bỏ x trong danh sách:def sibling(x,y):temp=var()return conde((parent(temp,x),parent(temp,y)))# Tạo hàm để kiểm tra nếu x là chú của y. Chúng ta sẽ tính toán logic là nếu x là chú của y, thì ông bà của x sẽ là bố mẹ của y. Chú ý ở đây là khi chúng ta liệt kế tất cả danh sách# chú của x, thì bố của x cũng thỏa mãn điều kiện. Vì thế chúng ta sẽ phải loại bỏ bố của x ra khỏi danh sách các ông chúdef uncle(x,y):temp=var()return conde((father(temp,x),grandparent(temp,y)))# Tạo hàm main:if __name__=='__main__':#Load data từ file jsonwith open(\"data/chap6/relationships.json\") as f:d=json.loads(f.read())for item in d['father']:facts(father,(list(item.keys())[0],list(item.values())[0]))for item in d['mother']:facts(mother,(list(item.keys())[0],list(item.values())[0]))# tạo biến xx=var()# Giờ thì thử đặt vài câu hỏi và tìm xem bộ giải mã của chúng ta có trả lời đúng khôngname='John'ouput=run(0,x,father(name,x))print(\"Danh sách con của \",name,\"là :\")for item in ouput:print(item)# Tìm mẹ cho williamname='William'output=run(0,x,mother(x,name))print(\"Danh sách mẹ của \",name,\"là\")for item in output:print(item)#Tìm ông bà của Waynename='Wayne'output=run(0,x,grandparent(x,name))print(\"ông bà của \",name)for item in output:print(item)# Tìm các cháu của Meganname='Megan'output=run(0,x,grandparent(name,x))print(\"Danh sách cháu của \",name,\"là\")for item in output:print(item)# Liệt kê các cặp vợ chồnga,b,c=var(),var(),var()output=run(0,(a,b),(father,a,c),(mother,b,c))print(\"Danh sách các cặp vợ chồng\")for item in output:print(\"Chồng: \",item[0],\"\\t\\t\u0026lt;==\u0026gt;\\t\\t\",\"Vợ: \",item[1])\n \u0026nbsp;\n\u0026nbsp;\nKết quả thu được tại output:\nDanh sách con của Johnlà :\nAdam\nDavid\nWilliam\nDanh sách mẹ của Williamlà\nMegan\nôngbà của Wayne\nMegan\nJohn\nDanh sách cháu của Meganlà\nNeil\nSophia\nChris\nPeter\nStephanie\nWayne\nTiffany\nJulie\nDanh sách các cặp vợ chồng\nChồng: William \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026lt;==\u0026gt;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Vợ: Emma\nChồng: Adam \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026lt;==\u0026gt;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Vợ: Lily\nChồng: David \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026lt;==\u0026gt;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Vợ: Olivia\nChồng: John \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026lt;==\u0026gt;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Vợ: Megan\n\u0026nbsp;\nPhân tích địa lý\nGiờ thì ta thử dùng lập trình logic để xây dựng một bộ phân tích địa lý. Vấn đề cần giải quyết ở phần này là chúng ta sẽ chỉ ra thông tin về vị trí của nhiều bang ở US và say đó yêu cầu trương trình của chúng ta trả lời những câu hỏi khác nhau dựa trên facts và rules. VD đây là bản đồ của nước Đông Lào\nSẽ có 2 file kèm theo trong thư mục data/chap6/adjacent_provinces.txt và coastal_provinces.txt ( những tỉnh liền kề nhau và những tỉnh ven biển). Những file này chứa thông tin các tỉnh nằm gần nhau ở việt nam và các tỉnh ven biển. Dựa vào thông tin này chúng ta có thể tìm thông tin bằng cách suy luận logic vd: Tỉnh nào giáp HCM mà lại giáp biển,Tỉnh x có nằm gần tỉnh Y không?, …..\ncode:\nfrom kanren import run,fact,eq,Relation,var# Tạo mối quan hệ tập mối quan hệadjacent=Relation()coastal=Relation()# Load File Data chứa dữ liệu các tỉnh ven biểnwith open(\"data/chap6/coastal_provinces.txt\",'r',encoding='utf8') as f:line=f.read()coastal_provinces=line.split(',')for province in coastal_provinces:#Duyệt tất cả các tỉnh ven biển và đưa thông tin vào trong cơ sở thực tế ( put information to the fact)#print(province)fact(coastal,province)# Load File Data chứa dữ liệu các tỉnh nằm kề nhauwith open(\"data/chap6/adjacent_provinces.txt\",'r',encoding='utf8') as f:adj_list=[line.strip().split(',') for line in f if line and line[0].isalpha()]#print(adj_list)# Thêm thông tin tỉnh liền kề vào trong fact basefor L in adj_list:head,tail=L[0],L[1:]for province in tail:fact(adjacent,head,province)# Tạo biến x và yx=var()y=var()# Giờ thì chạy đc rồi hỏi thằng ngu này vài câu xem nào#Tỉnh Nam Định Có gần Thái Bình?output=run(0,x,adjacent('Nam Định','Ninh Bình'))print(\"Tỉnh Nam Định Có gần Thái Bình?: \")print('Có' if len(output) else 'Không')# Các tỉnh tiếp giáp Hà Nộioutput=run(0,x,adjacent('Hà Nội',x))print(\"Các tỉnh tiếp giáp Hà Nội\")for province in output:print(province)#print(\"Liệt kê các tỉnh ven biển nằm gần Hồ Chí Minh\")output=run(0,x,adjacent(\"Hồ Chí Minh\",x),coastal(x))for province in output:print(province)print(\"Liệt kê các tỉnh nằm giữa Đà Nẵng Và Quảng Nam\")output=run(0,x,adjacent('Đà Nẵng',x),adjacent('Quảng Nam',x))if len(output):for province in output:print(province)else:print(\"Méo Có\")print(\"Liệt kê 7 tỉnh giáp một tỉnh ven biển\")n=7output=run(n,x,coastal(y),adjacent(x,y))if len(output):for province in output:print(province)else:print(\"Méo có\")\n \u0026nbsp;\nOutput:\nTỉnh Nam Định Có gần Thái Bình?: Có\nCác tỉnh tiếp giáp Hà Nội\nThái Nguyên\nBắc Giang\nVĩnh Phúc\nPhú Thọ\nHòa Bình\nHà Nam\nHưng Yên\nBắc Ninh\nLiệt kê các tỉnh ven biển nằm gần Hồ Chí Minh\nVũng Tàu\nTiền Giang\nLiệt kê các tỉnh nằm giữa Đà Nẵng Và Quảng Nam\nThừa Thiên Huế\nLiệt kê 7 tỉnh giáp một tỉnh ven biển\nBình Định\nVĩnh Long\nTiền Giang\nHà Nam\nNghệ An\nLâm Đồng\nThừa Thiên Huế\n\u0026nbsp;\nXây dựng một máy giải câu đố đơn giản\nMột trong những ứng dụng của lập trình logic là giải câu đố. Chúng ta có thể chỉ ra các điều kiện của một cau đó và trương trình sẽ đưa ra giải pháp. Trong phần này chúng ta sẽ đưa ra vài phần thông tin khác nhau về 4 người và sẽ hỏi về những phần thông tin còn thiếu.\nTrong chương trình locgic, Chúng ta sẽ đưa ra những thông tin như sau:\nTèo có một cái xe màu xanh Người mà nuôi con mèo là người nước Lào Tý sống ở Đông Lào Người có cái xe màu đen sống ở Thái Sửu có một con mèo Dần sống ở Thái Người có một con chó sống ở Tàu Hỏi ai là người nuôi thỏ ?  Câu hỏi ở đây ta cần tìm là người nuôi thỏ. Ta có một bảng chi tiết về thông tin 4 người như sau\nTên\n Thú cưng\n Màu xe\n Quốc gia\n  Tèo\n Chó\n Xanh\n Tàu\n  Tý\n ?\n Trắng\n Đông Lào\n  Sửu\n Mèo\n Vàng\n Lào\n  Dần\n ?\n Đen\n Thái\n   \u0026nbsp;\nDựa vào bảng thông tin trên ta đã tóm tắt cơ bản đề bài. Màu Trắng, Vàng là tự thêm vào cho vui.\nGiờ thì thử code nào:\nfrom kanren import *from kanren.core import lall# Tạo biến peoplepeople=var()# Tạo luật dùng half lall. luật đầu tiên ở đây là ta có 4 người, và các thông tin khácrules=lall(# Khai báo 4 người(eq,(var(),var(),var(),var()),people),# Người đầu tiên là Tèo thằng này có cái xe màu xanh(membero,('Tèo',var(),'Xanh',var()),people),# Thông tin thứ 2: thằng này có mèo và sống ở Lào(membero,(var(),'Mòe',var(),'Lào'),people),# Thông tin thứ 3: cu Tý sống ở Đông lào(membero,('Tý',var(),var(),'Đông Lào'),people),# Thông tin thứ 4: thằng đi xe đen sống ở Thái(membero, (var(), var(), 'Đen', 'Thái'), people),# Thông tin thứ 5: Sửu nuôi mèo(membero, ('Sửu', 'Mòe', var(), var()), people),# Thông tin thứ 6: Dần ở Thái(membero, ('Dần', var(), var(), 'Thái'), people),#Thông tin thứ 7: Nuôi chó sống ở Tàu(membero, (var(), 'Chó', var(), 'Tàu'), people),# Câu hỏi ở đây là thằng thỏ sống ở đâu,ai nuôi nó(membero, (var(), 'Thỏ', var(), var()), people))# Thử chạy phần giải quyết vấn đề xem thế nào# Gồm 3 biến run(n,x,*goals)solutions=run(0,people,rules)# lấy thông tin từ solutions :\\ Lấy thông tin từ solutions đầu tiên[0]output=[house for house in solutions[0] if 'Thỏ' in house]# Lấy vị trí từng solution sẽ có dạng như ta đã đặt trên rules và output là thông tin chứa nhà có con thỏ có dạng [('Tý', 'Thỏ', var(), 'Đông Lào')]print(\"Thằng nuôi thỏ là thằng: \"+output[0][0])attrs=['Tên','Thú Nuôi','Màu Xe',\"Quốc gia\"]# Giờ thì in thử tất cả các solution ra xemfor i in solutions:print('\\n' + '\\t\\t'.join(attrs))print(\"=\" * 50)for item in i:print('')print('\\t\\t\\t'.join([str(x) for x in item]))\n \u0026nbsp;\nKết quả ở output:\nThằng nuôi thỏ là thằng: Tý\n\u0026nbsp;\nTên\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Thú Nuôi\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Màu Xe\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Quốc gia\n==================================================\n\u0026nbsp;\nTèo\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Chó\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Xanh\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Tàu\n\u0026nbsp;\nSửu\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Mòe\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;~_9\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Lào\n\u0026nbsp;\nTý\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Thỏ\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;~_11\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Đông Lào\n\u0026nbsp;\nDần\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;~_13\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Đen\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Thái\nNhìn vào kết quả trên ta có thể thấy kết quả không biết đã được nhập vào bằng chương trình dự đoán kết quả của chúng ta. Một vài thông tin vẫn có dạng 'x_n' dưới dạng var() bởi vì thông tin chúng ta có là chưa đủ để giải quyết hết vấn đề. Nếu bạn muốn tất cả các thông tin dễ hiểu hơn thì có thể thêm những thông tin chúng ta giả định vào như sau:\n(membero, (var(), 'Chim Cu', var(), var()), people),(membero, (var(), var(), 'Trắng', var()), people),(membero, (var(), var(), 'Vàng', var()), people)\n khiđó kết quả đầu ra nhìn sẽ đẹp hơn 1 chút:\nThằng nuôi thỏ là thằng: Tý\n\u0026nbsp;\nTên\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Thú Nuôi\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Màu Xe\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Quốc gia\n==================================================\n\u0026nbsp;\nTèo\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Chó\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Xanh\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Tàu\n\u0026nbsp;\nSửu\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Mòe\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Trắng\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Lào\n\u0026nbsp;\nTý\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Thỏ\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Vàng\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Đông Lào\n\u0026nbsp;\nDần\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Chim Cu\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Đen\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Thái\nChương trình này đã chứng minh được là có thể giải quyết vấn đề khi có nhưng thông tin(dù không đầy đủ). Bạn có thể dựa vào đó để xây dựng một vài bộ giải quyết vấn đề như trên.\n\u0026nbsp;\nTổng kết chương:\nTrong chương này, chúng ta đã học cách viết một chương trình sử dụng lập trình logic. Chúng ta đã thảo luận về nhiều mô hình lập trình để xây dựng chương trình. Chúng ta đã hiểu làm cách nào để xây dựng 1 chương trình bằng lập trình logic. Chúng ta học về cách xây dựng các khối khác nhau (various block) của lập trình logic và thảo luận về cách giải quyết vấn đề trong phần này.\nTrong chương tiếp theo chúng ta sẽ học về kỹ thuật tìm kiếm Heuristic và sử dụng thuạt toán đó để giải quyết vấn đề trong thực tế\n "
},
{
	"uri": "https://bamboofx.github.io/ai-with-python/chapter7/",
	"title": "C7: Tìm kiếm Heuristic",
	"tags": [],
	"description": "",
	"content": "PythonAI Chapter77\nTìm kiếm Heuristic\nTrong chương này chúng ta sẽ tìm hiểu về kỹ thuật tìm kiếm heuristic. Kỹ thuật tìm kiếm heuristic sử dụng để tìm kiếm những không gian giải pháp để đưa ra kết quả. Các tìm kiếm được tiến hành bằng cách sử dụng sử dụng phương pháp phỏng đoán(heuristic còn có nghĩa là phỏng đoán, khám phá)để hướng dẫn thuật toán tìm kiếm. Những khám phá (heuristic) này cho phép thuật toán có thể tăng tốc quá trình xử lý, nếu không có nó sẽ mất rất nhiều thời gian và giải pháp.\nHọc xong chương này bạn sẽ biết được những thứ cụ thể như :\nHeuristic search là gì Tìm kiếm biết trước và tìm kiếm không biết trước Constraint Satisfaction Problems (CSPs- Thỏa mãn vấn đề ràng buộc) Giải thuật tìm kím cục bộ ( local searching) Giải thuật Simulated Annealing (Thuật toán mô phỏng luyện kim). Xây dựng chuỗi sử dụng greedy search ( thuật tìm kiếm tham lam) Giải quyết 1 vấn đề với các ràng buộc Giải quyết vấn đề màu vùng Xây dựng bộ giải mã trò chơi 8-puzzle Xây dựng bộ giải mã trò chơi mê cung  Heuristic search là gì ?\nTìm kiếm và xắp xếp dữ liệu (organizing data) là một chủ đề quan trong trong AI. Có rất nhiều vấn đề cần phải tìm kiếm câu trả lời. Có rất nhiều giải pháp khả thi cho một vấn đề và chúng ta không biết cái nào là chính xác. Bằng cách tổ chức hiệu quả, chúng ta có thể tìm kiếm giải pháp một cách nhanh chóng và hiệu quả. Thông thường, có rất nhiều tùy chọn giải pháp có thể giải quyết một vấn đề nhất định mà không thuật toán nào có thể phát triển để tìm được giải pháp đúng. Ngoài ra, qua mỗi giải pháp duy nhất là không thể vì nó rất mất thời gian và nặng( còn gọi là đắt giá). Ở trường hợp thế này, chúng ta dựa trên một quy tắc giúp chúng ta có thể thu hẹp phạm vi tìm kiếm bằng cách loại bỏ những tùy chọn giải pháp mà chắc chắn là sai. Quy tắc này được gọi là heuristic. Phương pháp sử dụng heuristic (phỏng đoán, khám phá) để hướng dẫn tìm kiếm của chúng ta được gọi là heuristic search. Heuristic trong tiếng hy lạp có nghĩa là \"Tìm kiếm\" hoặc \"khám phá\" là kỹ thuật dựa trên kinh nghiệm để giải quyết vấn đề, học hỏi hay khám phá nhằm đưa ra một giải pháp mà không được đảm bảo là tối ưu \u0026ndash; trích wiki) Phương pháp Heuristic rất hữu dụng vì chúng giúp chúng ta rút ngắn thời gian tìm kiếm. Thậm chí nếu heuristic không thể loại bỏ hoàn toàn một số tùy chọn, thì nó cũng giúp chúng ta xắp xếp các tùy chọn để chúng ta có nhiều khả năng nhận được các giải pháp tốt hơn trước.\nTrong việc xây dựng các thuật giải Heuristic người ta thường dùng các hàm Heuristic ( heuristic function) đó là các hàm đánh giá thô, giá trị của hàm phụ thuộc vào trạng thái của các bài toán tại mỗi bước xử lý. Nhờ các giá trị này ta có thể chọn được các hành động tương đối trong từng bước của thuật giải\nTìm biết trước và không biết trước\nNếu bạn đã quen thuộc trong ngành khoa học máy tính, có lẽ bạn đã nghe về một vài kỹ thuật tìm kiếm như Depth First Search(DFS \u0026ndash; Tìm kiếm chiều sâu),Breadth First Search(BFS \u0026ndash; Tìm kiếm theo chiều rộng), Uniform Cost Search(UCS-Tìm kiếm đồng nhất giá). Đó là những kỹ thuật tìm kiếm thường được sử dụng trên đồ thị để tìm kiếm giải phải. Vi dụ trong tìm kiếm không biết trước. Chúng không có sử dụng bất kỳ thông tin biết trước nào hoặc quy tắc nào để loại bỏ một vài hướng. Nó kiểm tra tất cả các hướng tìm kiếm và chọn một cái tối ưu.\nHeuristic search, nói một cách khác thì nó có thể gọi là Informed Search( tìm khi biết trước thông tin) bởi vì nó sử dụng những thông cho trước hoặc một quy tắc nào đó để loại bỏ những hướng không cần thiết. Kỹ thuật tìm kiếm không thông tin không có mục đích cần đạt đến ở kết quả. Những kỹ thuật này không thực sự biết nó đang cố gắng làm cái gì trừ khi nó gặp vấn đề gì ở mục tiêu đạt đết trong quá trình tìm kiếm.\nTrong vấn đề đồ thị, Chúng ta có thể dùng thuật toán heuristic để hướng dẫn tìm kiếm. Ví dụ, tại mỗi node (nút giao, đỉnh ,..) chúng ta có thể định nghĩa một hàm heuristic và giá trị trả lại (return) là điểm số đại diện cho ước tính của hướng đi từ node hiện tại tới đích đến. Điều này sẽ cho phép thuật toán để xác định nơi nào dẫn tới đích đến.\nChúng ta cần chú ý rằng tìm kiems heuristic không phải là phương pháp tối ưu nhất. Bởi vì chúng ta không khám phá phương pháp khả năng duy nhất và chúng ta dựa vào heuristic. Nhưng nó được đảm bảo để tìm một giải pháp tốt trong một thời gian hợp lý, đó là những gì chúng ta mong đợi từ một giải pháp thực tế. Trong các tình huống thực tế, chúng ta cần những giải pháp nhanh chóng và hiệu quả. Heuristic search đưa ra cho chúng ta một giải pháp hiệu quả bằng cách đưa ra một giải pháp nhanh chóng và hợp lý. Chúng được sử dụng trong trường hợp các vấn đề không được giải quyết trong bất kỳ vấn đề nào khác hoặc mất một thời gian dài để giải quyết.\nConstraint Satisfaction Problems\n(CSPs - Thỏa mãn vấn đề ràng buộc)\nCó rất nhiều vấn đề chúng ta phải giải quyết bởi các sự ràng buộc, Những ràng buộc này về cơ bản là những điều kiện không thể bị bác bỏ hoặc làm trái trong quá trình giải quyết vấn đề. Những vấn đề này được gọi là CSPs ( Thỏa mãn các vấn đề ràng buộc)\nCPS về cơ bản là các vấn đề toán học được định nghĩa là tập hợp các biến (variables) phải thỏa mãn một số hạn chế. Khi chúng ta đi đến giải pháp cuối cùng, các trạng thái của các biến này phải thỏa mãn tất cả các điều kiện. CSPs là một dạng trong lập trình ràng buộc (constraint programming) là một mô hình trong đó mối quan hệ giữa các biến (variables) được mô tả dưới dạng ràng buộc lẫn nhau. lập trình ràng buộc cũng là một dạng của lập trình khai báo (Declarative Programing) . Lập trình ràng buộc còn có thể mô tả dưới dạng lập trình logic ràng buộc khi ta nhúng \"ràng buộc\" vào trong lập trình logic.\nNhững vấn đề (Problems) này đòi hỏi sử kết hợp giữa thuật toán heuristic và các kỹ thuật tìm kiếm khác giải quyết chúng trong một thời gian hợp lý. Trong trường hợp này, chúng ta sẽ sử dụng kỹ thuật ràng buộc thỏa mãn (constraint satisfaction) để giải quyết vấn đề (problems) trên các vùng giới hạn. Các vùng giới hạn này chứa những số giới hạn của các thành phần(elements). Vì chúng ta xử lý các vùng giới hạn này chúng ta có thể sử dụng các kỹ thuật tìm kiếm để đưa ra giải pháp.\nKỹ thuật tìm kiếm vùng( Local Search)\nTìm kiếm vùng (local search) là một cá thể nhỏ của CSPs. Nó cải thiện các giá trị cho tới khi các ràng buộc được thỏa mãn. Nó lặp đi lặp lại các biến cho tới khi chúng ta tới được đích cần đến. Những thuật toán thay đổi các giá giá trị trong mỗi bước xử lý để chúng ta có thể tiến gần đến đich. Trong không gian giải pháp, cập nhật các giá trị để đến gần đích tốt hơn là những giá trị đã có. Vì thế nó được gọi là local search.\nThuật toán local search cũng làm một thuật toán Heuristic search. NHững thuật toán này sử dụng một hàm để tính toán chất lượng các giá trị trong mỗi lần cập nhật. Ví dụ, nó có thể đếm các số ràng buộc (constraints) đang bị vi phạm bởi bản cập nhạt hiện tại hoặc nó có thể nhìn thấy các bản cập nhật ảnh hưởng tới khoảng cách đến đích. Cái này có thể được hiểu như là phí giành cho mỗi lần phân công. Mục đích chung của local search là tìm mức phí nhỏ nhất ở trong mỗi bước.\nGiải thuật leo đồi (Hill Climbing) cũng là một dạng phổ biến của local search. Nó sử dụng một hàm heuristic để đo lường khoảng cách giữa trạng thái hiện tại và đích đế. Khi chúng ta bắt đầu, nó sẽ kiểm tra trang thái hiện tại có phải là đích đến không. Nếu đúng nó sẽ dừng lại, còn không thì nó sẽ chọn một bản cập nhật và tạo ra một trạng thái mới. Nếu trạng thái mới gần đến đích hơn là trạng thái hiện tại thì nó sẽ chọn trạng thái mới thành trạng thái hiện tại còn nếu không nó sẽ bỏ qua và tiếp tục xử lý cho tới khi kiểm tra tất cả các trạng thái có thể. Về cơ bản thì nó sẽ cố trèo lên đỉnh của ngọn đồi.\nGiải thuật simulated annealing\nGiải thuật Simulated Annealing cũng là một dạng của local search được biết đến như là một giải thuật tìm kiếm ngẫu nhiên(Stochastic search). Giải thuật tìm kiếm ngẫu nhiên sử dụng một cách rộng rãi trong nhiều lĩnh vực khác nhau như robotics, hóa học(chemistry), y học (medicine) Chế tạo ( manufacturing), kinh tế (economic) và nhiều ngành khác. Chúng ta có thể thực hiện các thứ như tối ưu hóa thiết kế cho robot, xác định thời gian để kiếm soát tự động trong nhà máy, và quy hoạch giao thông. Giải thuật ngẫu nhiên (stochastic algorithms) được sử dụng để giải quyết nhiều vấn đề trong thực tế.\nSimulated Annealing là một biến thể của giải thuật Leo đồi (Hill Climbing) đã nói bên trên. Một trong những vấn đề chính của giải thuật leo đồi là chúng ta leo nhầm đồi giả (false foothills). Nó có nghĩa là chúng ta bị mắc kẹt trong ma trận. Vì vậy tốt hơn là chúng ta phải kiểm tra toàn bộ không gian trước khi chúng ta thực hiên mỗi bước leo. Để đạt được điều này, tất cả không gian phải được khám phá để xem nó thế nào. Nó sẽ giúp chúng ta tránh được bị mắt kẹt ở nơi xa lắm.\nTrong Simulated Annealing, chúng ta xây dựng lại vấn đề và giải quyết nó nhanh nhất. Vì vậy bây giờ chúng ta thay vì leo lên núi thì chúng ta đi xuống. Chúng ta đang làm việc một cách tương tự nhưng theo một cách khác. Chúng ta dùng một hàm để hướng dẫn cho tìm kiếm. Hàm mục tiêu (objective function) phục vụ chúng ta giống hàm heuristic Lý do gọi nó là Simulated Annealing (thuật toán mô phỏng luyện kim) bởi vì nó có nguồn gốc từ quá trình luyện kim. Đầu tiên chúng ta làm nóng kim loại và sau đó để chúng nguội cho đến khi chúng đạt đến trạng thái năng lượng tối ưu.  Tốc độ chúng ta làm nguội đến khi đạt trạng thái được gọi là annealing schedule. Tốc đọ làm nguội này quan trọng bởi vì nó ảnh hưởng trực tiếp tới kết quả cuối cùng. Trong thực tế khi luyện kim nếu quá trình làm nguội nhanh nó sẽ kết thúc thì quá trình sẽ kết thúc luôn và chúng ta không thể điều khiển trạng thái tối ưu cho kim loại. Ngược lại nếu quá trình này chậm và có thể điều khiển sẽ đưa ra cho chúng ta một miếng kim loại ở trạng thái tối ưu nhất. Xây dựng chuỗi sử dụng greedy search (tìm kiếm tham lam)\nTính chất lựa chọn tham lam\nChúng ta có thể lựa chọn giải pháp nào được cho là tốt nhất ở thời điểm hiện tại và sau đó giải bài toán con nảy sinh từ việc thực hiện lựa chọn vừa rồi. Lựa chọn của thuật toán tham lam có thể phụ thuộc vào các lựa chọn trước đó. Nhưng nó không thể phụ thuộc vào một lựa chọn nào trong tương lai hay phụ thuộc vào lời giải của các bài toán con. Thuật toán tiến triển theo kiểu thực hiện các chọn lựa theo một vòng lặp, cùng lúc đó thu nhỏ bài toán đã cho về một bài toán con nhỏ hơn. Đấy là khác biệt giữa thuật toán này và\u0026nbsp;giải thuật quy hoạch động. Giải thuật quy hoạch động duyệt hết và luôn đảm bảo tìm thấy lời giải. Tại mỗi bước của thuật toán, quy hoạch động đưa ra quyết định dựa trên các quyết định của bước trước, và có thể xét lại đường đi của bước trước hướng tới lời giải. Giải thuật tham lam quyết định sớm và thay đổi đường đi thuật toán theo quyết định đó, và không bao giờ xét lại các quyết định cũ. Đối với một số bài toán, đây có thể là một thuật toán không chính xác. \u0026ndash; Trích wiki\nTìm kiếm tham lam (Greedy Search) là một mô hình thuật toán làm cho sự lựa chọn tối ưu ở mỗi thành phần để tìm ra tối ưu tổng thể. Nhưng trong rất nhiều vấn đề, thuật toán tham lam không đưa ra đực giải pháp tổng thể. Một lợi thế của việc sử dụng các thuật toán tham lam là chúng tạo ra một giải pháp gần đúng trong một thời gian hợp lý. Hy vọng điều này gần đúng với giải pháp tối ưu tổng thể.\nCác thuật toán tham lam không điều chỉnh các giải pháp của nó dựa trên những thông tin mới có được trong quá trình tìm kiếm. Ví dụ, bạn có kế hoạch đi du lịch và bạn muốn có đường đi tốt nhất ( bài toán bán hàng- xem thêm trên wiki ). Nếu bạn sử dụng thuật toán tham lam để lên kế hoạch di chuyển, nó có thể yêu cầu các tuyến đường ngắn nhưng lại có thể mất thời gian di chuyển hơn, hoặc nó cũng có thể dẫn bạn đến những con đường có thể đi nhanh hơn trong thời ngắn nhưng bạn lại có thể bị kẹt xe. Những thứ này hoàn toàn có thể xảy ra vì các thuật toán Tham Lam chỉ nghĩ về các bước đi liên tiếp chứ không phải là giải pháp tổng thể.\nHãy xem làm thế nào để giải quết một vấn đề sử dụng tìm kiếm Tham Lam. Trong vấn đề này chúng ta sẽ cố tạo ra một chuỗi đầu vào (input string) dựa trên bảng chữ cái. Chúng ta sẽ hỏi thuật toán tìm kiếm những giải pháp không gian và xây dựng một con đường tới giải pháp.\nChúng ta sẽ sử dụng một package có tên là simpleai trong suốt chương này . Nó chưa vài hàm khác nhau mà chúng ta sẽ sử dụng thường xuyên trong phần này để xây dựng những giải pháp sử dụng tìm kiếm heuristic. Link github: https://github.com/simpleai-team/simpleai Bạn có thể download bản realease 0.8.2 hoặc download tại đây . Unzip và chép folder simpleai vào chung với folder bạn đang code. Giờ thì bạn có thể sử dụng các hàm trong simpleai.\nKhi bạn sử dụng PyCharm thì khác 1 chút : Vào Setting-\u0026gt;Project Interpreter -\u0026gt; dấu + (install)\nChọn Manager Repositories ở bên dưới:\nChọn dấu + Rồi sau đó cài đặt simpleai như bình thường.\n\u0026nbsp;\nGiờ thì code nào\nimport argparseimport simpleai.search as ss# Tạo một hàm để parser tham số inputdef build_arg_parser():parser=argparse.ArgumentParser(description='Tạo input string sử dụng thuật toán greedy')parser.add_argument(\"--input-string\",dest='input_string',required=True,help='Chuỗi nhập')parser.add_argument(\"--initial-state\",dest='initial_state',required=False,default='',help=\"Điểm bắt đầu tìm kiếm\")return parser# Tạo một class chwuas các thuộc tính cần thiết để giải quyết các vấn đề. Class này thừa kế class SearchProblem trong library simpleai. Method đầu tiên set_target là method chúng ta tạo ra để định nghĩa string targetclass CustomProblem(ss.SearchProblem):def set_target(self,target_string):self.target_string=target_string# Method actions laf method cos sawnx trong SearchProblem và chúng ta cần override nó. Nó chịu trách nhiệm thực hiện các bước để hướng tới kết quả cuối. Nếu độ dài của chuỗi đang tạo ra nhỏ hơn độ dài của chuỗi đích nó sẽ trả về danh sách bảng chữ cái có thể chọn từ đó. Nếu không nó sẽ trả về chuỗi rỗng (empty string):def actions(self, state):if len(state)\u0026lt;len(self.target_string):alphabets='abcdefghijklmnopqrstuvwxyz 'return list(alphabets+''+alphabets.upper())else:return []#Method resul là một metod có sẵn của SearchProblem và ta override method để tính toán kết quả bằng cách nối các chuỗi và các hành actions đã lấy trước:def result(self, state, action):return state+action# Method is_goal là method sẵn có của SearchProblem và nó được sử dụng để kiểm tra xem chúng ta đã đến đích chưadef is_goal(self, state):return state==self.target_string# Method heuristic cũng làm method của SearchProblem và chúng ta cũng cần override nó. Chúng ta sẽ định nghĩa lại cái chúng ta cần \"khám phá\" (heuristic) để giải quyết vấn đề chúng ta gặp phải ( ở đây là xây chuỗi) .# Chúng ta sẽ tính toán còn bao nhiêu xa nữa từ trạng thái của chúng ta đang có(current state) để tới đích (goal) và sử dụng số heuristic này để hướng tới đích:def heuristic(self, state):# So sách chuỗi còn lại với chuỗi đích:dist=sum([1 if state[i]!=self.target_string[i] else 0 for i in range(len(state))])# Khoảng cách độ dài 2 chuỗidiff=len(self.target_string)-len(state)return dist+diff# Tạo hàm main để lấy tham số inputif __name__=='__main__':args=build_arg_parser().parse_args()customProblem=CustomProblem()customProblem.set_target(args.input_string)customProblem.initial_state=args.initial_stateoutput=ss.greedy(customProblem)print('Chuỗi cần tạo ra',args.input_string)print('Các phần giải pháp:')for item in output.path():print(item)\n \u0026nbsp;\nKết quả nhận được tại Terminal:\ngreedy_search.py --input-string \"Greedy Search\" --initial-state \"\"\nChuỗi cần tạo ra Greedy Search\nCác phần giải pháp:\n(None, '')\n('G', 'G')\n('r', 'Gr')\n('e', 'Gre')\n('e', 'Gree')\n('d', 'Greed')\n('y', 'Greedy')\n(' ', 'Greedy ')\n('S', 'Greedy S')\n('e', 'Greedy Se')\n('a', 'Greedy Sea')\n('r', 'Greedy Sear')\n('c', 'Greedy Searc')\n('h', 'Greedy Search')\n\u0026nbsp;\nGiải quyết một vấn đề cùng với ràng buộc\nChúng ta đã bàn luận về CSPs. Bây giờ chúng ta thử ứng dụng chúng vào thực tế. Chúng ta có một danh sách gồm các tên và mỗi tên này chỉ có thể lấy một giá trị xác định. Chúng ta cũng có một bộ số ràng buộc với những người đó phải thỏa mãn. from simpleai.search import CspProblem,backtrack,min_conflicts,MOST_CONSTRAINED_VARIABLE,HIGHEST_DEGREE_VARIABLE,LEAST_CONSTRAINING_VALUE# Tạo ràng buộc (contraint-ràng buộc) thứ 1 yêu cầu tất cả các biến trong danh sách input phải là giá trị duy nhất:def constraint_unique(variables,values):#Kiểm tra xem tất cả các giá trị có phải là duy nhấtreturn len(values)==len(set(values))# Tạo ràng buộc thứ 2 yêu cầu biến đầu tiên phải có giá trị lớn hơn biến thứ 2def constraint_bigger(variables,values):return values[0]\u0026gt;values[1]# Tạo ràng buộc thứ 3 : yêu cầu nếu giá trị biến đầu tiên phải là số lẻ,và giá trị của biến thứ 2 phải là số chẵn và ngược lại:def contraint_odd_even(variables,values):if values[0]%2==0:return values[1]%2==1else:return values[1]%2==0# Tạo hàm mainif __name__=='__main__':variables=('Tèo','Tý','Sửu','Dậu')#Tạo danh sách giá trị mà mỗi biến tên có thể lấydomain={'Tèo':[1,2,3],'Tý':[1,3],'Sửu':[2,4],'Dậu':[2,3,4]}\nTạo vài kịch bản ràng buộc cho. Trong trường hợp này chúng ta sẽ có 3 ràng buộc như sau\nTèo, Tý, Sửu phải có các giá trị khác nhau Giá trị của Sửu phải lớn hơn giá trị của Tý Nếu giá trị của Tèo là lẻ thì giá trị của Dậu phải là giá trị chẵn và ngược lại contraints=[(('Tèo','Tý','Sửu'),constraint_unique),(('Sửu','Tý'),constraint_bigger),(('Tèo','Dậu'),contraint_odd_even)]# Sử dụng các biến và các ràng buộc để tạo 1 object CspProblem:problem=CspProblem(variables,domain,contraints)# Tính toán các giải pháp và in nó ra Terminal:print(\"Các giải pháp:\\n\\nNormal:\",backtrack(problem))# Tính toán các giải pháp sử dụng MOST_CONSTRAINED_VARIABLEprint(\"MOST_CONSTRAINED_VARIABLE:\",backtrack(problem,value_heuristic=MOST_CONSTRAINED_VARIABLE))print(\"HIGHEST_DEGREE_VARIABLE:\",backtrack(problem,value_heuristic=HIGHEST_DEGREE_VARIABLE))print(\"LEAST_CONSTRAINING_VALUE\",backtrack(problem,value_heuristic=LEAST_CONSTRAINING_VALUE))# Sử dụng kết hợp variable_heuristic và value_heuristicprint(\"MOST_CONSTRAINED_VARIABLE,LEAST_CONSTRAINING_VALUE\",backtrack(problem,variable_heuristic=MOST_CONSTRAINED_VARIABLE,value_heuristic=LEAST_CONSTRAINING_VALUE))print(\"HIGHEST_DEGREE_VARIABLE,LEAST_CONSTRAINING_VALUE\",backtrack(problem,variable_heuristic=HIGHEST_DEGREE_VARIABLE,value_heuristic=LEAST_CONSTRAINING_VALUE))#Tính toán các giải pháp sử dụng minimum conflicts heuristic:print(\"Minimum conflicts:\",min_conflicts(problem))\n  \u0026nbsp;\nKết quả thu được tại output:\nCác giải pháp:\n\u0026nbsp;\nNormal: {'Tèo': 1, 'Tý': 3, 'Sửu': 4, 'Dậu': 2}\nMOST_CONSTRAINED_VARIABLE: {'Tèo': 1, 'Tý': 3, 'Sửu': 4, 'Dậu': 2}\nHIGHEST_DEGREE_VARIABLE: {'Tèo': 1, 'Tý': 3, 'Sửu': 4, 'Dậu': 2}\nLEAST_CONSTRAINING_VALUE {'Tèo': 1, 'Tý': 3, 'Sửu': 4, 'Dậu': 2}\nMOST_CONSTRAINED_VARIABLE,LEAST_CONSTRAINING_VALUE {'Tý': 1, 'Sửu': 2, 'Tèo': 3, 'Dậu': 2}\nHIGHEST_DEGREE_VARIABLE,LEAST_CONSTRAINING_VALUE {'Tèo': 1, 'Tý': 3, 'Sửu': 4, 'Dậu': 2}\nMinimum conflicts: {'Tèo': 3, 'Tý': 1, 'Sửu': 4, 'Dậu': 2}\nGiải quyết vấn đề tô màu từng vùng\nGiờ thử sử dụng thuật toán thỏa mãn ràng buộc để giải quyết vấn đề tô màu.\nHãy thử xem hình phía dưới:\nChúng ta có vài vùng và ứng với mỗi vùng được dán nhãn (labeled) bởi các tền khác nhau. Nhiệm vụ của chúng ta là tô màu tất cả các vùng bằng 4 màu, và chúng phải thỏa mãn điều kiện ràng buộc là 2 vùng nằm kề nhau không được trùng màu nhau:\nfrom simpleai.search import CspProblem,backtrack# Tạo hàm ràng buộc yêu cầu giá trị phải khác nhaudef constraint_func(variables,values):return values[0]!=values[1]# Tạo hàm mainif __name__=='__main__':# tạo variables cần thiếtnames = ('Mark', 'Julia', 'Steve', 'Amanda', 'Brian', 'Joanne', 'Derek', 'Allan', 'Michelle', 'Kelly')# Tạo values với giá trị là các màu cho trướccolors = dict((name, ['red', 'green', 'blue', 'gray']) for name in names)# Chúng ta cần chuyển đổi thông tin đã có vào một thứ để thuật toán có thể hiểu# Tạo một ràng buộc điều kiện yêu cầu danh sách những người nằm kế nhau trên bản đồ không có màu trùng nhauconstraints=[(('Mark', 'Julia'), constraint_func), (('Mark', 'Steve'), constraint_func),(('Julia', 'Steve'), constraint_func), (('Julia', 'Amanda'), constraint_func),(('Julia', 'Derek'), constraint_func), (('Julia', 'Brian'), constraint_func),(('Steve', 'Amanda'), constraint_func), (('Steve', 'Allan'), constraint_func),(('Steve', 'Michelle'), constraint_func), (('Amanda', 'Michelle'), constraint_func),(('Amanda', 'Joanne'), constraint_func), (('Amanda', 'Derek'), constraint_func),(('Brian', 'Derek'), constraint_func), (('Brian', 'Kelly'), constraint_func),(('Joanne', 'Michelle'), constraint_func), (('Joanne', 'Amanda'), constraint_func),(('Joanne', 'Derek'), constraint_func), (('Joanne', 'Kelly'), constraint_func),(('Derek', 'Kelly'), constraint_func),]# Sử dụng variables ( tên - name) và domain (colors) biến constraints vừa tạo làm tham số cho hàm CspProblemproblem=CspProblem(names,colors,constraints)# Giải quyết vấn đề và in ra phương pháp :output=backtrack(problem)print('\\nColor mapping:\\n')for k, v in output.items():print(k, '==\u0026gt;', v)\n Kết quả thu được tại Terminal:\nColor mapping:\n\u0026nbsp;\nMark ==\u0026gt; red\nJulia ==\u0026gt; green\nSteve ==\u0026gt; blue\nAmanda ==\u0026gt; red\nBrian ==\u0026gt; red\nJoanne ==\u0026gt; green\nDerek ==\u0026gt; blue\nAllan ==\u0026gt; red\nMichelle ==\u0026gt; gray\nKelly ==\u0026gt; gray\n\u0026nbsp;\nNếu tô màu theo kết quả cho hình vẽ ban đầu ta sẽ có hình vẽ như sau\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\nXây dựng bộ giải mã game câu đố 8-Puzzle\n8-Puzzle là biến thể của game 15-Puzzle. Bạn có thể xem nó ở đây: https://en.wikipedia.org/wiki/15_puzzle. Bạn sẽ có một lưới ngẫu nhiên gồm các con số trên đó và xắp xếp sao cho chúng có giá trị từ nhỏ đến lớn. Nó khá giống với game trượt ô xếp hình chúng ta thường chơi cách đây khoảng 20 năm :D :\ncòn game chúng ta có dạng thế này Chúng ta sẽ sử dụng thuật toán A* để giải quyết vấn đề. Nó là một thuật toán được sử dụng đề tìm kiếm giải pháp đường đi . Thuật toán này là thuật toán kết hợp giữa 2 thuật toán Dijkstra's algorithm và thuật toán search tham lam ( greedy best-first search). Thay vì không mù quáng đi lang thang thì thuật toán A* sẽ chọn một đường đi \"đầy hứa hẹn\". Tại mỗi điểm, Chúng ta tạo ra một danh sách tất cả các khả năng và sau đó chọn một cái có giá trị thấp nhất thỏa mãn điều kiện của chúng ta.\nGiờ thì làm sao để tính giá trị thấp nhất tại 1 điểm. Tại mỗi điểm chúng ta cần tính giá trị. Giá trị này dựa trên tổng số của 2 giá trị - Giá trị đầu tiên là giá trị lấy được tại điểm hiện tại và giá trị thứ 2 là giá trị thứ 2 là giá trị đạt đến điểm đích tính từ giá trị hiện tại. Chúng ta sử dụng phép tổng này giống như là số heuristic của chúng ta. Giống như đã biets thì giá trị thứ 2 về cơ bản không phải là tính toán hoàn hảo. Nếu nó là hoàn hảo thì thuật toán A* sẽ tìm được giải pháp nhanh chóng. Nhưng thường thì nó sẽ phải mất vài lần để tìm kiếm đường đi đến đích. Nhưng thuật toán A* rất hiệu quả trong việc tìm kiếm đường đi tối ưu và nó là một trong những giải thuật thông dụng nhất trong trường hợp này. Giờ thì sử dụng thuật toán A* để xây dựng một máy giải toán cho câu đó 8-Puzzle. Đây là một biến thể của các giải pháp được đưa ra trong simpleai.\nfrom simpleai.search import astar,SearchProblem## Tạo một hàm để chuyển đổi giữa list và tringdef string_to_list(input):if isinstance(input,str):return [x.split('-') for x in input.split('\\n')]else:return '\\n'.join(['-'.join(x) for x in input])# Tạo hàm kiểm tra vị trí của một ô trong lưới 8x8def get_location(rows,input_element):for i,row in enumerate(rows):for j,item in enumerate(row):if item==input_element:return i,j#Định nghĩa đích đến cần đạt đượcGOAL = '''1-2-34-5-67-8-e'''# Tạo vị trí đích đến cho mỗi số để tính khoảng cáchgoal_positions = {}rows_goal = string_to_list(GOAL)for number in '12345678e':goal_positions[number] = get_location(rows_goal, number)# Tạo class PuzzleSolver chứa các thuộc tính để giải quyết bài toán. class này kế thừa từ class SearchProblemclass PuzzleSolver(SearchProblem):#Method actions để lấy danh sách các ô có thể di chuyển tới ô khoảng trốngdef actions(self, state):rows=string_to_list(state)row_empty,col_empty=get_location(rows,'e')# kiểm tra vị trí của ô tróng và tạo action mới:actions=[]if row_empty\u0026gt;0:actions.append(rows[row_empty-1][col_empty])if row_empty\u0026lt;2:actions.append(rows[row_empty+1][col_empty])if col_empty\u0026gt;0:actions.append(rows[row_empty][col_empty-1])if col_empty\u0026lt;2:actions.append(rows[row_empty][col_empty+1])return actions# Override Method result. Chuyển đổi những chuỗi thành list và lấy vị trí của ô trống. Tạo ra kết quả (result) bằng cách cập nhật vị trí:def result(self, state, action):rows=string_to_list(state)row_empty,col_empty=get_location(rows,'e')row_new,col_new=get_location(rows,action)rows[row_empty][col_empty],rows[row_new][col_new]=rows[row_new][col_new],rows[row_empty][col_empty]return string_to_list(rows)# Kiểm tra nếu đã đến được đíchdef is_goal(self, state):return state==GOAL# Method heuristic. Chúng ta sử dụng heuristic để tính toán khoảng cách từ trạng thái hiện tại đến trạng thái đích sử dụng phép tính khoảng cách Mahattandef heuristic(self, state):rows=string_to_list(state)distance=0for number in '12345678e':row_new,col_new=get_location(rows,number)row_new_goal,col_new_goal=goal_positions[number]distance+=abs(row_new-row_new_goal)+abs(col_new-col_new_goal)return distance# Sử dụng A* để khởi tạo vị trí ban đầuINITIAL = \\'''4-e-37-1-56-8-2'''problem=PuzzleSolver(INITIAL)result=astar(problem)# In các bước đifor i,(action,state) in enumerate(result.path()):print()if action==None:print('Hình khởi tạo ban đầu')elif i==len(result.path())-1:print('Sau khi di chuyển ô',action,'Vào vị trí ô trống. DONE: ')else:print('Sau khi di chuyển ô', action, 'Vào vị trí ô trống. Ta có')print(state)\n \u0026nbsp;\nKết quả từng bước được in ra Terminal:\nHình khởi tạo ban đầu\n4-e-3\n7-1-5\n6-8-2\n\u0026nbsp;\nSau khi di chuyển ô 1 Vào vị trí ô trống. Ta có\n4-1-3\n7-e-5\n6-8-2\n\u0026nbsp;\nSau khi di chuyển ô 8 Vào vị trí ô trống. Ta có\n4-1-3\n7-8-5\n6-e-2\n\u0026nbsp;\nSau khi di chuyển ô 6 Vào vị trí ô trống. Ta có\n4-1-3\n7-8-5\ne-6-2\n\u0026nbsp;\nSau khi di chuyển ô 7 Vào vị trí ô trống. Ta có\n4-1-3\ne-8-5\n7-6-2\n\u0026nbsp;\nSau khi di chuyển ô 4 Vào vị trí ô trống. Ta có\ne-1-3\n4-8-5\n7-6-2\n\u0026nbsp;\nSau khi di chuyển ô 1 Vào vị trí ô trống. Ta có\n1-e-3\n4-8-5\n7-6-2\n\u0026nbsp;\nSau khi di chuyển ô 3 Vào vị trí ô trống. Ta có\n1-3-e\n4-8-5\n7-6-2\n\u0026nbsp;\nSau khi di chuyển ô 5 Vào vị trí ô trống. Ta có\n1-3-5\n4-8-e\n7-6-2\n\u0026nbsp;\nSau khi di chuyển ô 2 Vào vị trí ô trống. Ta có\n1-3-5\n4-8-2\n7-6-e\n\u0026nbsp;\nSau khi di chuyển ô 6 Vào vị trí ô trống. Ta có\n1-3-5\n4-8-2\n7-e-6\n\u0026nbsp;\nSau khi di chuyển ô 8 Vào vị trí ô trống. Ta có\n1-3-5\n4-e-2\n7-8-6\n\u0026nbsp;\nSau khi di chuyển ô 2 Vào vị trí ô trống. Ta có\n1-3-5\n4-2-e\n7-8-6\n\u0026nbsp;\nSau khi di chuyển ô 5 Vào vị trí ô trống. Ta có\n1-3-e\n4-2-5\n7-8-6\n\u0026nbsp;\nSau khi di chuyển ô 3 Vào vị trí ô trống. Ta có\n1-e-3\n4-2-5\n7-8-6\n\u0026nbsp;\nSau khi di chuyển ô 2 Vào vị trí ô trống. Ta có\n1-2-3\n4-e-5\n7-8-6\n\u0026nbsp;\nSau khi di chuyển ô 5 Vào vị trí ô trống. Ta có\n1-2-3\n4-5-e\n7-8-6\n\u0026nbsp;\nSau khi di chuyển ô 6 Vào vị trí ô trống. DONE: 1-2-3\n4-5-6\n7-8-e\n\u0026nbsp;\nThực hiện theo từng bước trên bạn sẽ giải được game: hãy thử chơi game ở đây: http://mypuzzle.org/sliding\nXây dựng một bộ giải mã trò chơi mê cung:\nGiờ thì dùng thuật toán A* để giải quyết mê cung sau:\nHình # là những vật cản của mê cung. Hình o là điểm bắt đầu và x là điểm kết thúc. Giờ thì ta hãy sử dụng SearchProblem và A* để giải quyết vấn đề này bằng Python\n\u0026nbsp;\nimport mathfrom simpleai.search import SearchProblem,astar#Tạo MapMAP = \"\"\"############################### # # ## #### ######## # ## o # # # ## ### ##### ###### ## # ### # ## # # # # # #### ##### # # # x ## # # ###############################\"\"\"#Chuyển Map thành listMAP=[list(x) for x in MAP.split(\"\\n\") if x]#đinh giá để di chuyển xung quanh map. Di chuyển chéo thì sẽ cao hơn là di chuyển theo hướng thẳng.cost_regular=1.0cost_diagonal=1.7#Gắn giá vào hướng di chuyển tương ứngCOST={\"up\":cost_regular,\"down\":cost_regular,\"left\":cost_regular,\"right\":cost_regular,\"up left\":cost_diagonal,\"up right\":cost_diagonal,\"down left\":cost_diagonal,\"down right\":cost_diagonal,}#Tạo Class MazeSolver thừa kế class SearchProblemclass MazeSolver(SearchProblem):def __init__(self,board):self.board=boardself.goal=(0,0)#Tách những khối ban đầu và vị trí kết thúc:for y in range(len(self.board)):for x in range(len(self.board[y])):if self.board[y][x].lower()==\"o\":self.initial=(x,y)elif self.board[y][x].lower()==\"x\":self.goal=(x,y)super(MazeSolver,self).__init__(initial_state=self.initial)# Override method actions, tại mỗi vị trí chúng ta cần kiểm gia trá trị để đi đến ô kế tiếp và sau đó kết nối với các hành động(action) có thể. Nếu ô bên cạnh bị chặn thì hành động sẽ được bỏ quadef actions(self, state):actions=[]for action in COST.keys():newx,newy=self.result(state,action)if self.board[newy][newx]!=\"#\":actions.append(action)return actions# Override method result. Dựa trên trạng thái hiện tại và hành động input, cập nhật vị trí tọa độ x và ydef result(self, state, action):x,y=stateif action.count(\"up\"):y-=1if action.count(\"down\"):y+=1if action.count(\"left\"):x-=1if action.count(\"right\"):x+=1new_state=(x,y)return new_state# Kiểm tra xem đã đến đích chưa ?def is_goal(self, state):return state==self.goal# Chúng ta định nghĩa hàm cost. đây là giá để di chuyển tới ô kế tiếp, và nó sẽ khác khi di chuyển ngang dọc và di chuyển chéodef cost(self,state,action,state2):return COST[action]# Giờ thì ta sử dụng hàm heuristic. Ở trường hợp này chúng ta sử dụng cách tính khoảng cách Euclidean ( tiên đề Euclidean):def heuristic(self, state):x,y=stategx,gy=self.goalreturn math.sqrt((x-gx)**2+(y-gy)**2)# Định nghĩa hàm mainif __name__==\"__main__\":problem=MazeSolver(MAP)result=astar(problem,graph_search=True)# Xem path kết quảpath=[x[1] for x in result.path()]# In kết quả ra Terminalprint()for y in range(len(MAP)):for x in range(len(MAP[y])):if(x,y)==problem.initial:print('0',end='')elif(x,y)==problem.goal:print('x',end='')elif(x,y) in path:print('.',end='')else:print(MAP[y][x],end='')print()\n Kết quả được in ra ở Terminal:\n##############################\n# # # #\n# #### ######## # #\n# 0 # # # #\n# .### ##### ###### #\n# . # ### # .... #\n# . # # ..# .# #. ###\n# .##### .# .. # # x #\n# ........ # # #\n##############################\n\u0026nbsp;\nTổng kết\nTrong chương này chúng ta đã học về giải thuật tìm kiểm heuristic. Chúng ta đã thảo luận về sự khác nhau giữ tìm kiếm biết trước và không biết trước thông tiin. Chúng ta học về giải quyết vấn đề với những ràng buộc cần thỏa mãn. Chúng ta tìm hiểu về giải thuật local search và tại sao lại dùng giải thuật mô phỏng luyện kim (simulated annealing). Chúng ta thực hiện giải thuật tìm kiếm tham lam (greedy search) cho phép xây dựng chuỗi.Và giải quyết vấn đề với công thức CSPs( vấn đề ràng buộc cần thủa mãn).\nChúng ta đã học cách import một package với Pycharm và sử dụng thuật toán A* trong package simpleai để giải quyết nhiều bài toán giải đố như 8-puzzle hay maze-solver.\nChương tiếp theo chúng ta sẽ thảo luận về thuật toán di truyền (genetic algorithms) và cách ứng dụng nó vào thực tế.\n "
},
{
	"uri": "https://bamboofx.github.io/ai-with-python/chapter8/",
	"title": "C8: Thuật toán di truyền - Genetic Alogrithms",
	"tags": [],
	"description": "",
	"content": "PythonAI Chapter88\nThuật toán di truyền\n(Genetic Alogrithms)\nTrong chương này chúng ta sẽ học về thuật toán di truyền. Chúng ta sẽ thảo luận về khái niệm của thuật toán tiến hóa và lập trình di truyên, và xem làm thế nào mà chúng được gọi là thuật toán di truyền. Chúng ta sẽ học về các khối xây dựng cơ bản lên thuật toán di truyền như: di truyền chéo(crossover), đột biến(mutation) và hàm thích nghi (fitness functions). Chúng ta sẽ sử dụng những khái niệm đó để xây dựng những hệ thống khác nhau.\nKết quả sẽ thu được khi bạn hoàn thành chương này:\nHiểu được về tiến hóa và thuật toán di truyền Các khái niệm cơ bản trong thuật toán di truyền Tạo ra một mẫu di truyền với tham số cho trước Vẽ đồ thị quá trình xử lý của tiến hóa Giải bài toán hồi quy về những ký hiệu Xây dựng một bộ điều khiển robot thông minh  Thuật toán di truyền và tiến hóa là gì ?\nThuật toán di truyền là một dạng của thuật toán tiến hóa. Vì thế để hiểu thuật toán di truyền là gì chúng ta cần phải thảo luận về thuật toán tiến hóa. Một thuật toán tiến hóa là một thuật toán khám phá tối ưu(heuristic optimization \u0026ndash; đã nói ở chap trước) được áp dụng vào nguyên tắc tiến hóa để giải quyết vấn đề. Khái niệm về tiến hóa thì cũng như là những gì mendel nói có thể tìm hiểu thêm ở wiki. Chúng ta thường sử dụng trực tiếp các hàm và biến để giải quyết vấn đề và đưa ra giải pháp. Nhưng ở thuật toán di truyền, bất cứ vấn đề nào được đưa ra đều được mã hóa thành các bit( mã nhị phân 010) và được thao tác bởi thuật toán. Trong thuật toán di truyền để tối ưu cho một bài toán, ý tưởng (idea) là một tập hợp (gọi là nhiễm sắc thể ) của những giải pháp (solution) có thể ( gọi là cá thể) sẽ được cho tiến hóa theo hướng chọn lọc những giải pháp tốt hơn. Những giải pháp này được thể hiện dưới dạng nhị phân (0,1) và mang nhiều thông tin mã hóa khác nhau. Quá trình tiến hóa xảy ra từ một tập hợp những cá thể hoàn toàn ngẫu nhiên ở tất cả các thế hệ. \nÝ tưởng cơ bản trong tất cả các giải thuật tiến hóa là chúng ta sẽ lấy một tập hợp và áp dụng quy trình chọn lọc tự nhiên. Chúng ta bắt đầu bằng một bộ các cá thể (individual) và sau đó nhận dạng thằng nào khỏe nhất trong số đó. Sức khỏe của mỗi cá thể được xác định bằng cách sử dụng hàm thích nghi (fitness function). Bằng cách này chúng ta sử dụng phương pháp sống sót mạnh nhất (survival of the fittest).\nSau đó chúng ta lấy những cá thể được chọn đó và tạo ra thế hệ tiếp theo bằng phương pháp tổ hợp và đột biến. Chúng ta sẽ thảo luận khái niệm của tổ hợp và đột biến ở phần tiếp thiếp. Bây giờ chúng ta sẽ xem giải thuật như là cơ chế để tạo ra các thế hệ tiếp theo bằng cách coi các cá thể được chọn là bố mẹ.\nKhi chúng ta thực hiện tổng hợp và đột biến, chúng ta đã tạo ra một nhóm cá thể mới sẽ thay thế các nhóm cá thể cũ ở thế hệ tiếp theo. Bằng cách loại bỏ những cá thể yếu và thay thế chúng bằng các thế hệ con, cháu, chúng ta đã tăng mức độ thích nghi chung của cả tập hợp. Chúng ta tiếp tục lặp lại việc này cho tới khi mức độ thích hợp nhất được đạt đến.\nMột thuật toán di truyền là một thuật toán tiến hóa khi chúng ta sử dụng heuristic ( tìm kiếm khám phá) để tìm một chuỗi các bits( mã nhị phân mã hóa) để giải quyết một vấn đề. Chúng ta lặp đi lặp lại trên một tập hợp các cá thể để đưa ra một giải pháp. Chúng ta làm điều đó bằng cách tạo ra những tập hợp cá thể mới mạnh mẽ hơn. Chúng ta áp dụng các phép toán xác suất như lựa chọn (selection), trao đổi chéo (corossover) và đột biến trong vào việc tạo ra các thế hệ (generation) cho các cá thể. Những cá thể này về bản chất là các chuỗi, và các chuỗi này là các phiên bản mã hóa tiềm năng của một giải pháp.\nHàm thích nghi (fitness function) được sử dụng để đo lường mức độ thích nghi của mỗi chuỗi nói cho chúng ta biết mức độ giải quyết vấn đề của mỗi cá thể. Hàm thích nghi này cũng được coi là một hàm tiến hóa. Thuật toán di truyền áp dụng các phép toán được lấy cảm hứng từ tự nhiên, đó là lý do vì sao các thuật ngữ nghe giống với thuật ngữ sinh học.\nCác khái niệm cơ bản trong thuật toán di truyền\nĐể xây dựng một thuật toán di truyền, chúng ta cần hiểu vài khái niệm chính và một số thuật ngữ. Những khái niệm được sử dụng thường xuyên trong lĩnh vực thuật toán di truyền để xây dựng giải phải cho những vấn đề khác nhau. Một trong những khía cạnh quan trọng của thuật toán di truyền là ngẫu nhiên. Để lặp nại nó dựa vào việc lấy mẫu ngẫu nhiên các cá thể. Có nghĩa là việc xử lý không xác định. Vì vậy nếu bạn chạy cùng một thuật toán nhiều lần bạn có thể có những kết quả khác nhau.\nHãy nói về quần thể (population). Một quần thể có nghĩa là một tập hợp của các cá thể - những giải pháp (solutions). Trong thuật toán di tryền, chúng ta không xác định một giải pháp tốt nhất cho một vấn đề. Nó là một tập hợp các giải pháp, một trong cái đó là giải pháp mong muốn. Nhưng những giải pháp khác cũng đóng vai trò quan trọng trong quá trình tìm kiếm. Vì chúng ta có một tập hợp các giải pháp, nên chúng ta ít bị chặn ở đường cụt trong việc tối ưu hóa. Bị chặn trong tối ưu local là một vấn đế cổ điển phải đối mặt với các kỹ thuật tối ưu hóa khác.\nBây giờ chúng ta đã biết về quần thể và bản chất của thuật toán di truyền. Giờ hãy nói về các phép toán. Khi chúng ta tạo ra các thế hệ của các cá thể, chúng ta cần phải đảm bảo chúng là những cá thể mạnh nhất trong thế hệ hiện tại. Đột biến (mutation) là một cách làm. Một thuật toán di truyền làm thay đổi ngẫu nhiên tới một hoặc vài cá thể trong thế hệ hiện tại để mang lại một cá thể mới trong đó có một hoặc một vài tính năng của các cá thể bố mẹ thì thay đổi này được gọi là đột biến. Bây giờ thay đổi này có thể làm cho cá thể đó tốt hơn hoặc xấu hơn trạng thái bố mẹ của cá thể đó do đó không ai đánh giá được phương pháp đột biến nào là tốt nhất\nKhái niệm tiếp theo là khái niệm tổ hợp, nó cũng được gọi là trao đổi chéo. Đây là vai trò của sinh sản trong quá trình tiến hóa. Một thuật toán di truyền có gắng kết hợp các cá thể từ thế hệ hiện tại để tạo ra thế hệ mới. Nó kết hợ một vài tính năng của mỗi cá thể bố mẹ để tạo ra các thế hệ con cháu của nó. Đây được gọi là trao đổi chéo, mục đích của việc này là thay đổi những cá thể yếu trong thế hệ hiện tại bằng thế hệ con chau với những cá thể mạnh mẽ hơn.\nĐể áp dụng trao đổi chéo và đột biến, chúng ta cần phải có tiêu chí lựa chọn. Khái niệm của lựa chọn ở đây được lấy từ lý thuyết chọn lọc tự nhiên. Trong mỗi quá trình lặp, thuật toán di truyền sẽ đưa ra một xử lý lựa chọn. Cá thể mạnh nhất được chọn sử dụng phép chọn lọc (selection) và cá thể yếu hơn sẽ bị loại bỏ. Đây là lúc mà phương pháp \"kẻ sống sót cuối cùng\" được đưa vào sàn đấu. Quá trình lựa chọn này được thực hiện bằng các sử dụng một hàm thích nghi đẻ tính mức độ mạnh yếu của mỗi cá thể.\nTạo một bit mẫu cùng với tham số cho trước\nGiờ chúng ta học về thuật toán di truyền hoạt động thế nào, làm thế nào mà nó có thể giải quyết được một vài vấn đề. Chúng ta sẽ sử dụng một package có tên là DEAP. Bạn có thể tìm hiểu chi tiết về nó tại đây: https://deap.readthedocs.io/en/master/ về cơ bản thì nó là một framework tính toán quá trình tiến hóa để tạo mẫu và thử nghiệm các ý tưởng. Cài package bằng pip install hoặc install package trong pycharm:\nTrong phần này chúng ta sẽ giải quyết mọt biến thể của bài toán One Max Problem. Bài toán One Max Problem là một bài toán về việc tạo rã một chuỗi bit trong đó chứa số lượng số 1 nhiều nhát. Nó là vấn đề cơ bản nhưng rất hữu dụng trong việc làm quen với thư viện DEAP và hiểu về cách thực hiện các giải giải pháp sử dụng thuật toán di truyền. Trong trường hợp của chúng ta chúng ta sẽ tạo ra một chuỗi bit chứa số lượng các số 1 được xác định trước. Bạn sẽ thấy cấu trúc code ở bên dưới và một phần của nó giống với ví dụ của thư viện DEAP.\nimport randomfrom deap import base,creator,tools# Giờ chúng ta muốn tạo một chuỗi bít với độ dài là 75 và chúng ta muốn nó chứa 45 số 1.#Chúng ta cần tạo một hàm đánh giá (evaluation function) để có thể sử dụng như là mục tiêu cần đạt :def eval_func(individual):target_sum=45return len(individual)-abs(sum(individual)-target_sum),# Nếu bạn nhìn vào công thức được sử dụng ở hàm trên bạn có thể thấy nó sẽ đạt giá trị lớn nhất khi số lượng số 1 bằng 45. độ dài các cá thể là 75. Khi những số 1 của nó bằng 45 thì giá trị trả về phải là 75#Giờ chúng ta tạo một hàm để tạo toolbox. Hãy tạo một object creator để làm hàm thích nghi và theo dõi các cá thể. Class Fitness được dùng ở đây là một abtract class và no dung tham số weights.# Chúng ta sẽ xây dựng một thích nghi tối đa sử dụng số weights dương:def create_toolbox(num_bits):creator.create(\"FitnessMax\",base.Fitness,weights=(1.0,))creator.create(\"Individual\",list,fitness=creator.FitnessMax)# Dòng đầu tiên tạo ra một object thích nghi tối đa và đặt tên nó là FitnessMax. Dòng thứ 2 tạo ra cá thể. Trong phần sử lý này thì cá thể đầu tiên được tạo ra là một list các số float# Để sản xuất ra cá thể này, chúng ta phải tạo một Individual class sử dụng creator. Tham số fitnesss sử dụng object FitnessMax đã tạo ra trước đó.#Một toolbox là một object thường dùng trong DEAP. Nó dùng để chứa các hàm cùng với các tham số.toolbox=base.Toolbox()# Chúng ta bắt đầu đăng ký các hàm khác nhau vào trong object toolbox này. Bắt đầu với việc tạo ra các số nguyên ngẫu nhiên 0 và 1. Đây là cách cơ bản để tạo ra chuỗi bittoolbox.register(\"attr_tool\",random.randint,0,1)# Giờ thì đăng ký hàm individual. Method initRepeat gồm có 3 tham số.# * container class cho các individual (cá thể)# * hàm dùng để fill cái container trên# * Thời dian chúng ta muốn lặp cái hàm này lạitoolbox.register(\"individual\",tools.initRepeat,creator.Individual,toolbox.attr_tool,num_bits)# Chúng ta cần tạo một hàm quần thể (population). Chúng ta muốn quần thể này là một list gồm các cá thể (individual)toolbox.register(\"population\",tools.initRepeat,list,toolbox.individual)# Giờ chúng ta tạo ra các phép toán. Đăng ký các hàm đánh giá mà chúng ta đã tạo ra ở bên trên, nó sẽ thực hiện như một hàm thích nghi. Chúng ta muốn các cá thể là một chuỗi bit có 45 số 1toolbox.register(\"evaluate\",eval_func)# Tạo phép toán trao đỏi chéo và đặt tên nó là mate sử dụng Method cxTwoPoint của toolstoolbox.register(\"mate\",tools.cxTwoPoint)# Tạo phép toán đột biến đặt tên nó là mutate sử dụng method mutFlipBit. chúng ta cần chỉ định xác suất đột biến cho từng thuộc tính bằng tham trị indpbtoolbox.register(\"mutate\",tools.mutFlipBit,indpb=0.05)# Tạo một hàm sử dụng method selTournament. Nó sẽ chỉ định cá thể nào sẽ được chọn để \"chăn\" tiếp ( phép chọn - selection)# * tournsize: số các cá thể sẽ tham gia mỗi Tournament ( trận đấu giữa các cá thể ) who is the survivaltoolbox.register(\"select\",tools.selTournament,tournsize=3)return toolbox# Đây là việc cơ bản để thực hiện tất cả các khái niệm chúng ta đã thảo luận ở phần trước. Một hàm tạo toolbox rất phổ biến trong DEAP và chúng ta sẽ sử dụng nó trong suốt chương 8 này.# Vì vậy sẽ rất quan trọng để dành một chút thời gian để hiểu cách chúng ta tạo ra cái toolbox này thế nào# Tạo hàm main và tạo độ dài chuỗi bit:if __name__==\"__main__\":num_bits=75#Tạo toolbox với numbitstoolbox=create_toolbox(num_bits)# đặt số ngẫu nhiên cho random = 7random.seed(7)#Tạo một quần thể 500 thanh niên (individual)population=toolbox.population(n=500)# Tạo số xác suất cho biến dổi chéo (crossover) và đột biến (mutate). Bạn có thể thay đổi các số này để xem nó ảnh hưởng thế nào đến kết quả:probabilities_cross,prob_mutate=0.5,0.2# Tạo số lượng thế hệ mà chúng ta cần lặp cho đến khi quá trình xử lý dừng. Nếu tăng số thế hệ được tạo bạn sẽ đưa cho thuật toán tăng thêm sức mạnh cho quần thểnum_generations=60# Đánh giá tất cả các cá thể trong quần thể sử dụng hàm đánh giáprint(\"Bắt đầu quá trình tiến hóa\")#Đánh giá cá thểfitnesses=list(map(toolbox.evaluate,population))for ind,fit in zip(population,fitnesses):ind.fitness.values=fit# Bắt đầu vòng lặp các thế hệprint('\\nĐánh giá xong:',len(population),'cá thể')for g in range(num_generations):print(\"\\n==== Thế hệ\",g)offspring=toolbox.select(population,len(population))# Sao chép các cá thể được chọnoffspring=list(map(toolbox.clone,offspring))# Áp dụng trao đổi chéo và đột biến và thế hệ tiếp theo của các cá thể sử dụng số xác suất tro trước. Sau mỗi lần chúng ta cần reset lại số thích nghi (fitness)for child1,child2 in zip(offspring[::2],offspring[1::2]):if random.random()\u0026lt;probabilities_cross:toolbox.mate(child1,child2)# xóa số thích nghi của childdel child1.fitness.valuesdel child2.fitness.valuesfor mutant in offspring:if random.random()\u0026lt;prob_mutate:toolbox.mutate(mutant)del mutant.fitness.values# Đánh giá cá nhân cần phải loại bỏinvalid_individuals=[ind for ind in offspring if not ind.fitness.valid]fitness=map(toolbox.evaluate,invalid_individuals)for ind,fit in zip(invalid_individuals,fitness):ind.fitness.values=fitprint(\"Đánh giá :\", len(invalid_individuals),\"cá thể\")# Thay đổi quần thể bằng thế hệ mới của các cá thểpopulation[:]=offspring# In trạng thái của thế hệ hiện tại để xem quá trình xử lý:fits=[ind.fitness.values[0] for ind in population]length=len(population)mean=sum(fits)/lengthsum2=sum(x*x for x in fits)std=abs(sum2/length-mean**2)**0.5print('Min =',min(fits),', Max =',max(fits))print('Average =',round(mean,2),', Standard devitation =',round(std,2))print(\"\\n===== Kết thúc quá trình tiến hóa\")best_individual=tools.selBest(population,1)[0]print(\"Thanh niên khỏe nhất:\\n\",best_individual)print(\"Tổng số 1 trong the choosen one: \",sum(best_individual))\n \u0026nbsp;\nKết quả tại output:\nBắt đầu quá trình tiến hóa\nĐánh giá xong: 500 cá thể\n==== Thế hệ 0\nĐánh giá : 297 cá thể\nMin = 58.0 , Max = 75.0\nAverage = 70.43 , Standard devitation = 2.91\n==== Thế hệ 1\nĐánh giá : 303 cá thể\nMin = 63.0 , Max = 75.0\nAverage = 72.44 , Standard devitation = 2.16\n==== Thế hệ 2\nĐánh giá : 310 cá thể\nMin = 65.0 , Max = 75.0\nAverage = 73.31 , Standard devitation = 1.6\n==== Thế hệ 3\nĐánh giá : 273 cá thể\nMin = 67.0 , Max = 75.0\nAverage = 73.76 , Standard devitation = 1.41\n……………………………………..\n==== Thế hệ 56\nĐánh giá : 306 cá thể\nMin = 68.0 , Max = 75.0\nAverage = 73.96 , Standard devitation = 1.32\n==== Thế hệ 57\nĐánh giá : 306 cá thể\nMin = 68.0 , Max = 75.0\nAverage = 74.02 , Standard devitation = 1.27\n==== Thế hệ 58\nĐánh giá : 276 cá thể\nMin = 69.0 , Max = 75.0\nAverage = 74.15 , Standard devitation = 1.18\n==== Thế hệ 59\nĐánh giá : 288 cá thể\nMin = 69.0 , Max = 75.0\nAverage = 74.12 , Standard devitation = 1.24\n===== Kết thúc quá trình tiến hóa\nThanh niên khỏe nhất:\n[1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1]\nTổng số 1 trong the choosen one: 45\n \u0026nbsp;\nNhư bạn nhìn thấy ở những gì được in ra tại Terminal. Quá trình tiến hóa kết thúc sau 60 thế hệ. Sau mỗi lần thực hiện các cá thể được chọn và in kết quả. và kết quả cuối cùng là cái chúng ta mong muốn.\nHình dung sự tiến hóa (vẽ đồ thị)\nGiờ thì chúng ta xem có thể biểu diễn quá trình tiến hóa thế nào. Trong DEAP, họ sự dụng một hàm có tên là Covariance Matrix Adaptation Strategy(CMS-ES) để vẽ biểu đồ tiến hóa. Nó là một thuật toán tiến hóa được sử dụng giải quyết vấn đề không tuyến tính trong nhiều lĩnh vực. Giải thuật CMA-E5 mạnh mẽ, nghiên cứu tốt, và được xem như là một môn nghệ thuật trong các thuật toán tiến hóa. Hãy xem nó làm việc thế nào bằng cách xem các ví dụ trong thư viện DEAP. import numpy as npimport matplotlib.pyplot as pltfrom deap import algorithms,base,benchmarks,cma,creator,tools# Tạo toolboxdef create_toolbox(strategy):creator.create(\"FitnessMin\",base.Fitness,weights=(-1,))creator.create(\"Individual\",list,fitness=creator.FitnessMin)toolbox=base.Toolbox()toolbox.register(\"evaluate\",benchmarks.rastrigin)np.random.seed(7)# Tạo method generate và update. Điều này có liên quan đến bản cập nhật mô hình nơi chúng ta sẽ tạo một quần thể từ một strategy và stategy này cập nhật dựa trên quần thểtoolbox.register(\"generate\",strategy.generate,creator.Individual)toolbox.register(\"update\",strategy.update)return toolbox#Tạo hàm main.if __name__==\"__main__\":#Tạo số cá thể và số lần tiến hóa (thế hệ)num_individuals=10num_generations=125#Chúng ta cần định nghĩa hàm strategy trước khi chúng ta bắt đầustrategy=cma.Strategy(centroid=[5.0]*num_individuals,sigma=5.0,lambda_=20*num_individuals)toolbox=create_toolbox(strategy)# Tạo một object HallOfFame. object này chứa những cá nhân tốt nhất được chọn trong quần thể. object này được giữ ở một định dạng được sắp xếp suốt quá trình.# Bằng cách này thành phần đầu tiên trong object HallOfFame là cá thể có giá trị thích nghi (fitness) tốt nhất trong quá trình tiến hóahall_of_fame=tools.HallOfFame(1)# Tạo các số liệu thống kê sử dụng hàm Statistics trong toolsstats=tools.Statistics(lambda x:x.fitness.values)stats.register(\"avg\",np.mean)stats.register(\"std\",np.std)stats.register(\"min\",np.min)stats.register(\"max\",np.max)# tạo object logbook để theo dõi quá trình tiến hóa. Nó về cơ bản là một list của dictionaries:logbook=tools.Logbook()logbook.header=\"gen\",\"eval\",\"std\",\"min\",\"avg\",\"mã\"# Tạo object để kết hợp tất cả các dữ liệu:sigma=np.ndarray((num_generations,1))axis_ratio=np.ndarray((num_generations,1))diagD=np.ndarray((num_generations,num_individuals))fbest=np.ndarray((num_generations,1))best=np.ndarray((num_generations,num_individuals))std=np.ndarray((num_generations,num_individuals))# lặp để tạo quá trình tiến hóafor gen in range(num_generations):population=toolbox.generate()# Tìm cá nhân thích hợp sử dụng hàm thích nghi:fitnesses=toolbox.map(toolbox.evaluate,population)for ind,fit in zip(population,fitnesses):ind.fitness.values=fit# Cập nhật stategy dựa trên quần thểtoolbox.update(population)# Cập nhật hallofFame và số liệu sử dụng thế hệ hiện tại của các cá thể:hall_of_fame.update(population)record=stats.compile(population)logbook.record(evals=len(population),gen=gen,**record)print(logbook.stream)# Save dữ liệu để vẽ biểu đồsigma[gen]=strategy.sigmaaxis_ratio[gen]=max(strategy.diagD)**2/min(strategy.diagD)**2diagD[gen,:num_individuals]=strategy.diagD**2fbest[gen]=hall_of_fame[0].fitness.valuesbest[gen,:num_individuals]=hall_of_fame[0]std[gen,:num_individuals]=np.std(population,axis=0)# Đinh nghĩa trục x để vẽ số liệu thống kêx=list(range(0,strategy.lambda_*num_generations,strategy.lambda_))avg,max_,min_=logbook.select(\"avg\",\"max\",\"min\")plt.figure()plt.semilogx(x,avg,\"--b\",label=\"avg\")plt.semilogx(x, max_, \"--b\",label=\"max\")plt.semilogx(x, min_, \"--b\",label=\"min\")plt.semilogx(x, fbest, \"--c\",label=\"fbest\")plt.semilogx(x, sigma, \"--g\",label=\"sigma\")plt.semilogx(x, axis_ratio, \"--r\",label=\"axis_ratio\")plt.grid(True)plt.legend()plt.figure()plt.plot(x,best)plt.grid(True)plt.title(\"Object Variables\")plt.figure()plt.semilogy(x,diagD)plt.grid(True)plt.title(\"Scaling (All Main Axes)\")plt.figure()plt.semilogy(x,std)plt.grid(True)plt.title(\"Standard Deviations (độ lệch chuẩn) in all cột\")plt.show()\n Kết quả thu được\nhình ảnh được vẽ trên matplot:\n\u0026nbsp;\nKết quả thu được tại terminal\n\u0026nbsp;\ngen\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;eval\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;std \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;min \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;avg \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;mã\n0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;188.36\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;217.082\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;576.281\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;250.543\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;196.583\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;659.389\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n2 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;273.081\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;199.455\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;683.641\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n3 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;215.326\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;111.298\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;503.933\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n4 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;133.046\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;149.47 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;373.124\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n5 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;75.4405\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;131.117\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;274.092\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n6 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;61.2622\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;91.7121\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;232.624\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n7 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;49.8303\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;88.8185\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;201.117\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n8 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;39.9533\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;85.0531\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;178.645\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n9 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;31.3781\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;87.4824\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;159.211\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n10 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;31.3488\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;54.0743\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;144.561\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n11 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;30.8796\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;63.6032\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;136.791\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n12 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;24.1975\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;70.4913\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;125.691\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n13 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;21.2274\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;50.6409\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;122.293\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n14 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;25.4931\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;67.9873\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;124.132\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n15 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;26.9804\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;46.3411\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;119.295\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n16 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;24.8993\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;56.0033\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;115.614\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n17 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;21.9789\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;61.4999\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;113.417\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n18 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;21.2823\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;50.2455\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;112.419\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n19 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;22.5016\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;48.153 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;111.543\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n20 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;21.1602\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;32.1864\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;106.044\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n21 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;23.3864\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;52.8601\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;107.301\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n22 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;23.1008\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;51.1226\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;109.628\n………………………………….\n…………….\n………..\n113\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.96222e-09\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.24141e-10\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.12443e-09\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n114\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.15578e-09\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.03659e-10\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.45078e-09\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n115\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;8.63667e-10\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.62174e-10\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.80088e-09\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n116\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.00297e-10\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.11019e-10\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.19956e-09\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n117\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.43539e-10\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.41625e-10\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.81353e-10\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n118\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.22699e-10\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.47097e-10\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.08937e-10\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n119\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.62103e-10\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.08082e-11\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.51655e-10\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n120\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;9.20862e-11\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.12967e-11\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.05411e-10\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n121\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.52617e-11\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.28884e-11\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.57709e-10\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n122\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.71043e-11\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.37179e-11\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.0917e-10 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n123\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.70369e-11\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.05773e-11\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;8.07213e-11\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n124\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.71108e-11\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.01608e-11\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.75073e-11\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\n\u0026nbsp;\nGiải quyết vấn đề hồi quy ký hiệu ( symbol regression \u0026ndash; kiểu như giải phương trình :D)\nHãy xem lập trình di truyền giải quyết vấn đề hồi quy ký hiệu thế nào. Nó rất quan trọng để hiểu rằng lập trình di truyền không giống như là thuật toán di truyền. Lập trình di truyền là một dạng của lập trình tiến hóa trong đó các giải pháp xuất hiện trong từng phần của một trương trình máy tính. Về cơ bản các cá thể trong mỗi quần thể là một trương trình máy tính và chúng thích nghi với từng mức dộ tương ứng đối với khả năng giải quyết vấn đề của chúng. Những chương trình này được thay đổi tại mỗi lần lặp sử dụng thuật toán di truyền. Về bản chấn lập trình di truyền là một ứng dụng của thuật toán di truyền.\nTrở lại bài toán giải quyết vấn đề hồi quy ký hiệu, chúng ta có một biểu thứ đa thức cần được giải ở đây. Đây là một vấn đề hồi quy cổ điển, chúng ta cần ước tính những hàm cơ bản. Trong ví dụ này chúng ta sẽ xử dụng phương trình bậc 3 sau : \u0026nbsp;\nCode chúng ta sẽ làm dưới đây là một biến thể của symbol regression được đưa ra trong thư viện DEAP:\nimport operatorimport mathimport randomimport numpy as npfrom deap import algorithms,base,creator,tools,gp#Tạo toolBox# Để tạo toolbox ở đây chúng ta cần tạo một bộ sơ khai (primitives)# Bộ sơ khai này là những phép toán cơ bản sẽ dược sử dụng trong suốt quá trình phát triển.# Chúng phục vụ việc xây dựng các khối cho các cá thể.# Chúng ta sẽ sử dụng các hàm số học cơ bản cho bộ sơ khai nàydef create_toolbox():pset=gp.PrimitiveSet(\"MAIN\",1)pset.addPrimitive(operator.add,2)pset.addPrimitive(operator.sub,2)pset.addPrimitive(operator.mul,2)pset.addPrimitive(division_operator,2)pset.addPrimitive(operator.neg,1)pset.addPrimitive(math.cos,1)pset.addPrimitive(math.sin,1)# Giờ chúng ta cần tạo hằng số phù du ( ephemeral constant).# Nó là một giá trị đầu cuối đặc biệt không có giá trị đặc biệt. Khi một trương trình nối thêm hằng số phù du như vậy vào cây(tree), thì hàm đó sẽ được thực thi. Kết quả được thêm vào caay như là một số không đổi.# Những số không đổi này có thể lấy giá trị là -1,0,1pset.addEphemeralConstant(\"rand1\",lambda :random.randint(-1,1))#Tên mặc định của đối số là ARGx. Giờ thì đổi tên nó thành x. Không cần thiết phải làm điều này nhưng lại hưu dụng để quản lý:pset.renameArguments(ARG0='x')#chúng ta cần 2 dạng object là fitness(thích nghi) và cá thể (individual). giờ thì sử dụng creator để tạocreator.create(\"FitnessMin\",base.Fitness,weights=(-1.0,))creator.create(\"Individual\",gp.PrimitiveTree,fitness=creator.FitnessMin)# Tạo toolbox và các hàm cần đăng ký để sử dụng. Quá trình đăng ký giống ở phần trướctool_box=base.Toolbox()tool_box.register(\"expr\", gp.genHalfAndHalf, pset=pset, min_=1, max_=2)tool_box.register(\"individual\", tools.initIterate, creator.Individual, tool_box.expr)tool_box.register(\"population\", tools.initRepeat, list, tool_box.individual)tool_box.register(\"compile\",gp.compile,pset=pset)tool_box.register(\"evaluate\",eval_func,points=[x/10. for x in range(-10,10)])tool_box.register(\"select\",tools.selTournament,tournsize=3)tool_box.register(\"mate\",gp.cxOnePoint)tool_box.register(\"expr_mut\",gp.genFull,min_=0,max_=2)tool_box.register(\"mutate\",gp.mutUniform,expr=tool_box.expr_mut,pset=pset)tool_box.decorate(\"mate\",gp.staticLimit(key=operator.attrgetter(\"height\"),max_value=17))tool_box.decorate(\"mutate\", gp.staticLimit(key=operator.attrgetter(\"height\"), max_value=17))return tool_box#Tạo một hàm phép chia để quản lý vấn đề gặp lỗi khi chia cho 0#numerator : tử số, denominator mẫu ssoos)def division_operator(numerator,denominator):if denominator==0:return 1return numerator/denominator#Tạo hàm đánh giá sẽ được sử dụng để tính toán. Chúng ta cần tạo một hàm có thể gọi để tính toán cá thể được inputdef eval_func(individual,points):# Chuyển đổi từ cây biểu thành hàmfunc=tool_box.compile(expr=individual)# Tính số mean squared error(mse) giữa các hàm đã định nghĩa phía trên và biểu thức gốcmse=((func(x)-(2*x**3-3*x**2-4*x+1))**2 for x in points)return math.fsum(mse)/len(points),#Tạo hàm mainif __name__==\"__main__\":random.seed(7)tool_box=create_toolbox()#Tạo quần thể sử dụng hàm sẵn có trong toolbox chúng ta đã tạo.# chúng ta sẽ sử dụng 450 cá thể. Người dùng tạo ra số này vì thế chúng ta nên thử thí nghiệm với nó.population=tool_box.population(n=450)# Tạo object hall_of_fame# Object hall of fame là những cá thể còn sống tốt nhất sau 1 quá trình chọn lọchall_of_fame=tools.HallOfFame(1)#Số liệu thống kê luôn là điều quan trọng khi chúng ta xây dựng thuật toán di truyềnstats_fit=tools.Statistics(lambda x:x.fitness.values)stats_size=tools.Statistics(len)# Đăng ký số liệu thống kêmstats=tools.MultiStatistics(fitness=stats_fit,size=stats_size)mstats.register(\"avg\",np.mean)mstats.register(\"std\", np.std)mstats.register(\"min\", np.min)mstats.register(\"max\", np.max)# Tạo các xác xuất trao đổi chéo, đột biến và số thế hệ được tạo raprobab_crossover=0.4probab_mutate=0.2num_generations=60# Chạy thuật toán tiến hóa sử dụng các tham số bên trênpopulation,log=algorithms.eaSimple(population,tool_box,probab_crossover,probab_mutate,num_generations,stats=mstats,halloffame=hall_of_fame,verbose=True)\n \u0026nbsp;\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;fitness \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;size \n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;-----------------------------------------------\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;-----------------------------------------------\ngen\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;nevals\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;avg \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;gen\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;max \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;min \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;nevals\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;std \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;avg \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;gen\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;max\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;min\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;nevals\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;std \n0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;450 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.76249\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;29.1874\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.12469\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;450 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.67752\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.73556\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;7 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;450 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.62449\n1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;218 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.44707\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;65.0882\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.12469\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;218 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.32251\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.74222\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;13 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;218 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.9207 \n2 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;237 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.28001\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1081.07\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.12469\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;237 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;50.8119\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.97111\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;13 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;237 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.12217\n3 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;251 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.62149\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;24.5757\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.12469\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;251 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.66839\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.24 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;13 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;251 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.37303\n4 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;235 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.64965\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;25.3357\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.12469\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;235 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.65292\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.03111\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;13 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;235 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.66231\n5 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;238 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.62677\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;25.3357\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.08925\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;238 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.8576 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.93333\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;16 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;238 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.57682\n6 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;222 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.7156 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;76.9788\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.08925\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;222 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.34684\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.52222\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;16 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;222 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.57003\n7 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;231 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.55804\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;7 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;49.0524\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.727338\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;231 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.49854\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.90667\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;7 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;15 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;231 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.52282\n8 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;223 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.47625\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;8 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;827.927\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.694043\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;223 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;39.0686\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;7.03778\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;8 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;17 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;223 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.46503\n9 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;235 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.18918\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;9 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;34.6026\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.677779\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;235 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.79798\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;7.19111\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;9 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;16 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;235 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.47816\n10 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;234 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.20324\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;10 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;87.034 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.643372\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;234 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;9.611 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;7.44 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;10 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;16 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;234 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.73369\n11 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;222 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.54139\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;11 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;76.9616\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.43688 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;222 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.55684\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;8.2 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;11 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;20 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;222 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.31327\n12 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;256 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.06505\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;12 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;75.9624\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.43688 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;256 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.17633\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;9.20444\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;12 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;20 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;256 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.75919\n13 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;240 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.41737\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;13 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;163.089\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.305525\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;240 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;9.37401\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;10.7844\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;13 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;20 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;240 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.89646\n14 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;237 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.75123\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;14 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;76.9788\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.263951\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;237 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.25166\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;12.0222\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;14 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;25 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;237 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.84817\n15 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;242 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.7084 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;15 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;75.9624\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.263951\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;242 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.97002\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;13.2578\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;15 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;25 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;242 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.69146\n16 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;239 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.25739\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;16 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;523.417\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.288872\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;239 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;24.6152\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;14.1733\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;16 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;31 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;239 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.86451\n17 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;214 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;905.516\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;17 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;407063 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.28364 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;214 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;19167.8\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;14.8489\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;17 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;28 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;214 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.64957\n18 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;234 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.28433\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;18 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1108.12\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.28364 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;234 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;62.8867\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;15.5622\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;18 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;34 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;234 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.90064\n19 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;216 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.945653\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;19 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;15.7901\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.267937\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;216 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.35834\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;15.6689\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;19 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;29 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;216 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.74749\n20 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;225 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.968969\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;20 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;25.3857\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.263951\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;225 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.61642\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;15.7378\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;20 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;31 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;225 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.31613\n21 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;230 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.08018 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;21 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;67.9333\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.214013\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;230 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.55283\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;15.5489\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;21 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;29 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;230 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.47894\n22 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;212 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;34.5584 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;22 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;7272.08\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.229736\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;212 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;484.197\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;15.3667\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;22 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;31 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;212 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.42932\n23 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;251 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;13.6623 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;23 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5188 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.137647\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;251 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;245.379\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;16.3333\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;23 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;34 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;251 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.96969\n24 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;236 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;231.843 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;24 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;101293 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.137647\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;236 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4769.79\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;16.7422\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;24 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;32 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;236 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.6819 \n25 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;247 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;36.9969 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;25 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;7272.08\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.137647\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;247 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;485.245\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;16.8578\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;25 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;34 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;247 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.84903\n26 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;248 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.25329 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;26 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;96.4683\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.137647\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;248 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.1718 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;17.3822\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;26 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;39 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;248 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.93699\n27 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;235 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.40595 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;27 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;518.472\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0894973\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;235 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;41.437 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;17.8889\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;27 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;31 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;235 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.01563\n28 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;249 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;44309.9 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;28 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.99384e+07\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0894973\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;249 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;938860 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;18.4689\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;28 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;42 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;249 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.51283\n29 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;219 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;44308.6 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;29 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.99384e+07\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0894973\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;219 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;938861 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;19.1689\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;29 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;44 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;219 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.87975\n30 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;253 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;90.0489 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;30 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;35832.7 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0894973\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;253 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1692.51\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;20.8378\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;30 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;42 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;253 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.42619\n31 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;243 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;44311.3 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;31 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.99384e+07\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0894973\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;243 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;938860 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;21.7467\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;31 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;42 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;243 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.92582\n32 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;261 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.76097 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;32 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;518.472 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0894973\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;261 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;30.5632\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;22.4778\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;32 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;40 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;261 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.17563\n33 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;237 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.08023 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;33 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;508.791 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0549966\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;237 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;38.6058\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;22.7356\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;33 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;46 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;237 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.48683\n34 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;225 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.87896 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;34 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;392.482 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0458476\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;225 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;18.9942\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;22.6067\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;34 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;45 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;225 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.32023\n35 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;232 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;9.50456 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;35 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2011.56 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0458476\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;232 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;121.499\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;22.6489\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;35 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;44 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;232 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.18428\n36 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;229 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;49.205 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;36 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;21106.8 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0458476\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;229 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;993.977\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;22.62 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;36 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;43 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;229 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.83184\n37 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;240 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.10944 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;37 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;82.6651 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0404723\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;240 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.82271\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;23.0222\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;37 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;48 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;240 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.8762 \n38 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;215 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1401.88 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;38 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;629510 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0404723\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;215 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;29642.3\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;22.8067\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;38 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;48 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;215 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.20943\n39 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;239 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;22.1639 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;39 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6319.76 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0404723\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;239 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;328.827\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;23.9044\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;39 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;47 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;239 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.31641\n40 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;247 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;35.0672 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;40 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5175.75 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0404723\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;247 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;323.734\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;24.9533\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;40 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;48 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;247 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.52972\n41 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;220 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.20863 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;41 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;393.283 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0404723\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;220 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;26.8306\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;25.7778\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;41 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;45 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;7 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;220 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.32954\n42 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;244 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.36788 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;42 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;656.388 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0404723\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;244 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;36.6233\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;26.8889\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;42 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;47 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;244 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.8747 \n43 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;226 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;57481.4 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;43 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.99401e+07\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0404723\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;226 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;978932 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;28.0067\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;43 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;54 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;226 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.57115\n44 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;234 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;25064.5 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;44 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.12787e+07\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0336934\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;234 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;531092 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;28.18 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;44 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;50 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;234 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.39973\n45 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;240 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;44305.6 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;45 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.99371e+07\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0336934\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;240 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;938798 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;28.8178\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;45 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;52 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;240 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.05366\n46 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;219 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;10.77 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;46 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4245.01 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0336934\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;219 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;200.489\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;29.1111\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;46 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;68 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;219 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.89999\n47 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;254 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;44337.1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;47 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.99401e+07\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0336934\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;254 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;938940 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;29.6622\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;47 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;56 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;254 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.96669\n48 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;239 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;88630.1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;48 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.99401e+07\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0336934\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;239 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.32638e+06\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;30.1778\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;48 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;65 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;239 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.77344\n49 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;233 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;132937 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;49 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.99401e+07\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0336934\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;233 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.62267e+06\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;29.8511\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;49 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;54 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;233 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.92484\n50 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;227 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.13659e+06\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;50 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.11761e+08\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0336934\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;227 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.94909e+07\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;29.94 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;50 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;53 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;227 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;7.09482\n51 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;234 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.53083e+06\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;51 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;6.09116e+08\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0288634\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;234 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.87347e+07\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;31.0244\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;51 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;53 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;234 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;7.24012\n52 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;257 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.00364e+06\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;52 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.11761e+08\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0288634\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;257 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.94301e+07\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;32.8 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;52 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;61 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;257 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;8.66051\n53 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;217 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2.06995 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;53 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;558.294 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0288634\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;217 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;27.1177 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;33.5578\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;53 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;73 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;217 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;9.75169\n54 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;216 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;44319.3 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;54 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.99401e+07\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0288634\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;216 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;938941 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;36.2111\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;54 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;70 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;216 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;8.9885 \n55 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;205 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;44386.7 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;55 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.99441e+07\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0259686\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;205 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;939127 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;38.3 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;55 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;70 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;205 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;8.32967\n56 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;229 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.669908 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;56 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;110.687 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0258848\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;229 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.36977 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;39.5867\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;56 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;72 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;229 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;7.69287\n57 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;238 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1523.73 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;57 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;685379 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0258848\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;238 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;32273.1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;40.8956\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;57 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;76 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;10 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;238 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;7.29019\n58 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;224 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.69972 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;58 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;175.932 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0221367\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;224 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;13.0604 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;40.6467\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;58 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;69 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;224 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;9.10614\n59 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;236 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.09142 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;59 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;143.019 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0182866\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;236 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;7.63839 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;40.8911\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;59 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;80 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;236 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;9.09599\n60 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;260 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.880821 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;60 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;143.068 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0.0182866\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;260 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;7.04664 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;41.1467\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;60 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;76 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;260 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;9.16495\nXây dựng một bộ điều khiển robot thông minh\nChúng ta sẽ dùng thuật toán di truyền để xây dựng bộ điều khiển robot. Chúng ta có một cái map như sau:\nS là vị trí của robot, có tất cả 124 mục tiêu trong map trên. Nhiệm vụ của bộ điều khiển robot là tự động di chuyển trên bản đồ và đến tất cả các mục tiêu. Chương trình này là một biến thể của chương rình kiến nhân tạo (artificial ant) được đưa ra trong thư viện DEAP.\nimport copyimport randomfrom functools import partialimport numpy as npfrom deap import algorithms,base,creator,tools,gp#Tạo class robotclass RobotController(object):def __init__(self,max_moves):self.max_move=max_movesself.moves=0self.consumed=0self.routine=None# Định nghĩa các hướng đi và cách di chuyểnself.direction=[\"north\",\"east\",\"south\",\"west\"]self.direction_row=[1,0,-1,0]self.direction_col=[0,1,0,-1]#Tạo hàm resetdef _reset(self):self.row=self.rowStartself.col=self.colStartself.direction=1self.moves=0self.consumed=0self.matrix_exc=copy.deepcopy(self.matrix)# Tạo hàm xác định các toán tử điều kiệndef _conditional(self,condition,out1,out2):out1() if condition() else out2()# Rẽ tráidef turn_left(self):if self.moves\u0026lt;self.max_move:self.moves+=1self.direction=(self.direction-1)%4# Rẽ phảidef turn_right(self):if self.moves\u0026lt;self.max_move:self.moves+=1self.direction=(self.direction+1)%4# Đi thẳngdef move_forward(self):if self.moves\u0026lt;self.max_move:self.moves+=1self.row=(self.row+self.direction_row[self.direction])%self.matrix_rowself.col=(self.col+self.direction_col[self.direction])%self.matrix_colif self.matrix_exc[self.row][self.col]==\"target\":self.consumed+=1self.matrix_exc[self.row][self.col]=\"passed\"# Tạo hàm để định vị mục tiêu. Nếu nó nhìn thấy mục tiêu phía trước thì sẽ cập nhật matrix phù hợpdef sense_target(self):ahead_row=(self.row+self.direction_row[self.direction])%self.matrix_rowahead_col=(self.col+self.direction_col[self.direction])%self.matrix_colreturn self.matrix_exc[ahead_row][ahead_col]==\"target\"# Khi nhìn thấy mục tiêu phía trước thì tạo hàm phù hợp và trả về :def if_target_ahead(self,out1,out2):return partial(self._conditional,self.sense_target,out1,out2)# tạo hàm rundef run(self,routine):self._reset()while self.moves\u0026lt;self.max_move:routine()# Tạo hàm để đi khắp bản đổ . Biểu tượng # tượng trưng cho tất cả các mục tiêu trên bản đồ. và biểu tượng S là điểm bắt đầu. còn lại biểu thị các ô trốngdef traverse_map(self,matrix):self.matrix=list()for i,line in enumerate(matrix):self.matrix.append(list())for j,col in enumerate(line):if col==\"#\":self.matrix[-1].append(\"target\")elif col==\".\":self.matrix[-1].append(\"empty\")elif col==\"S\":self.matrix[-1].append(\"empty\")self.rowStart=self.row=iself.colStart=self.col=jself.direction=1self.matrix_row=len(self.matrix)self.matrix_col=len(self.matrix[0])self.matrix_exc=copy.deepcopy(self.matrix)# Tạo class để tạo hàm dựa trên những tham số inputclass Prog(object):def _progn(self,*args):for arg in args:arg()def prog2(self,out1,out2):return partial(self._progn,out1,out2)def prog3(self,out1,out2,out3):return partial(self._progn,out1,out2,out3)# Tạo hàm đánh giádef eval_func(individual):global robot,pset# biến đổi từ biểu thức thành hàm Pythonroutine=gp.compile(individual,pset)# Chạy chương trình:robot.run(routine)return robot.consumed,#Tạo toolbox:def create_toolbox():global robot,psetpset = gp.PrimitiveSet(\"MAIN\", 0)pset.addPrimitive(robot.if_target_ahead, 2)pset.addPrimitive(Prog().prog2, 2)pset.addPrimitive(Prog().prog3, 3)pset.addTerminal(robot.move_forward)pset.addTerminal(robot.turn_left)pset.addTerminal(robot.turn_right)creator.create(\"FitnessMax\", base.Fitness, weights=(1.0,))creator.create(\"Individual\", gp.PrimitiveTree, fitness=creator.FitnessMax)#Tạo hàm fitness:toolbox = base.Toolbox()# Attribute generatortoolbox.register(\"expr_init\", gp.genFull, pset=pset, min_=1, max_=2)# Structure initializerstoolbox.register(\"individual\", tools.initIterate, creator.Individual, toolbox.expr_init)toolbox.register(\"population\", tools.initRepeat, list, toolbox.individual)toolbox.register(\"evaluate\", eval_func)toolbox.register(\"select\", tools.selTournament, tournsize=7)toolbox.register(\"mate\", gp.cxOnePoint)toolbox.register(\"expr_mut\", gp.genFull, min_=0, max_=2)toolbox.register(\"mutate\", gp.mutUniform, expr=toolbox.expr_mut, pset=pset)return toolbox# Tạo hàm mainif __name__==\"__main__\":global robotrandom.seed(7)max_move=750robot=RobotController(max_move)toolbox=create_toolbox()# Đọc Mapwith open('data/chap8/target_map.txt','r') as f:robot.traverse_map(f)# Tạo một quần thể 400 cá nhân và tạo hall_of_fame cho những thằng còn sốngpopulation=toolbox.population(n=400)hall_of_fame=tools.HallOfFame(1)# Đăng ký các thông số dữ liệu và chạy thuật toán tiến hóa sử dụng các tham sốstats = tools.Statistics(lambda x: x.fitness.values)stats.register(\"avg\", np.mean)stats.register(\"std\", np.std)stats.register(\"min\", np.min)stats.register(\"max\", np.max)probab_crossover = 0.4probab_mutate = 0.3num_generations = 50algorithms.eaSimple(population, toolbox, probab_crossover,probab_mutate, num_generations, stats, halloffame=hall_of_fame)\n \u0026nbsp;\ngen\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;nevals\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;avg \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;std \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;min\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;max\n0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;400 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.4875\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.37491\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;62 \n1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;231 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.285 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;7.56993\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;73 \n2 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;235 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;10.8925\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;14.8493\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;73 \n3 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;231 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;21.72 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;22.1239\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;73 \n4 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;238 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;29.9775\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;27.7861\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;76 \n5 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;224 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;37.6275\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;31.8698\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;76 \n6 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;231 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;42.845 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;33.0541\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;80 \n7 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;223 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;43.55 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;33.9369\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;83 \n8 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;234 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;44.0675\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;34.5201\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;83 \n9 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;231 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;49.2975\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;34.3065\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;83 \n10 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;249 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;47.075 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;36.4106\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;93 \n11 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;222 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;52.7925\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;36.2826\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n12 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;248 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;51.0725\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;37.2598\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n13 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;234 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;54.01 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;37.4614\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n14 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;229 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;59.615 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;37.7894\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n15 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;228 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;63.3 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;39.8205\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n16 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;220 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;64.605 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;40.3962\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n17 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;236 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;62.545 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;40.5607\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n18 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;233 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;67.99 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;38.9033\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n19 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;236 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;66.4025\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;39.6574\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n20 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;221 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;69.785 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;38.7117\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n21 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;244 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;65.705 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;39.0957\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n22 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;230 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;70.32 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;37.1206\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n23 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;241 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;67.3825\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;39.4028\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n24 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;227 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;69.265 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;38.8828\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n25 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;230 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;68.9875\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;38.2422\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n26 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;214 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;71.505 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;36.964 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n27 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;246 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;72.72 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;37.1637\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n28 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;238 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;73.5975\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;36.5385\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n29 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;239 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;76.405 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;35.5696\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n30 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;246 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;78.6025\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;33.4281\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n31 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;240 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;74.83 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;36.5157\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n32 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;216 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;80.2625\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;32.6659\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n33 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;220 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;80.6425\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;33.0933\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n34 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;247 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;78.245 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;34.6022\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n35 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;241 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;81.22 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;32.1885\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n36 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;234 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;83.6375\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;29.0002\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n37 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;228 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;82.485 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;31.7354\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n38 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;219 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;83.4625\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;30.0592\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n39 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;212 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;88.64 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;24.2702\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n40 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;231 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;86.7275\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;27.0879\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n41 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;229 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;89.1825\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;23.8773\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n42 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;216 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;87.96 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;25.1649\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n43 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;218 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;86.85 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;27.1116\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n44 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;236 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;88.78 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;23.7278\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n45 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;225 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;89.115 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;23.4212\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n46 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;232 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;88.5425\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;24.187 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n47 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;245 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;87.7775\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;25.3909\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n48 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;231 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;87.78 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;26.3786\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n49 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;238 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;88.8525\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;24.5115\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;0 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97 \n50 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;233 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;87.82 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;25.4164\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;97\nTổng kết\nTrong chương này chúng ta đã học về thuật toán di truyền và các khái niệm cơ bản của nó. Chúng ta đã thảo luận về thuật toán tiến hóa và lập trình di truyền, và chúng ta đã hiểu chúng liên quan thế nào đến thuật toán di truyền. Chúng ta thảo luận về các khối xây dựng cơ bản của thuật toán di truyền bao gồm khái niệm về quần thể, di truyền chéo, đột biến, chọn lựa, và hàm thích nghi. Chúng ta đã học về các tạo chuỗi bit cùng với tham số cho trước …….\nTrong chap tiếp theo chúng ta sẽ học về học củng cố trong ML và cách xây dựng một trợ lý thông minh .\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n "
},
{
	"uri": "https://bamboofx.github.io/ai-with-python/chapter9/",
	"title": "C9: Xây dựng game cùng với AI",
	"tags": [],
	"description": "",
	"content": "PythonAI Chapter99\nXây dựng game cùng với AI\nTrong chương này chúng ta học cách xây dựng một game cùng với Artificial Intelligence. Chúng ta sẽ học cách sử dụng thuật toán tìm kiếm để đưa ra các chiến lược hiệu quả để thắng trò chơi. Chúng ta sẽ sử dụng những thuật toán đó để xây dựng một con bot cho những game khác nhau.\nNội dung chính trong chương này:\nSử dụng thuật toán tìm kiếm trong games Tổ hợp tìm kiếm Thuật toán Minimax Giải thuật cắt tỉa Alpha-beta Thuật toán Negamax Xây dựng bot cho game Last Coin Standing Xây dựng bot cho Tic Tac Toe Xây dựng hai bot chơi với nhau bằng game Connect Four Xây dựng 2 bot chơi game Hexapawn với nhau  Sử dụng thuật toán tìm kiếm trong Games\nThuật toán tìm kiếm được sử dụng trong game để tìm ra một chiến lược. Thuật toán sẽ tìm kiếm tất cả các khả năng và chọn ra hướng đi tốt nhất. Có những tham số khác nhau như \u0026ndash; tốc độ, độ chính xác, độ phức tạp, và những thứ tương tự vậy. Những thuật toán sẽ xem xét tất cả các hành động có khả năng trong cùng một thời điểm và sau đó sẽ đánh giá các khả năng di chuyển dựa trên những lựa chọn. Mục đích của tất cả những thuật toán này là tìm những bộ phương pháp tối ưu để di chuyển sẽ giúp nhân vật đến được trạng thái cuối cùng. Mỗi game khác nhau đều có một điều kiện để chiến thắng khác nhau. Những thuật toán sử dụng những điều kiện này để tìm ra các bước di chuyển chính xác nhất.\nNhững mô tả bên trên là lý tưởng nếu không có người chơi đối đầu. Mọi thứ không đơn giản nếu trò chơi có nhiều người chư. Hãy thử xem xét một trò chơi có 2 người chơi. Vỡi mỗi lần di chuyển bởi một người chơi, đối thủ sẽ tạo một hướng đi đối nghich để chống lại người kia đến được đích. Vì thế khi một thuật toán tìm kiếm tìm được đường đi tốt nhất cho tình trạng hiện tại thì sau bước đi đó lại không còn đúng nữa bởi vì đối thủ đã chặn đứng nó. Về cơ bản nghĩa là thuật toán tìm kiếm cần phải làm việc liên tục sau mỗi bước đi.\nHãy thảo luận về về cách một chiếc máy tính nhìn nhận mỗi game thế nào. Chúng ta có thể nghĩ mỗi game là một cây tìm kiếm. Tại mỗi node trên cái cây là một trạng thái gặp phải trong tương lai. Ví dụ bạn đang chơi game Tic-Tac-Toe, bạn có thể xây dựng cái cây này dựa trên tất cả các bước đi có thể. Chúng ta bắt đầu từ gốc của cây, đây là điểm bắt đầu của Game. Tại điểm này chúng ta có một vài điểm con là các bước đi có thể. Những ddiemr con này sau mỗi lượt lại có thêm vài điểm con là những trạng thái của game sau khi đã có vài bước di chuyển tiếp theo. Những điểm cuối cùng của cây đại diện cho kết quả cuối cùng của game sau khi đã thực hiện các bước di chuyển. Game có thể kết thúc với kết quả hòa hoặc một người chơi nào đó chiến thắng. Những thuật toán tìm kiếm thông qua cái cây này để quyết định mỗi bước đi của game.\nTổ hợp tìm kiếm (Combinatorial Search)\nNhững thuật toán tìm kiếm xuất hiện để giải quyết vấn đề về thêm sự thông minh cho game, Nhưng nó có một hạn chế. Những thuật toán sử dụng một dạng tìm kiếm được gọi là tìm kiếm tổng quát. Nó cũng được biết đến như là tìm kiếm bắt buộc (brute force search). Cơ bản là nó sẽ khám phá toàn bộ không gian tìm kiếm và kiểm tra tất cả khả năng có thể. Nghĩa là trong trường hợp tồi tệ nhất chúng ta phải đi lòng vòng khắp nơi trước khi chúng ta tìm được hướng đi đúng.\nTrong những game phức tạp, chúng ta không thể bỏ mặc nó muốn tìm gì thì tìm vì số lượng hướng đi nó tìm ra sẽ là ác mộng. Để giải quyết ván đề này chúng ta phải dùng tổ hợp tìm kiếm (combinatorial search) để giairquyeets vấn đề. Đây là một lĩnh vực nghiên cứu nơi các thuật toán tìm kiếm khám phá tất cả các không gian giải pháp sử dụng phương pháp phỏng đoán (heuristic) hoặc đơn giản là giảm kích cỡ không gian tìm kiếm. Nó rất hữu dụng trong games như Chess or go. Tổ hợp tìm kiếm làm việc hiệu quả bằng cách sử dụng các chiến lược cắt tỉa cây tìm kiếm. Những chiến lược này giúp nó tránh thử nghiệm tất cả các khả năng có thể bằng cách loại bỏ những nhánh chắc chắn sai, nó giúp tiết kiệm thời gian và công sức.\nThuật toán Minimax\nGiờ chúng ta thảo luận tóm tắt về tổ hợp tìm kiếm, Hãy nói về hàm lượng giá (heuristic)được sử dụng bởi thuật toán tổ hợp tìm kiếm. Những hàm lượng giá (heuristic) được sử dụng để tăng tông những chiến lược tìm kiếm và thuật toán Minimax là một trong những chiến lược được dùng bởi tổ hợp tìm kiếm. Khi 2 người chơi đối đầu với nhau trong một game, họ sẽ ngăn cản đối thủ đến được đích trước. Vì thế mỗi bên cần dự đoán xem đối thủ sẽ làm gì để thắng game. Dựa trên những điều này Minimax cố gắng giảm thiểu (minimize) khả năng đối thủ đạt được khả năng tối đa(maximize). Hai đối thủ trong trò này được gọi là Min và Max đi theo lượt. Max thể hiện là người quyeests dành thắng lợi và cố gắng tối đa hóa ưu thế của mình, Min là người cố gắng làm giảm điểm số của Max và cố làm cho điểm số của mình theo chiều âm.\nNhư chúng ta đã biết tìm kiếm tất cả khả năng(burte forcing the solutions) không phải là một lựa chọn tối ưu. Máy tính không thể thử tất cả các trạng thái có thể và đưa ra bước đi tốt nhất để thắng game. Myas tính chỉ có thể tối ưu những bước ddi dựa trên trạng thái cụ thể của trò chơi dựa trên một phỏng đoán (heuristic). Máy tính sẽ xây dựng một cây và bắt đầu từ gốc(Max) và nhánh tiếp theo sẽ là Min. Nó đánh giá bước đi nào sẽ có lợi cho đối thủ của nó. Cơ bản nó biết bước đi nào đối thủ sẽ đi dựa vào việc bước đi đó sẽ tốt nhất cho họ, và do đó nó sẽ ít có lợi hơn. Kết quả này là điểm cuối cùng của cây và máy tính sẽ dùng vị trí này để tính ngược lại. Max là tối đa hàm lợi ích Min là tối thiểu lợi ích Chiến lược của Max phụ thuộc vào Min ở bước kế tiếp  Giải thuật cắt tỉa Alpha-Beta\nGiải thuật tìm kiếm Minimax là một chiến lược hiệu quả. Nhưng nó vẫn tìm kiếm tất cả các phần của cây và sẽ có những trường hợp không liên quan gặp phải. Hãy xem xét một cái cây nơi chúng ta tìm kiếm các giải pháp. Mỗi lần chúng ta tìm được một chỉ số tại một node trên cây và tại node này sẽ cho chúng ta biết giải pháp sẽ không tồn tại ở node con của nó và chúng ta không cần phải xem xét node con. Nhưng giải thuật Minimax thì vẫn tìm kiếm giải pháp ở node con. Vì thế nên chúng ta cần trách tìm kiếm tại các phần của cây mà không cần thiết tìm kiếm. Quá trình xử lý này được gọi là cắt tỉa (pruning) và cắt tỉa Alpha-Beta là một dạng chiến lược tránh tìm kiếm những phần của cây không chứa giải pháp.\nTham số Alpha và Beta trong giải thuật cắt tỉa alpha-beta là hai giới hạn được sử dụng trong quá trình tính toán. Những tham số này là những giá trị sẽ từ chối những giải pháp không cần thiết. Nó dựa trên những phần của cây đã được khám phá. Alpha là giới hạn dưới tối đa (\u0026lt; maximum) của số lượng các giải pháp có thể và Beta là giới hạn trên tối thiểu (\u0026gt; min) của các số lượng giải pháp cố thể.\nNhư chúng ta đã nói ở trên mỗi node có thể chứa một giá trị dựa trên trạng thái hiện tại của game. Khi thuật toán xem xét một node mới tiềm năng của giải pháp, nó có thể là khả thi nếu giái trị của node đó nằm trong vùng an toàn beta\u0026lt;node\u0026lt;alpha. Đó là cách làm việc của cắt tỉa.\nThuật toán Negamax\nThuật toán Negamax là một biến thể của giải thuật Minimax, nó thường được dùng trong thực tế. Một game 2 người chơi thường là một trò có tổng bằng không, nghĩa là lợi ích của người này là thiệt hại của người kia và ngược lại. Negamax sử dụng điều này và mở rộng một cách chuyên sâu để đưa ra một chiến lược tăng cô hội chiến thắng game.\nVề mặt game, giá trị của một vị trí nhất định cho người chơi thứ 1 là sự phủ định (negation) của người chơi thứ 2. Mỗi người chơi tìm kiếm bước di chuyển sẽ làm đối thủ mất nhiều điểm nhất. Giá trị cuối cùng từ những bước đi phải làm sao cho đối thủ có giá trị nhỏ nhất. Đây là các nó có tính ưu việt hơn thuật toán Minimax về sự đơn giản. Minimax yêu cầu người chơi đầu tiên chọn một bước đi có giá trị lớn nhất(maximum), và người chơi thứ hai phải chọn bước đi với giá trị nhỏ nhất (minimum). Thuật toán cắt tỉa Alpha-Beta cũng sử dụng giải pháp này.\nXây dựng một con bot để chơi game Last Coin Stand\nĐây là một game bắt đầu với 1 đống coin và mỗi người chơi sẽ lấy một số coin từ đống này. Có giá trị giới hạn thấp nhất và cao nhất số lượn coin mà mỗi người lấy từ đống coin. Người lấy những đồng coin cuối cùng trong đống coin đó là người thua. Đây là một biến thể của game Game of Bones trong thư viện easyAI. Để cài thư viện easyAI các bạn xem lại bài trước về cách install thư viện cho Python với địa chỉ github của easyAI là : https://github.com/Zulko/easyAI\nTạo file Python sau khi đã install easyAI\nfrom easyAI import TwoPlayersGame,id_solve,Human_Player,AI_Playerfrom easyAI.AI import TT#Tạo một class ddeer quản lý các phép toán trong game. Chúng sẽ thừa kế từ class TwoPlayerGame trong thư viện eassyAI. Chúng có 2 tham số được định nghĩa# Tham số thứ 1 là player chúng ta sẽ nói về giá trị của object player sauclass LastCoinStand(TwoPlayersGame):def __init__(self,players):#Tạo tham số player. đây là tham số bắt buộcself.players=players# Để định nghĩa ai là người bắt đầu trò chơi thì số người chơi bắt đầu từ 1. nên người bắt đầu trò chơi sẽ là 1self.nplayer=1# tạo số lượng coin để chơi. Bạn có thể chọn tùy ý ở đây tôi chọn 27self.num_coin=27# Tạo số coin lớn nhất có thể lấy đi trong mỗi bước đi. có thể chọn tùy ý và tôi chọn là 4self.max_coin=13# tạo số nước đi có thể. trong trường hợp này người chơi có thể lấy đi 1,2,3,4 coin trong mỗi nước đidef possible_moves(self):return [str(x) for x in range(1,self.max_coin+1)]# Tạo một hàm để loại bỏ số coin đã được lấy và tính số lượng coin còn lại trong đống coindef make_move(self,move):self.num_coin-=int(move)# Kiểm tra nếu có người nào đó thắng game bằng cách kiểm tra số lượng coin còn lạidef win(self):return self.num_coin\u0026lt;=0# Dừng game nếu có ai đã thắngdef is_over(self):return self.win()def scoring(self):return 100 if self.win() else 0# Tạo hàm để xem trạng thái hiện tại của đống coin:def show(self):print('Số lượng coin còn lại là: ',self.num_coin)#Tạo hàm main và khởi tạo bảng chuyển vị TT (transposition table). TT được sử dụng trong game để lưu trữ vị trí và bước đi để tăng tốc cho thuật toánif __name__==\"__main__\":tt=TT()#Tạo hàm ttentry để lấy số lượng coin. Đây là một hàm tùy chọn được sử dụng để tạo chuỗi diễn tả tình trạng gameLastCoinStand.ttentry=lambda self:self.num_coin# Giải quyết vấn đề của game này sử dụng AI. hàm id_solve được sử dụng để giải quyết game đã cho bằng cách lặp sâu (iterative deepening). Về cơ bản thì nó xác định ai là người có thể thắng game sử dụng tất cả các trường hợp# Nó tìm kiếm các câu trả lời giống như là: player 1 có thể thắng bằng cách chơi hoàn hảo không ? Máy tính sẽ luôn thua trước đối thủ ?# Hàm id_solver khám phá tất cả những lựa chọn khác nhau trong game sử dụng thuật toán Negamax vài lần. Nó luôn luôn bắt đầu tại điểm khởi tạo game và đào sâu liên tục. Nó sẽ làm điều đó cho tới khi điểm số của một người thắng hoặc thua# Tham số thứ 2 là một list độ sâu mà nó sẽ đào. Trong trường hợp này tôi chọn giá trị từ 2-\u0026gt;20result,depth,move=id_solve(LastCoinStand,range(2,20),win_score=100,scoring=None,tt=tt)#print(result,depth,move)# Bắt đầu gamegame=LastCoinStand([AI_Player(tt),Human_Player()])game.play()\n \u0026nbsp;\nTrong trò chơi này người đi trước luôn thắng nên bạn có thay đổi tham số num_coin và max_coin thế nào thì người lấy đồng xu cuối cùng vẫn là bạn:\nd:2, a:0, m:1\nd:3, a:0, m:1\nd:4, a:100, m:12\nSố lượng coin còn lại là: 27\n\u0026nbsp;\nMove #1: player 1 plays 12 :\nSố lượng coin còn lại là: 15\n\u0026nbsp;\nPlayer 2 what do you play ? 1\n\u0026nbsp;\nMove #2: player 2 plays 1 :\nSố lượng coin còn lại là: 14\n\u0026nbsp;\nMove #3: player 1 plays 13 :\nSố lượng coin còn lại là: 1\n\u0026nbsp;\nPlayer 2 what do you play ? 1\n\u0026nbsp;\nMove #4: player 2 plays 1 :\nSố lượng coin còn lại là: 0\n\u0026nbsp;\nProcess finished with exit code 0\nĐây là game interactive trong terminal nên bạn phải nhập số lượng coin mình muốn lấy sau mỗi lần chơi.\nXây dựng bot để chơi Tic-Tac-Toe (cờ caro)\nTic-Tac-Toe hay chơi cờ caro là một game nổi tiếng từ thới naponeon còn chưa đẻ. Giờ thì chúng ta thử xây dựng một con bot chơi Tic-Tac-Toe dựa trên thư viện easyAI.\nfrom easyAI import TwoPlayersGame,AI_Player,Negamax,SSSfrom easyAI.Player import Human_Player# Tạo class chứa các method thừa kế class TwoPlayerGame và chọn người bắt đầu.class GameController(TwoPlayersGame):def __init__(self,players):self.players=playersself.nplayer=1# Chúng ta sử dụng một bảng game 3x3 từ một hàng 9self.board=[0]*9# Tạo hàm để tính toán tất cả các bước đi có thể:def possible_moves(self):return [a+1 for a,b in enumerate(self.board) if b==0]# Tạo bảng để update lại bảng sau mỗi bước đidef make_move(self,move):self.board[int(move)-1]=self.nplayer# Tạo hàm để xem nếu người nào thua. Chúng ta sẽ kiểm tra xem ai có 3 hàng trướcdef loss_condition(self):possible_combinations=[[1,2,3], [4,5,6], [7,8,9],[1,4,7], [2,5,8], [3,6,9],[1,5,9], [3,5,7]]return any([all([(self.board[i - 1] == self.nopponent) for i in combination]) for combination in possible_combinations])# Kiểm tra xem game kết thúc chưa sử dụng hàm loss_conditiondef is_over(self):return (self.possible_moves()==[]) or self.loss_condition()#Tạo hàm để hiển thị quá trình xử lýdef show(self):print(self.board)print('\\n' + '\\n'.join([' '.join([['. ', 'O', 'X'][self.board[3 * j + i]] for i in range(3)]) for j in range(3)]))#Tính điểm sử dụng hàm loss_conditiondef scoring(self):return -100 if self.loss_condition() else 0# Bắt đầu với hàm main và sử dụng thuật toán để giải quyết vấn đề.if __name__==\"__main__\":# Thuật toán sử dụng ở đây là Negamax. Chúng ta có thể chỉ định số bước mà thuật toán có thể nghĩ ở đây tôi sử dụng 5algorithm=Negamax(5)# hoặc thêm thuật toán nữa để cho 2 con AI đối đầu với nhau xem nếu thông minh hơn thì có chiến thắng ?# SSS là một thuật toán tìm kiếm không gian trạng thái trên cây với tất cả những nhánh đầu tiên tốt nhất.algorithm2=SSS(5)# bắt đầu gamegame=GameController([AI_Player(algorithm2),AI_Player(algorithm)])game.play()if game.loss_condition():print(\"Người thắng: \",game.nopponent)else:print(\"Kết quả: Hòa\")\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n. . . \n. . . \n. . . \n\u0026nbsp;\nPlayer 1 what do you play ? 5\nMove #1: player 1 plays 5 :\n. . . \n. O . \n. . . \n\u0026nbsp;\nMove #2: player 2 plays 1 :\n\u0026nbsp;\nX . . \n. O . \n. . . \n\u0026nbsp;\nPlayer 1 what do you play ? 3\n\u0026nbsp;\nMove #3: player 1 plays 3 :\n\u0026nbsp;\nX . O\n. O . \n. . . \n\u0026nbsp;\nMove #4: player 2 plays 7 :\n\u0026nbsp;\nX . O\n. O . \nX . . \n\u0026nbsp;\nPlayer 1 what do you play ? 4\n\u0026nbsp;\nMove #5: player 1 plays 4 :\n\u0026nbsp;\nX . O\nO O . X . . \n\u0026nbsp;\nMove #6: player 2 plays 6 :\n\u0026nbsp;\nX . O\nO O X\nX . . \n\u0026nbsp;\nPlayer 1 what do you play ? 2\n\u0026nbsp;\nMove #7: player 1 plays 2 :\n\u0026nbsp;\nX O O\nO O X\nX . . \n\u0026nbsp;\nMove #8: player 2 plays 8 :\n\u0026nbsp;\nX O O\nO O X\nX X . \u0026nbsp;\nPlayer 1 what do you play ? 9\n\u0026nbsp;\nMove #9: player 1 plays 9 :\n\u0026nbsp;\nX O O\nO O X\nX X O\nXây dựng 2 bot chơi game Connect Four\nConnect Four là game 2 người chơi được bán dưới thương hiệu Milton Bradley. về code tương tự như bài trên nên sẽ không giải thích lại nhiều. Luật chơi là thả từng đĩa chồng lên nhau ai có 4 kết nối theo hàng dọc ngang hoặc chéo trước thì thắng kiểu caro. Luật chơi ở đây có thể tìm hiểu thêm trên youtube hoặc wiki với từ khóa connect Four\nimport numpy as npfrom easyAI import TwoPlayersGame, AI_Player, \\Negamax, SSSclass GameController(TwoPlayersGame):def __init__(self, players, board = None):# Tạo playersself.players = players# Tạo boardself.board = board if (board != None) else (np.array([[0 for i in range(7)] for j in range(6)]))# Thằng nào đi trước tính từ 1 không phải từ 0 như arrayself.nplayer = 1# Tạo bảng vị tríself.pos_dir = np.array([[[i, 0], [0, 1]] for i in range(6)] +[[[0, i], [1, 0]] for i in range(7)] +[[[i, 0], [1, 1]] for i in range(1, 3)] +[[[0, i], [1, 1]] for i in range(4)] +[[[i, 6], [1, -1]] for i in range(1, 3)] +[[[0, i], [1, -1]] for i in range(3, 7)])# Những nước đi có thểdef possible_moves(self):return [i for i in range(7) if (self.board[:, i].min() == 0)]# tạo nước đidef make_move(self, column):line = np.argmin(self.board[:, column] != 0)self.board[line, column] = self.nplayer# Biểu diễn trạng thái hiện tạidef show(self):print('\\n' + '\\n'.join(['0 1 2 3 4 5 6', 13 * '-'] +[' '.join([['.', 'O', 'X'][self.board[5 - j][i]]for i in range(7)]) for j in range(6)]))# điều kiện thắng thuadef loss_condition(self):for pos, direction in self.pos_dir:streak = 0while (0 \u0026lt;= pos[0] \u0026lt;= 5) and (0 \u0026lt;= pos[1] \u0026lt;= 6):if self.board[pos[0], pos[1]] == self.nopponent:streak += 1if streak == 4:return Trueelse:streak = 0pos = pos + directionreturn False# Kiểm tra game hết chưadef is_over(self):return (self.board.min() \u0026gt; 0) or self.loss_condition()# Tính điểmdef scoring(self):return -100 if self.loss_condition() else 0if __name__ == '__main__':# Tạo thuật toán Negamax cho thằng đầu tiên để tham số depth là 5 cho nó ngu ngu tíalgo_neg = Negamax(5)# Tạo thuật toán SSS cho thằng thứ 2 nếu để depth càng cao thì thường kết quả sẽ là hòa và nó tính toán khá lâu.algo_sss = SSS(5)# Start the gamegame = GameController([AI_Player(algo_neg), AI_Player(algo_sss)])game.play()# In kết quảif game.loss_condition():print('\\nNgười thắng: ', game.nopponent)else:print(\"\\nKết quả Hòa\")\n \u0026nbsp;\n0 1 2 3 4 5 6\n-------------\n. . . . . . .\n. . . . . . .\n. . . . . . .\n. . . . . . .\n. . . . . . .\n. . . . . . .\nMove #2: player 2 plays 0 :\n\u0026nbsp;\n0 1 2 3 4 5 6\n-------------\n. . . . . . .\n. . . . . . .\n. . . . . . .\n. . . . . . .\nX . . . . . .\nO . . . . . .\nMove #36: player 2 plays 6 :\n\u0026nbsp;\n0 1 2 3 4 5 6\n-------------\nX X O O X . .\nO O X X O . .\nX X O O X X .\nO O X X O O .\nX X O X X X X\nO O O X O O O\n\u0026nbsp;\nNgười thắng: 2\n\u0026nbsp;\nXây dựng 2 con bots chơi game Hexapawn\nHexapawn là một game 2 người chơi trên một bàn cờ có kích cỡ là NxM. Chúng ta có mỗi con tốt (pawns, hoặc còn gọi là con chốt) với số lượng là N ở mỗi bên của bàn cờ. Và chiến thắng khi khi tiến hết được 1 tốt sang phía đối thủ hoặc đối thủ không thể di chuyển. Luật chơi ở mỗi bước đi thì cũng giống như nước đi của con tốt ở bàn cờ tướng, đi thẳng \u0026ndash; ăn chéo.\nfrom easyAI import TwoPlayersGame,AI_Player,Human_Player,Negamax# tạo class để control game. Bắt đầu bằng cách định nghĩa số lượng tốt ở mỗi bên và độ dài rộng của bàn cờ. Tạo một list tuples chứa vị tríclass GameController(TwoPlayersGame):def __init__(self,players,size=(4,4)):self.size=sizenum_pawns,len_board=sizep = [[(i, j) for j in range(len_board)] for i in [0, num_pawns - 1]]print(p,num_pawns,len_board)#Tạo hướng đi, đích đến và gắn những con chốt cho mỗi player\"for i, d, goal, pawn in [(0, 1, num_pawns - 1, p[0]), (1, -1, 0, p[1])]:print(i)print('d=',d)print(goal)print(pawn)players[i].direction=dplayers[i].goal_line=goalplayers[i].pawns=pawnself.players=playersself.nplayer=1# Tạo bảng chữ cái để dễ xác định vị trí quân cờ (giống bàn cờ vua A1-A2...self.alphabets='ABCDEFGHIJ'# tạo 2 hàm lambda để chuyển đổi string \u0026lt;-\u0026gt; tuplesself.to_tuples = lambda s: (self.alphabets.index(s[0]), int(s[1:]) - 1)self.to_string = lambda move: ' '.join([self.alphabets[move[i][0]] + str(move[i][1] + 1) for i in (0, 1)])def possible_moves(self):# Tạo hàm move để tính những bước đi có thể:moves=[]# Vị trí quân tốt của đối thủopponent_pawns=self.opponent.pawnsd=self.player.direction# Khi không nhìn thấy quân tốt của đối thủ ở một vị trí thì có nghĩa đó là nơi có thể đi:for i,j in self.player.pawns:if(i+d,j) not in opponent_pawns:moves.append(((i,j),(i+d,j)))if(i+d,j+1) in opponent_pawns:moves.append(((i,j),(i+d,j+1)))if(i+d,j-1) in opponent_pawns:moves.append(((i,j),(i+d,j-1)))return list(map(self.to_string,[(i,j) for i,j in moves]))def make_move(self,move):move=list(map(self.to_tuples,move.split(' ')))ind=self.player.pawns.index(move[0])self.player.pawns[ind]=move[1]# Loại bỏ tốt của đối thủ khi thấy nó trên đường đi:if move[1] in self.opponent.pawns:self.opponent.pawns.remove(move[1])def loss_condition(self):return (any([i==self.opponent.goal_line for i,j in self.opponent.pawns])) or(self.possible_moves()==[])def is_over(self):return self.loss_condition()def show(self):f=lambda x:'x' if x in self.players[0].pawns else('o' if x in self.players[1].pawns else '.')print('\\n'.join([\" \".join([f((i,j))for j in range(self.size[1])])for i in range(self.size[0])]))# Hàm khởi tạoif __name__==\"__main__\":scoring=lambda game:-100 if game.loss_condition() else 0algorithm = Negamax(12,scoring)game=GameController([Human_Player(),AI_Player(algorithm)])game.play()symbol=\"XO\"print(\"Kết quả: \",symbol[game.nopponent-1], \" Thắng sau\",game.nmove,\"bước\")\n \u0026nbsp;\n# Có thể thay Human_Player thành AI_Player với thuật toán bạn tùy chọn như SSS hoặc Negamax\nMấy game kiểu này thường người đi trước sẽ thắng\n[[(0, 0), (0, 1), (0, 2), (0, 3)], [(3, 0), (3, 1), (3, 2), (3, 3)]] 4 4\n0\nd= 1\n3\n[(0, 0), (0, 1), (0, 2), (0, 3)]\n1\nd= -1\n0\n[(3, 0), (3, 1), (3, 2), (3, 3)]\nx x x x\n. . . .\n. . . .\no o o o\n\u0026nbsp;\nPlayer 1 what do you play ? A1 B1\n\u0026nbsp;\nMove #1: player 1 plays A1 B1 :\n. x x x\nx . . .\n. . . .\no o o o\n\u0026nbsp;\nMove #2: player 2 plays D1 C1 :\n. x x x\nx . . .\no . . .\n. o o o\n\u0026nbsp;\nPlayer 1 what do you play ? A2 B2\n\u0026nbsp;\nMove #3: player 1 plays A2 B2 :\n. . x x\nx x . .\no . . .\n. o o o\n\u0026nbsp;\nMove #4: player 2 plays D2 C2 :\n. . x x\nx x . .\no o . .\n. . o o\n\u0026nbsp;\nPlayer 1 what do you play ? B2 C1\n\u0026nbsp;\nMove #5: player 1 plays B2 C1 :\n. . x x\nx . . .\nx o . .\n. . o o\n\u0026nbsp;\nMove #6: player 2 plays C2 B1 :\n. . x x\no . . .\nx . . .\n. . o o\n\u0026nbsp;\nPlayer 1 what do you play ? C1 D1\n\u0026nbsp;\nMove #7: player 1 plays C1 D1 :\n. . x x\no . . .\n. . . .\nx . o o\nKết quả: X Thắng sau 8 bước\nTổng kết:\nTrong chương này chúng ta đã thảo luận về cách xây dựng một game với AI, và cách sử dụng các thuật toán tìm kiếm để áp dụng vào các chiến lược của game để chiến thắng. Về các thuật toán như Minimax, Negamax, cắt tỉa Alpha-Beta…\nỞ chương tiếp theo chúng ta sẽ thảo luận về quá trình xử lý ngôn ngữ tự nhiên và sử dụng nó để phân tích dữ liệu text bằng cách mô hình và phân loại nó.\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n "
},
{
	"uri": "https://bamboofx.github.io/ai-with-python/chapter10/",
	"title": "C10: Natural Language Processing",
	"tags": [],
	"description": "",
	"content": "PythonAI Chapter1010\nXử lý ngôn ngữ tự nhiên\nNatural Language Processing\nXử lý ngôn ngữ tự nhiên (natural language processing \u0026ndash;NLP) là một một phương pháp kỹ thuật xử lý các ngôn ngữ tự nhiên bằng máy tính. Ở đây có vấn đề cần làm rõ là Natural Language \u0026ndash; ngôn ngữ giao tiếp giữa người với người, và ngôn ngữ máy móc ( program language, machine language). NLP có 2 điều cơ bản cần nghiên cứu và phát triển là xử lý từ ngữ bằng máy và làm cho máy hiểu được những từ ngữ này. Chúng ta sẽ thảo luận về vài khái niệm như tách chuỗi thành từ, cụm từ, từ khóa (tokenization), (tiền tố, hậu tố) steaming, phân tích hình thái (lemmatization) để xử lý đoạn văn bản. Chúng ta cũng sẽ thảo luận về việc xây dựng một (Bag of Words model) mô hình túi đựng từ và dùng nó để phân loại văn bản. Chúng ta sẽ thao luận về chủ đề mô hình hóa và phát triện một hệ thống nhận diện chủ đề được đưa ra trong một văn bản.\nCác chủ đề chính trong chương này:\nCài đặt các package liên quan đến xử lý văn bản Tokenization - phân tách chuỗi dữ liệu Chuyển đổi từ thành dạng cơ bản sử dụng stemming ( loại bỏ tiền tố hậu tố) Chuyển đổi từ thành dạng cơ bản sử dụng lemmatization ( phân tích hình thái câu) Chia dữ liệu text thành mảnh nhỏ Trích xuất văn tần số xuất hiện sử dụng mô hình Bag of Words Xây dựng một danh sách dự đoán thể loại văn bản Xây dựng bộ nhận dạng giới tính Xây dựng một bộ phân tích tâm lý (sentiment analyzer) Mô hình chủ đề sử dụng Latent Dirichlet Allocation  Giới thiệu và cài đặt các thư viện (packages)\nNLP là một phần quan trọng của những hệ thống hiện đại. Nó được sử dụng rộng rãi trong các máy tìm kiếm, giao diện đàm thoại, bộ xử lý văn bản, và …. Máy có thể quản lý cấu trúc khá tốt. Nhưng khi nó làm việc cùng với một văn bản ngẫu nhiên thì nó sẽ mất thời gian để xử lý. Mục đích của NLP là phát triển những thuật toán có thể giúp máy tính hiểu được những văn bản tự do và giúp chúng hiểu được ngôn ngữ.\nMột trong những thách thức ở đây là quá trình xử lý các văn bản ngôn ngữ có quá nhiều biến thể. Bối cảnh đóng vai trò rất quan trọng để hiểu được một câu cụ thể. Con người có thể hiểu được điều đó một cách tự động bởi vì chúng ta đã được luyện tập, học hỏi trong rất nhiều năm. Chúng ta lập tức sử dụng những hiểu biết của chúng ta đã học hoặc biết trong quá khứ để hiểu được bối cảnh và biết người khác đang nói về cái gì.\nĐể giải quyết vấn đề này, các nhà nghiên cứu về NLP đã bắt đầu phát triển các ứng dụng khác nhau bằng cách sử dụng phương pháp ML (machine learning). Để xây dựng những ứng dụng như thế, chúng ta cần thu thập một lượng lớn các tập tài liệu về văn bản và dạy thuật toán thực hiện các nhiệm vụ khác nhau như: phân loại văn bản (categories text), phân tích tâm lý ( analyzer sentiments), hoặc phân loại chủ đề ( modeling topics). Những thuật toán đã được dạy dỗ (trained) có thể phát hiện các mẫu trong một tập tin input và nhận được những thông tin chi tiết từ nó.\nTrong chương này chúng ta sẽ thảo luận một vài khái niệm cơ bản được sử dụng để phân tích văn bản và xây dựng ứng dụng NLP. Nó sẽ giúp chúng ta hiểu được cách phân tách những thông tin chính từ một tập tin dữ liệu có sẵn. Chúng ta sẽ sử dụng một thư viện có sẵn tên là Natural Language Toolkit(NLTk) để xây dựng ứng dụng. Cách cài đặt thư viện ngoài thì đã nói ở những phần trước. NLTk cần phải được download dữ liệu. sau khi cài bạn cần dùng Terminal để download:\n$ python3\n\u0026gt;\u0026gt;\u0026gt;import nltk\n\u0026gt;\u0026gt;\u0026gt;nltk.download()\nSau đó bảng NLTK Downloader sẽ hiện ra Chọn AllPackage, chọn đường dẫn tới nơi cần download Ctrl+A để chọn hết -sau đó bấm nút Download.\nĐể đường dẫn Download Directory là default sẽ vào RoamingData còn nếu bạn muốn download vào thư mục xác định thì phải chỉnh đường dẫn cho nltk biết source data nằm ở đâu như sau:\nimport nltknltk.data.path.append(\"D:\\\\PycharmProjects\\\\AILearn\\\\NLTK\")\n Hoặc chỉnh path cho Environtment nếu ban dùng windows:\u0026nbsp;NLTK_DATA = Path to Data\nNgoài ra chúng ta cũng cần dùng thêm một vài thư viện nữa\ngensim: Mô hình về ngữ nghĩa mạnh và hữu ích được dùng cho nhiều ứng dụng pattern: là một thư viện giúp cho gensim làm việc hiệu quả hơn.  http://www.nltk.org\nhttps://radimrehurek.com/gensim/\nPhân tách chuỗi dữ liệu văn bản(Tokenizing)\nKhi chúng ta làm việc với văn bản chúng ta cần phải cắt chúng thành những đoạn ngắn hơn để phân tích. Đây là lúc mà chúng ta cần tìm hiểu về Tokenizing. Nó là quá trính sử lý phân chia văn bản được nhập vào thành một bộ những mảnh nhỏ như là từ, hoặc câu. Những mảnh nhỏ này được gọi là tokens. Dựa trên những gì chúng ta muốn làm chúng ta có thể định nghĩa những hàm chia văn bản thành bao nhiêu tokens. Giờ ta dùng thư viện NLTK đã cài đặt để phân tách chuỗi dữ liệu.\nimport nltknltk.data.path.append(\"D:\\\\PycharmProjects\\\\AILearn\\\\NLTK\")from nltk.tokenize import sent_tokenize,word_tokenize,WordPunctTokenizer# Tạo một đoạn văn bản input để sử dụng tokenizationinput_text=\"Hôm nay trời đẹp, 25* C. Chúng ta nên đi ra ngoài chơi. Hôm qua trời mưa tao ở nhà ngủ. Còn mày có đi chơi không ?\"# Chia đoạn trên thành các câu tokensprint(\"\\nChuyển đoạn văn thành câu:\")print(sent_tokenize(input_text))# Chia đoạn trên thành các từprint(\"\\nChuyển đoạn trên thành các từ\")print(word_tokenize(input_text))# Chia đoạn trên thành các từ sử dụng hàm Word Punct Tokenprint(\"Token by WordPunctToken\")print(WordPunctTokenizer().tokenize(input_text))\n Kết quả:\nChuyển đoạn văn thành câu:\n['Hôm nay trời đẹp, 25* C. Chúng ta nên đi ra ngoài chơi.', 'Hôm qua trời mưa tao ở nhà ngủ.', 'Còn mày có đi chơi không ?']\n\u0026nbsp;\nChuyển đoạn trên thành các từ\n['Hôm', 'nay', 'trời', 'đẹp', ',', '25*', 'C.', 'Chúng', 'ta', 'nên', 'đi', 'ra', 'ngoài', 'chơi', '.', 'Hôm', 'qua', 'trời', 'mưa', 'tao', 'ở', 'nhà', 'ngủ', '.', 'Còn', 'mày', 'có', 'đi', 'chơi', 'không', '?']\nToken by WordPunctToken\n['Hôm', 'nay', 'trời', 'đẹp', ',', '25', '*', 'C', '.', 'Chúng', 'ta', 'nên', 'đi', 'ra', 'ngoài', 'chơi', '.', 'Hôm', 'qua', 'trời', 'mưa', 'tao', 'ở', 'nhà', 'ngủ', '.', 'Còn', 'mày', 'có', 'đi', 'chơi', 'không', '?']\n\u0026nbsp;\n\u0026nbsp;\nChuyển đồi Từ thành dạng cơ bản của chúng sử dụng stemming\nLàm việc với văn bản chúng ta sẽ gặp rất nhiều biến thể bao gồm trong đó. Chúng ta phải xem xét các dạng khác nhau của từ để làm cho máy tính hiểu đó là những từ khác nhau đó có cùng dạng cơ bản. Ví dụ từ sing trong tiếng anh có rất nhiều biến thể giống như sang, singer, singing, và những từ kiểu như thế rất nhiều. Chúng ta thấy đó là một tập hợp các từ có ý nghĩa tương tượng. Con người có thể dễ dàng nhận ra điều đó nhờ bối cảnh.\nKhi chúng ta phân tích văn bản, sẽ hữu dụng hơn nếu chúng ta tách nó thành dạng cơ bản. Nó sẽ giúp chúng ta phân tách số liệu hữu ích để phân tích văn bản input. Stemming là một cách để làm điều đó. Mục đích của một bộ Chuyển đổi Stemmer là giảm số lượng từ nhờ biến đổi những định dạng khác nhau của chúng thành dạng cơ bản. Nó cơ bản là quá trình xử lý heuristic nó sẽ bỏ các giá trị tiền tố (un-happy) hoặc hậu tố (happi-ness) của từ để biến nó thành dạng cơ bản ( điều này méo có giá trị trong tiếng Việt). import nltknltk.data.path.append(\"D:\\\\PycharmProjects\\\\AILearn\\\\NLTK\")from nltk.stem.porter import PorterStemmerfrom nltk.stem.lancaster import LancasterStemmerfrom nltk.stem.snowball import SnowballStemmerinput_words=['writing', 'calves', 'be', 'branded', 'horse', 'randomize', 'possibly', 'provision', 'hospital', 'kept', 'scratchy', 'code']porter=PorterStemmer()lancaster=LancasterStemmer()snowball=SnowballStemmer('english')#Tạo list tên stemmer để hiển thị ra màn hìnhstemmer_names=['Porter','Lancaster','Snowball']formatted_text = '{:\u0026gt;16}' * (len(stemmer_names) + 1)print('\\n', formatted_text.format('INPUT WORD', *stemmer_names), '\\n', '='*68)# Tạo vòng lặp để stem các từ sử dụng 3 stemmer:for word in input_words:output = [word, porter.stem(word), lancaster.stem(word), snowball.stem(word)]print(formatted_text.format(*output))\n Kết quả:\nINPUT WORD Porter Lancaster Snowball \n====================================================================\nwriting write writ write\ncalves calv calv calv\nbe be be be\nbranded brand brand brand\nhorse hors hors hors\nrandomize random random random\npossibly possibl poss possibl\nprovision provis provid provis\nhospital hospit hospit hospit\nkept kept kept kept\nscratchy scratchi scratchy scratchi\ncode code cod code\nHãy nói một chút về 3 thuật toán stemming đã dùng ở đây. Về cơ bản thì nó đều cố gắng để steam từ thành dạng cơ bản. Các khác giữa 3 thuật toán này là mức độ quản lý từ được dùng để chuyển đổi thành dạng cơ bản. Porter là cái quản lý ít nghiêm ngặt nhất ngược lại là Landcaster. Nếu bạn nhìn vào kết quả output bạn sẽ thấy điều khác nhau khi xử lý cùng một từ. Vd nhìn vào Input_word là possibibly Porter ra kết quả là possibl và Landcaster là poss. Kết quả của Landcasster có vấn đề một chút vì nó giảm lượng từ quá nhiều. Nếu tính về thời gian sử lý thì Landcaster nhanh hơn và lựa chọn tối ưu cho vấn đề này là dùng Snowball. Nó được lợi cả về thời gian sử lý và mức độ ngắt từ.\nChuyển đổi từ về dạng cơ bản của nó sử dụng lemmatization\nLemmatization là một cách khác để chuyển đổi từ về dạng cơ bản. Trong phần trước chúng ta thấy từ cơ bản được chuyển thể từ steamer có vẻ không được ổn cho lắm. Ví dụ nó chuyển từ calves- từ này có nhiều nghĩa như bò con,da bò , khờ khạo….xx.t lại chuyển thành calv gần như ko có nghĩa, cái này không đúng với thực tế. Lemmatization có thể giải quyết được vấn đề này:\nimport nltknltk.data.path.append(\"D:\\\\PycharmProjects\\\\AILearn\\\\NLTK\")from nltk.stem import WordNetLemmatizerinput_words=['writing', 'calves', 'be', 'branded', 'horse', 'randomize', 'possibly', 'provision', 'hospital', 'kept', 'scratchy', 'code']lemmatizer=WordNetLemmatizer()lemmatizer_names = ['NOUN LEMMATIZER', 'VERB LEMMATIZER']formatted_text = '{:\u0026gt;24}' * (len(lemmatizer_names) + 1)print('\\n', formatted_text.format('INPUT WORD', *lemmatizer_names), '\\n', '='*75)for word in input_words:output = [word, lemmatizer.lemmatize(word, pos='n'),lemmatizer.lemmatize(word, pos='v')]print(formatted_text.format(*output))\nKết quả\nINPUT WORD NOUN LEMMATIZER VERB LEMMATIZER \n===================================================================\nwriting writing write\ncalves calf calve\nbe be be\nbranded branded brand\nhorse horse horse\nrandomize randomize randomize\npossibly possibly possibly\nprovision provision provision\nhospital hospital hospital\nkept kept keep\nscratchy scratchy scratchy\ncode code code\nNhìn vào kết quả của 2 phép chuyển đổi (steamer và lemmatizer) bạn đã hiểu chúng khác nhau thế nào chưa. Chưa hiểu thì đọc lại nhé.\nChia dữ liệu văn bản thành các đoạn nhỏ\nVăn bản dữ liệu thường cần phải được chia thành các mảnh nhỏ để dễ phân tích. Quá trình xử lý này được gọi là chunking. Nó thường được dùng để phân tích văn bản. Các điều kiện được sử dụng để phân chia văng bản thành các đoạn nhỏ dựa trên những vấn đề chúng ta đang có trong tay. Trong quá trình phân chia (chunking), chúng ta không cần phải tuân thủ ràng buộc nào là kết quả đầu ra phải là những đoạn có ý nghĩa.\nKhi chúng ta gặp phải những tài liệu văn bản lớn, điều này sẽ rất quan trọng để chia những văn bản thành những đoạn nhỏ thông tin chính xác.Trong phần này, chúng ta sẽ xem cách nào để chia những đoạn văn bản thành từng mảnh.\n# Tạo hàm chunk để chia dữ liệu input thành những đoạn nhỏ. Tham số đầu tiên là input text và tham số thứ 2 là số từ trong mỗi đoạndef chunker(input_data,N):input_words=input_data.split(' ')output=[]# Lặp tất cả văn bản để chia chúng vào từng đoạncur_chunk=[]count=0for word in input_words:cur_chunk.append(word)count+=1if count==N:output.append(' '.join(cur_chunk))count,cur_chunk=0,[]output.append(' '.join(cur_chunk))return outputdef inputTxt():input_file = open(\"data/chap10/doaremon.txt\", 'r', encoding='utf-8')# Loại bỏ các dònginput_string = input_file.read().splitlines()# Join array lại thành stringinput_string=\" \".join(input_string)return input_stringif __name__==\"__main__\":chunk_size = 100chunks=chunker(inputTxt(),chunk_size)print('\\nSố mảnh trong đoạn văn =',len(chunks),'\\n')for i,chunk in enumerate(chunks):print(\"Đoạn\",i+1,'==\u0026gt;',chunk[:50])\n Kết quả:\n\u0026nbsp;\nSố mảnh trong đoạn văn = 10 \u0026nbsp;\nĐoạn 1 ==\u0026gt; Mới đọc lại Doraemon và nhận ra một số thứ.Cả 5 đứ\nĐoạn 2 ==\u0026gt; kì lâu đời, toàn trai phố, gái phố. Đám này khác v\nĐoạn 3 ==\u0026gt; ra cái hỏng hết, đắt ở đất chứ nhà không ở được, t\nĐoạn 4 ==\u0026gt; không nghèo. Nhà mặt tiền đất trung tâm phố cổ Tok\nĐoạn 5 ==\u0026gt; tược đàng hoàng. Nhà còn mua hẳn piano, violin cho\nĐoạn 6 ==\u0026gt; kề ở khắp nơi, thường xuyên cho con đi du lịch, ch\nĐoạn 7 ==\u0026gt; đồ họa, công trình, lắp ráp robot, cơ khí các kiểu\nĐoạn 8 ==\u0026gt; anh thế phiệt, con quan chức, chính khách, không c\nĐoạn 9 ==\u0026gt; cũng biết, giỏi toàn năng, chuẩn con nhà người ta Đoạn 10 ==\u0026gt; bù trừ thì có thể Dekhi là bê đê, bóng kín không t\nTrích xuất tần số thuất hiện sử dụng mô hình Bag of Words\nMột trong những mục đích chính của phân tích văn bản là chuyển đổi văn bản thành số (số hóa dữ liệu) và chúng ta có thể sử dụng ML để làm việc này. Hãy xem xét một tài liệu văn bản chứa cả triệu từ . Để giải phân tích văn bản này, chúng ta cần phải phân tách văn bản và chuyển đổi nó thành dạng số hóa. Thuật toán ML cần ở dạng số để làm việc để chúng có thể phân tích dữ liệu và trích xuất thông tin hữu ích. Đây là lúc chúng ta lôi mô hình Bag of Words ra để sử dụng. Mô hình trich xuất này trích xuất một từ vựng từ tất cả các từ có trong tài liệu và xây dựng một mô hình sử dụng ma trận thuật ngữ tài liệu. Nó cho phép chúng ta miêu tả mọi tài liệu thành bag of words. (Vietnamese gọi là túi khôn). Chúng ta theo dõi số lượng từ và bỏ qua chi tiết về ngữ pháp và vị trí các từ.\nMa trận thuật ngữ tài liệu: (document-term matrix). Là một bảng cung cấp cho chúng ta số lượng từ khác nhau xảy ra trong tài liệu. Vì vậy một tài liệu văn bản có thể biểu diễn dưới dạng kết hợp số lượng của các từ khác nhau. Chúng ta có thể đặt ngưỡng và chọn những từ có ý nghĩa hơn. Theo một cách nào đó chúng ta đang xây dựng một biểu đồ của tất cả các từ trong tài liệu sẽ được sử dụng như một vector tính năng. Vector tính năng này được sử dụng để phân loại văn bản.\nXét những câu sau:\nCâu 1: Đứa trẻ đang chơi ở trong sân  Câu 2: Con bò đang ăn cỏ ở trong cánh đồng Câu 3: Nhiều đứa trẻ đang chơi ở trong khu thể thao  Nếu bạn xem xét cả 3 câu trên thì bạn sẽ thấy nó gồm 17 từ sau:\nđứa \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; trẻ \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; đang  chơi \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ở \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; trong \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; sân \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; con \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; bò \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ăn\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  cỏ\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; cánh\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; đồng\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; nhiều\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; khu\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; thể\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; thao\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Có 17 từ riêng biệt ở đây và giờ ta sẽ xây dựng lại biểu đồ của mỗi câu dựa trên số lượng từ ở mỗi câu. Mỗi vector tính năng sẽ có 17 cột bởi vì chúng ta có 17 từ riêng biệt tất cả.\nCâu 1: [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0] Câu 2:[0,0,1,0,1,1,0,1,1,1,1,1,1,0,0,0,0] Câu 3:[ 1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1]  Ta đánh dấu các vị trí xuất hiện của các từ và diễn tả lại câu theo dạng vector tính năng. Vì có tất cả 17 từ nên ta sẽ tạo 1 vector 17 cột từ đó xuất hiện ở vị trí bao nhiêu trên bảng xếp hạng trên cùng thì ta sẽ đánh dấu số \"1\" vào đó. Nếu trong câu xuất hiện 1 từ 2 lần thì sẽ đánh dấu số \"2\". Giờ thì ta đã xong công việc \"số hóa\" tài liệu và có thể dùng thuật toán ML để phân tích dữ liệu\nGiờ ta thử xây dựng mô hình \"Túi khôn\" Bag of Words bằng NLTK.\nimport numpy as npfrom sklearn.feature_extraction.text import CountVectorizerfrom chunks_text import chunker,inputTxt# Tạo cỡ đoạn vănchunk_size=200# Chia text thành các đoạn văn:text_chunk=chunker(inputTxt(),chunk_size)chunks=[]for count,chunk in enumerate(text_chunk):d={'index':count,'text':chunk}chunks.append(d)# Ta sử dụng hàm CountVectorizer đề đếm số lượng từ và biến đổi chúng thành ma trận số hóacountvectorizer=CountVectorizer(min_df=5,max_df=20)#print(chunks)document_termatrix=countvectorizer.fit_transform(chunk['text'] for chunk in chunks)vocalbulary=np.array(countvectorizer.get_feature_names())print(\"\\nVolcabulary\\n\",vocalbulary)for i,chunk in enumerate(text_chunk):print(\"Đoạn\",i+1,'==\u0026gt;',chunk[:50])chunk_names = []for i in range(len(text_chunk)):chunk_names.append('Đoạn-' + str(i+1))# Print the document term matrixprint(\"\\nDocument term matrix:\")formatted_text = '{:\u0026gt;12}' * (len(chunk_names) + 1)print('\\n', formatted_text.format('Word', *chunk_names), '\\n')for word, item in zip(vocalbulary, document_termatrix.T):# 'item' is a 'csr_matrix' data structureoutput = [word] + [str(freq) for freq in item.data]print(formatted_text.format(*output))\n Kết quả:\nVolcabulary\n['con' 'có' 'cũng' 'không' 'kiểu' 'làm' 'nhà' 'nobita']\nĐoạn 1 ==\u0026gt; Mới đọc lại Doraemon và nhận ra một số thứ.Cả 5 đứ\nĐoạn 2 ==\u0026gt; ra cái hỏng hết, đắt ở đất chứ nhà không ở được, t\nĐoạn 3 ==\u0026gt; tược đàng hoàng. Nhà còn mua hẳn piano, violin cho\nĐoạn 4 ==\u0026gt; đồ họa, công trình, lắp ráp robot, cơ khí các kiểu\nĐoạn 5 ==\u0026gt; cũng biết, giỏi toàn năng, chuẩn con nhà người ta \u0026nbsp;\nDocument term matrix:\n\u0026nbsp;\nWord Đoạn-1 Đoạn-2 Đoạn-3 Đoạn-4 Đoạn-5 \n\u0026nbsp;\ncon 1 2 3 2 2\ncó 2 4 4 4 5\ncũng 2 1 2 1 2\nkhông 2 5 3 4 6\nkiểu 3 1 2 4 1\nlàm 1 1 1 1 2\nnhà 6 7 6 4 2\nnobita 3 2 1 2 6\nXây dựng một bộ phân loại thể loại văn bản\nMột bộ dự đoán thể loại văn bản được sử dụng để phân loại thể loại văn bản được nhập vào. Nó thường được sử dụng trong phân loại văn bản thành các thể loại tài liệu. Các bộ máy tìm kiếm cũng thường dùng ứng dụng này để xắp xếp kết quả tìm kiếm liên quan. Ví dụ chúng ta muốn dự đoán xem câu được người dùng đưa ra thuộc thể loại thể thao, chính trị, hay khoa học. Để làm điều này chúng ta xây dựng một tập dữ liệu và đào tạo một thuật toán (train an algorithm). Thuật toán này có thể sử dụng để suy luận (inference) trên một dữ liệu không biết.\nĐể xây dựng bộ phân loại này, chúng ta sử dụng một thống kê được gọi là ( TermFrequency-Inverse document Frequency(tf-idf) \u0026ndash;tf:tạm dịch là tần suất của một từ trong văn bản \u0026ndash; idf tần suất nghich của 1 từ trong văn bản ) . Trong một bộ tài liệu, chúng ta cần phải hiểu tầm quan trọng của mỗi từ. Thống kê tf-idf giúp chúng ta hiểu tầm quan trọng của một từ trong một văn bản và trong một tập văn bản. Hãy xem thử phần đầu của thông số này được gọi làTF(TermFrequency): Cơ bản nó là tần số xuất hiện (tần suất) của mỗi từ xuất hiện trong văn bản. Từ những văn bản khác nhau có những số khác nhau, những số này trong biểu đồ sẽ thay đổi. Để cân bằng chúng ta phải đơn giản hóa (normalize) những biểu đò. Vì vậy chúng ta phải chia những bộ đếm cho mỗi từ với tổng số từ có trong tài liệu để lấy được tần suất (term frequency).\nInverse document Frequency:  là số đo lường của từ đó có ý nghĩa thế nào với văn bản. Khi chúng ta tính toán số tần suất , giả sử tất cả các từ đều quan trọng. Nhưng chúng ta không thể để chỉ dựa vào tần suất này ( vd từ: và, nó, cái ) có thể xuất hiện rất nhiều lần. Để cân bằng tuần suất của những từ thông dụng này, chúng ta cần phải giảm mức độ quan trọng của chúng và tăng mức độ quan trọng của những từ hiếm gặp hoặc đặc biệt. Điều này giúp chúng ta nhận dạng được những từ đặc biệt quan trọng đối với văn bản, giúp chúng ta xây dựng được một vector đặc trưng (feature vector).\nĐể tính toán thống kê này chúng ta cần tính tỉ lệ số lượng của tài liệu với số từ đã cho và chia nó với tổng số từ có trong tài liệu. Tỉ lệ này thực chất là một phần của văn bản bao gồm cả các từ đã cho. Tần suất nghịc đảo (idf) sau đó được tính bằng cách lấy giá trị âm của tỉ lệ này \nKhi chúng ta kết hợp 2 chỉ số đo lường TF-idf chúng ta có một công thức để tính vector tính năng cho phân loại thể loại tài liệu. Những từ có giá trị TF-idf cao là những từ xuất hiện nhiều trong tài liệu này và ít xuất hiện trong tài liệu khác (dựa vào các tài liệu đã train), sẽ giúp chúng ta lọc bỏ ra những từ phổ biến và giữ lại những từ có giá trị - đây là những từ khóa cho tài liệu đó.\n\u0026nbsp;\nfrom sklearn.datasets import load_filesfrom sklearn.naive_bayes import MultinomialNBfrom sklearn.feature_extraction.text import TfidfTransformerfrom sklearn.feature_extraction.text import CountVectorizerfrom sklearn.pipeline import Pipelinefrom sklearn.linear_model import SGDClassifier# Lấy data từ dữ liệu có sẵn ở đây tôi dùng thư viện của VNTC đã tổng hợp từ các trang báo và phân loại sẵn theo thư mục.# Dữ liệu ở https://github.com/duyvuleo/VNTC/train_path=\"data/chap10/Categories_documents/Train/\"test_path=\"data/chap10/Categories_documents/Test/\"data_train=load_files(container_path=train_path,encoding='utf-16')data_test=load_files(container_path=test_path,encoding='utf-16')# Tách dữ liệu và đếm từ sử dụng CountVectorizercount_vectorizer=CountVectorizer()train_tc=count_vectorizer.fit_transform(raw_documents=data_train.data)# Tạo TF-IDF và train nó dựa trên dữ liệu train text counttfidf=TfidfTransformer(use_idf=True)train_tfidf=tfidf.fit_transform(train_tc)# Cía này là tạo bộ phân loại sử dụng Pipelinetext_clf=Pipeline([('vect', CountVectorizer()), ('tfidf', TfidfTransformer(use_idf=True)), ('clf', SGDClassifier(loss='hinge', penalty='l2', alpha=1e-3, random_state=42, verbose=1)),])# Tạo một vài dữ liệu để dự đoáninput_data=['Không có nhiều bất ngờ với những cầu thủ vừa được HLV Park Hang-seo bổ sung trong đợt tập trung thứ hai cho vòng loại World Cup 2022','Nghệ sĩ saxophone Xuân Hiếu mất ở tuổi 47 vào trưa 30/9 tại nhà riêng sau thời gian điều trị ung thư.','Xuất hiện trojan giả mạo bản vá của McAfee','Cuộc sống độc thân của Hiền Thục ở Mỹ','Để sở hữu một làn da sáng mịn, ngoài chế độ dinh dưỡng giàu vitamin và khoáng chất, bạn cần thường xuyên vệ sinh sạch sẽ và và duy trì độ ẩm cần thiết cho da.','Những siêu hệ thống giao thông Trung Quốc','Giáo viên trường tiểu học và THCS bán trú Sơn Bua vượt 3 km đường rừng vào các bản làng ở khu dân cư Nước Mù vận động học sinh đến lớp.','Yoshiyuki Kiuchi (49 tuổi) thường cố tình đâm sầm để gây thương tích cho người vừa đi bộ vừa sử dụng điện thoại.','Kinh doanh quán cà phê không là cách đầu tư nhanh có lãi, phải có vốn mạnh và thật kiên nhẫn.','Show diễn của Quang Hà sau vụ cháy']#Sử dụng thuật toán Multinomial Naive Bayes để training dataclassifier=MultinomialNB().fit(train_tfidf,data_train.target)# Sử dụng pipeline để train data. Chú ý data ở đây là data gốc download không phải là data đã được biến đổitext_clf.fit(data_train.data,data_train.target)#Biến đổi dữ liệu input sử dụng vectorizerinput_tc=count_vectorizer.transform(input_data)#print(input_tc)# Biến đổi dữ liệu sử dụng tfidf để có thể sử dụng với classiferinput_tfidf=tfidf.transform(input_tc)# Dự đoán kết quả sử dụng pipelinepredictions=text_clf.predict(input_data)# dự đoán kết quả đầu ra sử dụng vector đã được biến đổi dưới dạng tf-idf sử dụng MultinomialNB#predictions=classifier.predict(input_tfidf)print(predictions)#Lấy dữ liệu được dán nhãn từ data đã downloadcategories=data_train.target_names# in kết quảfor sent,category in zip(input_data,predictions):print(\"\\nĐoạn văn:\",sent,\"\\nDự đoán thể loại:\",categories[category])\n \u0026nbsp;\nKết quả:\nĐoạn văn: Không có nhiều bất ngờ với những cầu thủ vừa được HLV Park Hang-seo bổ sung trong đợt tập trung thứ hai cho vòng loại World Cup 2022 Dự đoán thể loại: Bong da\n\u0026nbsp;\nĐoạn văn: Nghệ sĩ saxophone Xuân Hiếu mất ở tuổi 47 vào trưa 30/9 tại nhà riêng sau thời gian điều trị ung thư. Dự đoán thể loại: Am nhac\n\u0026nbsp;\nĐoạn văn: Xuất hiện trojan giả mạo bản vá của McAfee Dự đoán thể loại: Hackers va Virus\n\u0026nbsp;\nĐoạn văn: Cuộc sống độc thân của Hiền Thục ở Mỹ Dự đoán thể loại: Am nhac\n\u0026nbsp;\nĐoạn văn: Để sở hữu một làn da sáng mịn, ngoài chế độ dinh dưỡng giàu vitamin và khoáng chất, bạn cần thường xuyên vệ sinh sạch sẽ và và duy trì độ ẩm cần thiết cho da. Dự đoán thể loại: Lam dep\n\u0026nbsp;\nĐoạn văn: Những siêu hệ thống giao thông Trung Quốc Dự đoán thể loại: Kinh doanh quoc te\n\u0026nbsp;\nĐoạn văn: Giáo viên trường tiểu học và THCS bán trú Sơn Bua vượt 3 km đường rừng vào các bản làng ở khu dân cư Nước Mù vận động học sinh đến lớp. Dự đoán thể loại: Giao duc\n\u0026nbsp;\nĐoạn văn: Yoshiyuki Kiuchi (49 tuổi) thường cố tình đâm sầm để gây thương tích cho người vừa đi bộ vừa sử dụng điện thoại. Dự đoán thể loại: San pham tin hoc moi\n\u0026nbsp;\nĐoạn văn: Kinh doanh quán cà phê không là cách đầu tư nhanh có lãi, phải có vốn mạnh và thật kiên nhẫn. Dự đoán thể loại: Chung khoan\n\u0026nbsp;\nĐoạn văn: Show diễn của Quang Hà sau vụ cháy Dự đoán thể loại: San khau dien anh\nNhư bạn có thể thấy bộ phân loại làm việc khá hiệu quả. Sẽ hiệu quả hơn nếu bạn sử dụng dữ liệu train tốt hơn. Khi thay đổi 2 bộ phân loại bạn sẽ thấy phân loại sử dụng Pipeline cho kết quả chính xác hơn # Dự đoán kết quả sử dụng pipelinepredictions=text_clf.predict(input_data)# dự đoán kết quả đầu ra sử dụng vector đã được biến đổi dưới dạng tf-idf sử dụng MultinomialNB#predictions=classifier.predict(input_tfidf)print(predictions)\n \u0026nbsp;\nXây dựng bộ nhận diện giới tính\nBộ nhận diện giới tính là một vấn đề thú vị. Ở đây chúng ta sẽ sử dụng một hàm dánh giá heuristic để xây dựng một vector tính năng (feature vector) và sử dụng nó để dạy (train) một bộ phân loại. Hàm đánh giá heuristic sẽ được sử dụng ở đây là hàm N ký tự cuối cho tên. Ví dụ, nếu tên kết thúc với từ ia , thường là tên của một người phụ nữ vd như Amelia Genelia. Mặt khác nếu tên kết thúc với từ rk nó là tên của đàn ông vd Clark, Mark. Vì thế chúng ta không biết được chính xác số ký tự sẽ sử dụng, chúng ta sẽ thử một vài tham số N và tìm ra câu trả lời tốt nhất.\nimport nltknltk.data.path.append(\"D:\\\\PycharmProjects\\\\AILearn\\\\NLTK\")import randomfrom nltk import NaiveBayesClassifierfrom nltk.classify import accuracy as naccfrom nltk.corpus import names# tạo một hàm để phân tách ký tự cuối N cho từ được nhập vàodef extract_feature(word,N=2):last_n_letters=word[-N:]return {'feature':last_n_letters.lower()}#Tạo hàm main và lấy tên và training nó từ scikit-learn. dữ liệu này gồm tên nam và nữ đã được dán nhãn :if __name__==\"__main__\":male_list=[(name,'male') for name in names.words('male.txt')]female_list=[(name,'female') for name in names.words('female.txt')]data=(male_list+female_list)# Tạo bộ random number để xáo trộn data:random.seed(5)random.shuffle(data)# Tạo một vài tên để sử dụng test:input_names=['Alexander','Danielle','David','Cheryl']# Chia dữ liệu để dùng cho train và test:num_train=int(0.8*len(data))# Chúng ta sẽ sử dụng thuật toán N ký tự cuối như một vector tính năng để dự đoán giới tính. Chúng ta sẽ có một vài tham số để thấy hiệu suất khác nhau. Trường hợp này chúng ta sẽ đi từ 1-\u0026gt;6for i in range(1,6):print(\"Số ký tự cuối:\",i)features=[(extract_feature(n,i),gender) for (n,gender) in data]# phân chia dữ liệu để train và testtrain_data,test_data= features[:num_train],features[num_train:]classifier=NaiveBayesClassifier.train(train_data)# Tính toán độ chính xác của bộ phân loại sử dụng hàm có sẵn trong NLTK:accuracy=round(100*nacc(classifier,test_data),2)print(\"Độ chính xác =\",str(accuracy),'%')# Dự đoán kết quả cho mỗi tên chúng ta đã tạo rafor name in input_names:print(name,\"==\u0026gt;\",classifier.classify(extract_feature(name,i)))\n \u0026nbsp;\nKết quả:\nSố ký tự cuối: 1\nĐộ chính xác = 74.7 %\nAlexander ==\u0026gt; male\nDanielle ==\u0026gt; female\nDavid ==\u0026gt; male\nCheryl ==\u0026gt; male\nSố ký tự cuối: 2\nĐộ chính xác = 78.79 %\nAlexander ==\u0026gt; male\nDanielle ==\u0026gt; female\nDavid ==\u0026gt; male\nCheryl ==\u0026gt; female\nSố ký tự cuối: 3\nĐộ chính xác = 77.22 %\nAlexander ==\u0026gt; male\nDanielle ==\u0026gt; female\nDavid ==\u0026gt; male\nCheryl ==\u0026gt; female\nSố ký tự cuối: 4\nĐộ chính xác = 69.98 %\nAlexander ==\u0026gt; male\nDanielle ==\u0026gt; female\nDavid ==\u0026gt; male\nCheryl ==\u0026gt; female\nSố ký tự cuối: 5\nĐộ chính xác = 64.63 %\nAlexander ==\u0026gt; male\nDanielle ==\u0026gt; female\nDavid ==\u0026gt; male\nCheryl ==\u0026gt; female\n\u0026nbsp;\nĐây là kết quả khi phân loại dữ liệu tên bằng tiếng anh. Mình sẽ xây dựng bộ phân loại tên tiếng việt sau. đm\nXây dựng một bộ phân tích cảm xúc: sentiment analyzer\nPhân tích cảm xúc là quá trình xác định cảm xúc của một đoạn văn bản nhất định. VD, bạn sử dụng nó để xác định xem một đoạn đánh giá phim là tích cực hay tiêu cực ( chán hoặc hay). Đây là một trong những ứng dụng thông dụng nhất của việc xử lý ngôn ngữ. Chúng ta có thể thêm nhiều thể loại dựa trên những vấn đề có trong tay. Kỹ thuật này thường được sử dụng để hiểu được cảm giác của mọi người cảm thấy thế nào về sản phẩm, thương hiệu hoặc một chủ đề. Nó thường được sử dụng để phân tích chiến dịch quảng cáo, các cuộc thăm dò ý kiến, sự kiện truyền thông, đánh giá sản phẩm trên các website thương mại…...Giờ chúng ta hãy xem cách xác định cảm xúc của một đánh giá phim.\nChúng ta sẽ sử dụng bộ phân loại Naïve Bayes .Trước tiên chúng ta cần tách tất cả những từ đặc biệt trong đoạn văn bản. Bộ phân loại NLTK cần dữ liệu này để xắp xếp theo mẫu và có thể sử dụng nó. Khi chúng ta chia dữ liệu văn bản vào trong bộ dữ liệu train, và bộ dữ liệu test, chúng ta sẽ train một bộ phân loại Naïve Bayes để phân loại những đánh giá thành đánh giá tích cực và đánh giá tiêu cực. Những thông tin này rất thú vị bởi vì nó sẽ nói cho chúng ta biết những từ nào sẽ được sử dụng để biểu hiện các phản ứng cảm xúc khác nhau.\nimport nltknltk.data.path.append(\"D:\\\\PycharmProjects\\\\AILearn\\\\NLTK\")from nltk.corpus import movie_reviewsfrom nltk.classify import NaiveBayesClassifierfrom nltk.classify.util import accuracy as nacc# Tạo hàm để xay dựng một dictionary dựa trên những từ được nhập vào và trả lại giá trị:def extract_features(words):return dict((word,True) for word in words)#Tạo hàm main và load dữ liệu những đánh giá phim đã được gắn nhãn:if __name__==\"__main__\":fileids_pos=movie_reviews.fileids('pos')fileids_neg=movie_reviews.fileids('neg')# Tách những features từ những ddanhs giá và dán nhãn nófeatures_pos=[(extract_features(movie_reviews.words(fileids=[f])),'Có vẻ thích') for f in fileids_pos]features_neg = [(extract_features(movie_reviews.words(fileids=[f])), 'Hình như méo thích') for f in fileids_neg]#Tạo tỉ lệ chiathreshold=0.8num_pos=int(threshold*len(features_pos))num_neg=int(threshold*len(features_neg))# Tách các vector đặc trưng để train và testfeatures_train=features_pos[:num_pos]+features_neg[:num_neg]features_test=features_pos[num_pos:]+features_neg[num_neg:]# Sử dụng Naive Bayes để tạo bộ phân loại và tính độ chính xácclassifier=NaiveBayesClassifier.train(features_train)print(\"Độ chính xác của bộ phân loại: \",round(nacc(classifier,features_test)*100,2),\"%\")N=15# In top 15 những từ có giá trị thông tin nhất\"\"\"for i,item in enumerate(classifier.most_informative_features()):print(str(i+1)+'.'+item[0])if i==N-1:break\"\"\"# Tạo một vài review ví dụ sử dụng để testinput_reviews = ['The costumes in this movie were great','I think the story was terrible and the characters were very weak','People say that the director of the movie is amazing','This is such an idiotic movie. I will not recommend it to anyone.']# Tạo vòng lặp để dự đoán từng kết quảfor review in input_reviews:print(\"Đánh giá: \",review)probabilities=classifier.prob_classify(extract_features(review))predict_sentiment=probabilities.max()# in kết quảprint(\"Dự đoán cảm xúc:\",predict_sentiment)# Dự đoán tỉ lệ chính xácprint(\"Độ chính xác\",round(probabilities.prob(predict_sentiment),2))\n \u0026nbsp;\nKết quả:\nĐộ chính xác của bộ phân loại: 73.5 %\nĐánh giá: The costumes in this movie were great\nDự đoán cảm xúc: Có vẻ thích\nĐộ chính xác 0.65\nĐánh giá: I think the story was terrible and the characters were very weak\nDự đoán cảm xúc: Hình như méo thích\nĐộ chính xác 0.74\nĐánh giá: People say that the director of the movie is amazing\nDự đoán cảm xúc: Có vẻ thích\nĐộ chính xác 0.6\nĐánh giá: This is such an idiotic movie. I will not recommend it to anyone.\nDự đoán cảm xúc: Có vẻ thích\nĐộ chính xác 0.57\n\u0026nbsp;\nMô hình chủ đề sử dụng Latent Dirichlet Allocation (Phân bổ LD)\nMô hình chủ đề (Topic Modeling) là quá trình xử lý nhận dạng thành phần trong dữ liệu văn bản trao đổi giữa các chủ đề. Nếu văn bản chứa nhiều chủ đề thì kỹ thuật này có thể sử dụng để nhận dạng và phân chia chúng. Chúng ta làm điều này để khám phá cấu trúc các chủ đề ẩn chứa trong một bộ văn bản.\nMô hình chủ đề giúp chúng ta tổ chức lại tài liệu văn bản một cách tối ưu, và sau đó được sử dụng để phân tích. Một thứ cần chú ý ở đây là thuật toán mô hình chủ đề không cần dữ liệu đã được dán nhãn trước. Nó giống như học không giám sát (unsupervised learning) Nó sẽ tự nhận dạng thành phần trên nó. Với khối lượng dữ liệu văn bản khổng lồ được tạo ra trên internet, mô hình này trở nên quan trọng bởi vì nó giúp chúng ta tóm tắt lại tất cả các dữ liệu, mà nếu không có nó thì mọi thứ trở thành không thể.\nPhân bổ Latent Dirichlet (Latern Dirichlet Allocation) Là một thuật giải mô hình chủ đề. Trong đó khái niệm cơ bản được đưa ra là một đoạn văn bản nhất định là sự kết hợp của nhiều chủ đề. Hãy thử xem một câu như sau: Biểu diễn biểu đồ dữ liệu là một ứng dụng trong phân tích kinh tế. Câu này có nhiều chủ đề như: dữ liệu, kinh tế, phân tích, biểu diễn biểu đồ. Các chủ đề chi tiết này giúp chúng ta nhận dạng được câu này là một tài liệu lớn. Về bản chất, nó là một mô hình phân tích cố găn để nắm bắt các ý tưởng và tạo một mô hình dựa trên nó. Mô hình giả định tài liệu được tạo ra từ một quá trình xử lý ngẫu nhiên dựa trên những chủ đề. Một chủ đề nghĩa là một sự phân phối các từ vựng cố định. Giờ thì xem modeling topic trong python Chúng ta sửu dụng thư viện genism trong phần này. Về cách cài đặt thư viện thì nếu đọc từ đầu chắc các bạn không còn thắc mắc nữa. còn chưa biết thì đọc lại phần cũ (8 hay 9 gì đó).\nimport nltknltk.data.path.append(\"D:\\\\PycharmProjects\\\\AILearn\\\\NLTK\")from nltk.tokenize import RegexpTokenizerfrom nltk.corpus import stopwordsfrom nltk.stem.snowball import SnowballStemmerfrom gensim import models,corpora# Tạo một hàm để load dữ liệu. dữ liệu đầu vào gồm có 10 dòng. mỗi dòng là một câu.def load_data(input_file):input_file = open(input_file, 'r', encoding='utf-8')# Loại bỏ các dònginput_string = input_file.read().splitlines()# Join array lại thành stringinput_string = \" \".join(input_string)import reinput_string = re.split(r\"\\.\", input_string)#input_string = \"\\n\".join(input_string)return input_string# Tạo một hàm để sử lý dữ liệu đầu vào. Bước đầu tiên là phân tách câu (tokenizer)def progcess(input_text):#Regex torkenizertokenizer=RegexpTokenizer(r'\\w+')# Sau đó chúng ta cần biến nó về dạng từ cơ bản (stem word)stemmer = SnowballStemmer('english')# Chúng ta cần loại bỏ những từ \"dừng\" (stopwords) vì nó không cần thiết# File stopword-vietnamese lấy ở đây https://github.com/stopwords/vietnamese-stopwordswith open('data/chap10/vietnamese-stopwords.txt','r',encoding='utf-8') as f:stop_word=f.read().splitlines()stop_words=set(stop_word)#print(stop_word)# Tokenizer inputtokens=tokenizer.tokenize(input_text.lower())#print(tokens)#loại bỏ stopwordtokens=[x for x in tokens if not x in stop_words]#print(tokens)# stem tokentokens_stemmed=[stemmer.stem(x) for x in tokens]return tokens_stemmed# Tạo hàm main để load dữ liệuif __name__==\"__main__\":data=load_data(\"data/chap10/doaremon.txt\")tokens=[progcess(x) for x in data]# Tạo một dict dựa trên những câu đã tokenizerdict_tokens=corpora.Dictionary(tokens)#Tạo một term matrix sử dụng dict token:doc_term_mat=[dict_tokens.doc2bow(token) for token in tokens]num_topics=5ldamodel = models.ldamodel.LdaModel(doc_term_mat,num_topics=num_topics, id2word=dict_tokens, passes=25)num_words = 10print('\\nTop ' + str(num_words) + ' contributing words to each topic:')for item in ldamodel.print_topics(num_topics=num_topics,num_words=num_words):print('\\nTopic', item[0])#list_of_strings = item[1].split(' + ')for text in list_of_strings:weight = text.split('*')[0]word = text.split('*')[1]print(word, '==\u0026gt;', str(round(float(weight) * 100, 2)) + '%')\n \u0026nbsp;\nKết quả:\nTop 10 contributing words to each topic:\n\u0026nbsp;\nTopic 0\n\"phố\" ==\u0026gt; 2.7%\n\"xeko\" ==\u0026gt; 2.5%\n\"kiểu\" ==\u0026gt; 2.2%\n\"cổ\" ==\u0026gt; 2.1%\n\"tập\" ==\u0026gt; 1.7%\n\"giàu\" ==\u0026gt; 1.6%\n\"chaien\" ==\u0026gt; 1.4%\n\"tokyo\" ==\u0026gt; 1.4%\n\"gốc\" ==\u0026gt; 1.4%\n\"dekhi\" ==\u0026gt; 1.4%\n\u0026nbsp;\nTopic 1\n\"dekhi\" ==\u0026gt; 2.3%\n\"xuka\" ==\u0026gt; 1.9%\n\"tầng\" ==\u0026gt; 1.6%\n\"lớp\" ==\u0026gt; 1.6%\n\"học\" ==\u0026gt; 1.2%\n\"cổ\" ==\u0026gt; 1.2%\n\"bé\" ==\u0026gt; 1.2%\n\"đất\" ==\u0026gt; 1.2%\n\"tiền\" ==\u0026gt; 1.2%\n\"phố\" ==\u0026gt; 1.2%\n…… còn mấy topic nữa :D\nĐọc thì có thể hiểu độ liên quan của từ đối với chủ đề nói đến: vd topic 0 : xeko,chaien,dekhi đều giàu nhà phố cổ :D topic1: xuka dekhi tầng lớp có học nhà phố.\nTổng kết.\nTrong chương này chúng ta học về các khái niệm cơ bản trong sử lý ngôn ngữ tự nhiên (Natural Language Process \u0026ndash;NLP) bằng thư viện nltk trong Python.\nChúng ta thảo luận về cách xử lý ngôn ngữ văn bản: 1: tokenization: phân tách câu thành nhiều phần. 2: stemmer: Biến câu trở vê dạng cơ bản sử dụng steamer và lemmatization\n3: stopwords: Loại bỏ những từ không cần thiết.\n3: chunker : Khái quát chủ đề\nChúng ta đã xây dựng một bộ phân loại chủ đề, xắp xếp dữ liệu blab la bla ….\nTrong chương tiếp theo chúng ta sẽ học về cách mô hình dữ liệu tuần tự (modeling sequential data) sử dụng mô hình Hidden Markov.\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n "
},
{
	"uri": "https://bamboofx.github.io/ai-with-python/chapter11/",
	"title": "C11: Sequential Data",
	"tags": [],
	"description": "",
	"content": "PythonAI Chapter1111\nLý luận xác suất cho dữ liệu liên tục\nTrong chương này chúng ta sẽ học về cách xây dựng một mô hình học liên tục. Chúng ta sẽ học cách xử lý dữ liệu chuỗi trong Pandas. Chúng ta sẽ biết được cách chia dữ liệu chuỗi và biểu diễn hoạt động của nó. Chúng ta sẽ thảo luận về cách tách những số liệu thống kê khác nhau từ một dữ liệu chuỗi. Chúng ta sẽ học về mô hình Hidden Markov  và áp dụng nó vào một hệ thống để xây dựng các mô hình. Chúng ta sẽ hiểu cach sử dụng Conditional Random Fields để phân tích trình tự của bảng chữ cái. Chúng ta sẽ thảo luận cách phấn tích dữ liệu chứng khoán sử dụng những kỹ thuật sẽ học:\nQuản lý dữ liệu chuỗi với Pandas Chia dữ liệu chuỗi Các phép tính trên dữ liệu chuỗi Phân tách số liệu thống kê từ dữ liệu chuỗi Tạo dữ liệu sử dụng Hidden Markov Models Xác định trình tự bảng chữ cái cùng với Conditional Random Fields Phân tích thị trường chứng khoán  Hiểu về dữ liệu tuần tự (Squential data)\nTrong thế giới của ML (máy học \u0026ndash; Machine Learning), chúng ta gặp rất nhiều dạng dữ liệu khác nhau như hình ảnh,văn bản, video, … Những dạng dữ liệu này cần những dạng lập mô hình khác nhau. Dữ liệu tuần tự ( sequential data) là dữ liệu trong đó việc quan trọng nhất là được xắp xếp một cách tuần tự (sequential). Dữ liệu chuỗi (time-series data) là một biểu hiện cụ thể của dữ liệu tuần tự.\nVề cơ bản những giá trị được đánh dấu thời gian(time-stamped) được lấy từ những dữ liệu nguồn như: cảm biến, mic, biến động thị trường,… Những dữ liệu chuỗi (time-series) có rất nhiều nét đặc trưng quan trong cần được mô hình hóa theo thứ tự để phân tích dữ liệu hiệu quả hơn.\nCác phép đo chúng ta thường gặp trong dữ liệu chuỗi là: thực hiện trong khoảng thời gian cố định và tương ứng với các thông số được xác định trước. Những phép đo này được xắp xếp trên một khoảng thời gian để lưu trữ, và thứ tự của chúng xuất hiện là rất quan trong. Chúng ta sử dụng những thứ tự này để phân tách chúng từ dữ liệu.\nTrong chương này chúng ta sẽ học cách xây dựng mô hình mô tả dữ liệu chuỗi hoặc trình tự của chúng nói chung. Những mô hình này sử dụng để hiểu các trạng thái của một biến qua thời gian. Sau đó chúng ta sẽ dùng những mô hình này để dự đoán tương lai dựa trên những những trạng thái cũ.\nPhân tích chuỗi dữ liệu được dùng một cách chuyên sâu trong phan tích kinh tế, phân tích dữ liệu cảm biến, nhận diện giọng nói, kinh tế, thời tiết, chế tạo,… Chúng ta sẽ khám phá nhiều tình huống khá nhau khi chúng ta phải đối mặt với việc phân tích dữ liệu chuỗi và xem cách nào để chúng ta xây dựng một bộ giải pháp. Chúng ta sẽ sử dụng một bộ thư viện gọi là Pandas để quản lý tất cả những hoạt động liên quan đến dữ liệu chuỗi. Chúng ta cũng sẽ sử dụng thêm 3 thư viện là hmmlearn và pystruct, cvxopt trong chương này. $pip3 install pandas\n$pip3 install hmmlearn\n$pip3 install pystruct\n$pip3 install cvxopt\n \u0026nbsp;\nXử lý dữ liệu chuỗi với Pandas\nHãy bắt đầu bằng cách xử lý dữ liệu chuỗi bằng Pandas. Trong phần này chúng ta sẽ chuyển dổi một chuỗi số vào trong chuỗi thời gian và biểu diễn nó thành đồ thị. Pandas cho ta một lựa chọn để thêm đánh dấu thời gian,tổ chức dữ liệu, và vận hành hiệu quả trên nó:\nimport numpy as npimport matplotlib.pyplot as pltimport pandas as pd# Tạo hàm để đọc dữ liệu nhập. Tham số index là số cột bên trong dữ liệudef read_data(input_file,index):input_data=np.loadtxt(input_file,delimiter=',')#Tạo một hàm lambda để chuyển đổi từ string thành format ngày tháng trong Pandas:to_date=lambda x,y:str(int(x))+'-'+str(int(y))# Sử dụng lambda để lấy ngày bắt đầu từ dòng đầu tiên trong file inputstart=to_date(input_data[0,0],input_data[0,1])# Thư viện Pandas cần ngày kết thúc để chọn lọc khi chúng ta thực hiện các phép tính, vì thế chúng ta cần tăng ngày cuối ở dòng cuối cùng bằng một tháng:if input_data[-1,1]==12:year=input_data[-1,0]+1month=1else:year=input_data[-1,0]month=input_data[-1,1]+1end=to_date(year,month)#Tạo một list các vị trí cùng với ngày tháng dùng ngày bắt đầu và kết thúc và lặp lại trong một tháng:date_indices=pd.date_range(start,end,freq='M')#Tạo chuỗi dữ liệu liên tục dùng timestampsoutput=pd.Series(input_data[:,index],index=date_indices)return output#Tạo ham main để bắt đầuif __name__==\"__main__\":input_file='data/chap11/data_2D.txt'# Chỉ định số cột có trong dữ liệuindices=[2,3]#Tạo vòng lặp tất cả các cột và đọc dữ liệu ở mỗi cộtfor index in indices:timeseries=read_data(input_file,index)#Biểu diễn dữ liệuplt.figure()timeseries.plot()plt.title(\"Chiều \"+str(index-1))plt.show()\n\u0026nbsp;\nKết quả in ra sẽ gồm 2 bảng ( vì chúng ta sử dụng 2 cột)\nBảng thứ 1 là chiều dữ liệu 1 và bảng thứ 2 là chiều dữ liệu thứ 2\nChia chuỗi dữ liệu\nBây giờ chúng ta đã biết cách xử lý chuỗi dữ liệu, giờ thì phải tách nó ra. Quá trình tách này là quá trình chia dữ liệu khác nhau thành các phần nhỏ khác nhau và phân tích các thông tin liên quan đến nhau. Nó rất hữu dụng khi chúng ta làm việc với bộ dữ liệu chuỗi. Thay vì sử dụng trích xuất mục lục (indeces) chúng ta sẽ dùng timestamp để chia dữ liệu của chúng ta.\nimport matplotlib.pyplot as plt# Sử dụng code của bài trướcfrom timeseries_pandas import read_data# Load dữ liệu ở cột thứ 3 trong bộ tài liệu 2dindex=2data=read_data('data/chap11/data_2D.txt',index)# Tạo năm bắt đầu và kết thúc, sau đó vẽ dữ liệu trong vùng nàystart='2003'end='2011'plt.figure()data[start:end].plot()plt.title(\"Dữ liệu từ năm \"+start+\" tới năm \"+end)# Tạo tháng bắt đầu và tháng kết thúc, vẽ dự liệu trong vùng tháng:start='1988-2'end='2006-7'plt.figure()data[start:end].plot()plt.title(\"Dữ liệu từ tháng \"+start[-1]+\" năm \"+start[:-2]+\" tới tháng \"+end[-1]+\" năm \"+end[:-2])plt.show()\n\u0026nbsp;\nKết quả\n\u0026nbsp;\nTính toán trên dữ liệu chuỗi\nPandas cho phép chúng ta thực hiên các phép toán trên dữ liệu chuỗi và thực hành các phép tính khác như lọc (filtering) và cộng (addition). Bạn có thể đặt vài điều kiện Panda sẽ lọc dữ liệu và trả lại tập con chính xác. Bạn có thể cộng (add) 2 chuỗi biến. Đây là cách mà chúng ta sẽ xây dựng những ứng dụng nhanh hơn mà không phải lặp lại quá trình thực hiện.\nimport matplotlib.pyplot as pltimport pandas as pd# Sử dụng code bài trướcfrom timeseries_pandas import read_datainput_file=\"data/chap11/data_2D.txt\"# Load cột 3 và 4 thành 2 biến khác nhaux1=read_data(input_file,2)x2=read_data(input_file,3)# Tạo 2 khung dữ liệu bằng cách đặt tên cho 2 chiềudata=pd.DataFrame({'dim1':x1,'dim2':x2})# Vẽ dữ liệu bằng cách chỉ định năm bắt đầu và kết thúc:start='1968'end='1975'data[start:end].plot()plt.title('Dữ liệu ban đầu')# Lọc dữ liệu sử dụng điều kiện và vẽ nó ra. Trong trường hợp này chúng ta sẽ lấy dữ liệu ở tất cả các điểm dữ liệu dim1 và nó phải nhỏ hơn 45 và giá trị tại dim2 phải lớn hơn 30:mdata=data[(data['dim1']\u0026lt;45)\u0026amp;(data['dim2']\u0026gt;30)]mdata[start:end].plot()plt.title(\"dim1\u0026lt;45 \u0026amp; dim2 \u0026gt; 30\")# Chúng ta cũng có thể + 2 series trong Pandas. Hãy thử dim1+dim2 bằng ngày bắt đầu và kết thúc:plt.figure()diff=data[start:end]['dim1']+data[start:end]['dim2']diff.plot()plt.title(\"Tổng của dim1 và dim2\")plt.show()\n \u0026nbsp;\nTrích xuất số liệu thống kê từ dữ liệu chuỗi\nĐể trích xuất những phần có ý nghĩa từ chuỗi dữ liệu, chúng ta phải trích xuất các thống kê từ nó. Những số liệu thống kê này có thể là những thứ như các số trung bình (mean), phương sai (variance), số tương quan (correlation), giá trị max … Những số liệu thống kê phải được tính toán trên một cuộn cơ bản sử dụng một window. Chúng ta sử dụng một window được xác định trước về cỡ và giữ những tính toán những thống kê bên trong đó. Khi chúng ta biểu diễn những thống kê theo thời gian, chúng ta sẽ nhìn thấy những phần thông tin riêng biệt. Giờ thì hãy xem các pandas tách những thống kê từ dữ liệu chuỗi theo thời gian:\nimport numpy as npimport matplotlib.pyplot as pltimport pandas as pdfrom timeseries_pandas import read_data# Load cột 3 và cột 4 từ dữ liệu thành 2 biếnx1=read_data('../data/chap11/data_2D.txt',2)x2=read_data(\"../data/chap11/data_2D.txt\",3)#Tạo dataframe và đặt tên để tạo dữ liệu 2 chiều dim1,dim2data=pd.DataFrame({'dim1':x1,'dim2':x2})# Tách lấy giá trị lớn nhất và nhỏ nhất ở mỗi chiềuprint(\"Giá trị lớn nhất ở mỗi chiều\")print(data.max())print(\"Giá trị nhỏ nhất ở mỗi chiều\")print(data.min())# Tách lấy giá trị trung bình của từng chiều và giá trị trung bình ở 12 hàng đầu tiênprint(\"Giá trị trung bình của từng chiều\")print(data.mean())print(\"Giá trị trung bình giữa 2 chiều theo thời gian\")print(data.mean(1)[:12])# Vẽ biểu đồ sử dụng cỡ window là 24:start='1988-2'end='2006-7'data[start:end].rolling(center=False,window=24).mean().plot()plt.title(\"Giá trị trung bình\")#plt.show()# Các hệ số tương quanprint(\"Hệ số tương quan\\n\",data.corr())# Vẽ biểu đồ sử dụng window size = 60plt.figure()plt.title('Hệ số tương quan')data[start:end]['dim1'].rolling(window=60).corr(other=data[start:end]['dim2']).plot()plt.show()\n \u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\nGiá trị lớn nhất ở mỗi chiều\ndim1 99.98\ndim2 99.97\ndtype: float64\nGiá trị nhỏ nhất ở mỗi chiều\ndim1 0.18\ndim2 0.16\ndtype: float64\nGiá trị trung bình của từng chiều\ndim1 49.030541\ndim2 50.983291\ndtype: float64\nGiá trị trung bình giữa 2 chiều theo thời gian\n1900-01-31 85.595\n1900-02-28 75.310\n1900-03-31 27.700\n1900-04-30 44.675\n1900-05-31 31.295\n1900-06-30 44.160\n1900-07-31 67.415\n1900-08-31 56.160\n1900-09-30 51.495\n1900-10-31 61.260\n1900-11-30 30.925\n1900-12-31 30.785\nFreq: M, dtype: float64\nHệ số tương quan\ndim1 dim2\ndim1 1.00000 0.00627\ndim2 0.00627 1.00000\n\u0026nbsp;\n\u0026nbsp;\nTạo dữ liệu sử dụng mô hình Hidden Markov.\nMô hình Hidden Markov(HMM) là một kỹ thuật phân tích mạnh mẽ trong việc phân tích dữ liệu liên tục nối tiếp (chuỗi dữ liệu). Nó giả định rằng hệ thống đã được mô hình là một quá trình xử lý Markov cùng với những trạng thái ẩn. Nó có nghĩa là những hệ thống cơ bản có thể là một trong số những trạng thái đó. Nó duyệt qua tất cả các trạng thái kế tiếp nhau và tạo ra những chuỗi output. Chúng ta có thể chỉ cần quan sát kết quả đầu ra chứ không cần quan tâm đến các trạng thái của chuỗi. Vì thế những trạng thái đó là ẩn (Hidden) đối với chúng ta. Mục đích của chúng ta là mô hình dữ liệu để chúng ta có thể suy luận ra sự biến đổi trạng thái của những dữ liệu không biết.\nĐể hiểu về HMM hãy xem ví dụ một người bán hàng có thể di chuyển ở 3 thành phố để làm công việc của anh ấy: London, Barcelona, New York. NHiệm vụ của anh ấy cần làm là di chuyển trong thời gian ngắn nhất để có hiệu quả nhất trong công việc. Xem xét công việc của anh ấy và lịch trình làm việc, chúng ta có một bộ xác xuất quyết định để đi từ thành phố X-\u0026gt; thành phố Y. Như thông tin được đưa ra ở bên dưới, P(X,Y) là thời gian tạm tính để đi từ X-\u0026gt;Y.\nP(London -\u0026gt; London) = 0.10\nP(London -\u0026gt; Barcelona) = 0.70\nP(London -\u0026gt; NY) = 0.20\nP(Barcelona -\u0026gt; Barcelona) = 0.15\nP(Barcelona -\u0026gt; London) = 0.75\nP(Barcelona -\u0026gt; NY) = 0.10\nP(NY -\u0026gt; NY) = 0.05\nP(NY -\u0026gt; London) = 0.60\nP(NY -\u0026gt; Barcelona) = 0.35\nHãy thử biểu diễn những thông tin này bằng ma trận chuyển tiếp:\nLondon Barcelona NY\nLondon 0.10 0.70 0.20\nBarcelona 0.75 0.15 0.10\nNY 0.60 0.35 0.05\nGIờ chúng ta có tất cả các thông tin, giờ thì tiếp tục tạo báo cáo vấn đề. Người bán hàng này bắt đầu chuyến đi vào thử Ba từ London và anh ấy có một kế hoạch riêng vào thứ Sáu. Nhưng nó sẽ dựa trên ván đề là anh ấy ở đâu. Xác xuất anh ấy sẽ ở Barcelona vào thứ Sáu là bao nhiêu ? Bảng sau sẽ giúp chúng ta đoán đc điều đó.\nNếu chúng ta không có Chuooixx Markov (Markov Chain) để mô hình vấn đề này thì chúng ta sẽ không biết lịch trình di chuyển của anh ấy thế nào. Nhiệm vụ của chúng ta là có thể nói anh ấy có khả năng ở thành phố nào trong một thời gian nhất định. Nếu chúng ta biểu thị ma trận chuyển tiếp bằng thời gian T và ngày hiện tại bởi hàm X(i) thì ta có\nX(i+1)= X(i).T\nTrong trường hợp chúng ta đặt ra, ngày thứ Sáu là ngày sau ngày bắt đầu (thứ Ba) 3 này. Nó có nghĩa là chúng ta phải tính X(i+3).\nPhép tính nhìn giống như sau: X(i+1)=X(i).T X(i+2)=X(i+1).T X(i+3)=X(i+2).T =\u0026gt; về bản chất nó là X(i+3)=X(i)T^3 chúng ta cầ đặt X(i) được cho ở đây X(i)=[0.10 0.70 0.20]  Bước tiếp theo là chúng ta tính khối lập phương ma trận T^3. Có rất nhiều tools để có thể tính online cái này vd : http://matrix.reshish.com/multiplication.php. Sauk hi bạn đã tính toán xong bạn sẽ nhìn thấy kết quả là thứ Năm:\nP(London)=0.31\nP(Barcelona)=0.53\nP(NY)=0.16\nNhư bạn có thể thấy bên trên cơ hội anh ấy có mặt ở Barce là cao nhất (0.53). Điều này cũng có nghĩa về mặt địa lý thì Barce gần London hơn NY.\nđến phần dùng code\nimport datetimeimport numpy as npimport matplotlib.pyplot as pltfrom hmmlearn.hmm import GaussianHMM#Load Data từ file txtdata=np.loadtxt('../data/chap11/data_1D.txt',delimiter=',')# Lấy dữ liệu cột thứ 3 để trainingX=np.column_stack([data[:,2]])# Tạo mô hình phân loại HMM với số components=5 và sử dụng hiệp phương sai theo đường chéohmm=GaussianHMM(n_components=5,covariance_type='diag',n_iter=1000)#Train HMMhmm.fit(X)# In khoảng cách mean và phương sai (variance) cho mỗi component của mô hình HMM:print('Means and Variances:')for i in range(hmm.n_components):print('\\nHidden State',i+1)print('Mean=',round(hmm.means_[i][0],2))print('Variance=',round(np.diag(hmm.covars_[i])[0],2))#Tạo bộ samples 1200 điểm dữ liệu sử dụng mô hình HMM đã tạo và vẽ nó lên đồ thịnum_samples=1200generated_data, _=hmm.sample(num_samples)plt.plot(np.arange(num_samples),generated_data[:,0],c='black')plt.title('Dữ liệu đã tạo')plt.show()\n \u0026nbsp;\nKết quả thu được:\nTerminal:\nMeans and Variances:\n\u0026nbsp;\nHidden State 1\nMean= 8.6\nVariance= 0.26\n\u0026nbsp;\nHidden State 2\nMean= 2.6\nVariance= 0.26\n\u0026nbsp;\nHidden State 3\nMean= 4.6\nVariance= 0.25\n\u0026nbsp;\nHidden State 4\nMean= 0.6\nVariance= 0.25\n\u0026nbsp;\nHidden State 5\nMean= 6.59\nVariance= 0.25\n\u0026nbsp;\nNhận diện trình tự bảng chữ cái cùng với Conditional Random Fields\nConditional Random Fields( CRFs) là mô hình xác xuất thường được sử dụng để phân tích cấu trúc dữ liệu. Chúng ta sử dụng chúng để dán nhãn và phân loại dữ liệu tuần tự ( hoặc liên tục) theo nhiều cách khác nhau. Một thứ chúng ta càn chú ý về CRFs chúng là mô hình phân biệt . Nó tương phản với mô hình Hidden Markov đã nói ở trên, ns sẽ tạo ra những mô hình.\nChúng ta có thể định nghĩa một xác xuất có điều kiện trên một chuỗi có dán nhãn. Chúng ta dùng framework này để xây dựng một mô hình CRF. trong mô hình HMM chúng ta phải tạo điểm phân phối chung trên các chuỗi và các nhãn.\nMột trong những lợi thế của CRF là chúng có điều kiện. Đây không phải là trường hợp sử dụng cùng với HMM. CRFs không giả định bất cứ sự độc lập nào với kết quả đầu ra còn HMM cho rằng đầu ra tại bất kỳ thời điểm nào đều độc lập với kết quả trước đó. HMM cần giả định này để đảm bảo rằng quá trình suy luận hoạt đông theo một cách nào đó. Nhưng giả định này thì không phải lúc nào cũng đúng. trong thực tế dữ liệu được điền phụ thuộc vào thời gian.\nCRFs có xu hướng tốt hơn HMMs ở trong một số ứng dụng như xử lý ngôn ngữ, đoán chữ từ âm thành, công nghệ sinh học … Trong phần này chúng ta sẽ thảo luận về vấn đế sử dụng CRFs để phân tích trình tự của bảng chữ cái.\nHiện tại không cài được lib Pystruct nên bỏ qua phần này :D\nDưới đây là code theo cuốn sách\nimport osimport argparse import stringimport pickle import numpy as npimport matplotlib.pyplot as pltfrom pystruct.datasets import load_lettersfrom pystruct.models import ChainCRF from pystruct.learners import FrankWolfeSSVMdef build_arg_parser():parser = argparse.ArgumentParser(description='Trains a Conditional\\Random Field classifier')parser.add_argument(\"--C\", dest=\"c_val\", required=False, type=float,default=1.0, help='C value to be used for training')return parser# Class to model the CRFclass CRFModel(object):def __init__(self, c_val=1.0):self.clf = FrankWolfeSSVM(model=ChainCRF(), C=c_val, max_iter=50) # Load the training datadef load_data(self):alphabets = load_letters()X = np.array(alphabets['data'])y = np.array(alphabets['labels'])folds = alphabets['folds']return X, y, folds# Train the CRFdef train(self, X_train, y_train):self.clf.fit(X_train, y_train)# Evaluate the accuracy of the CRFdef evaluate(self, X_test, y_test):return self.clf.score(X_test, y_test)# Run the CRF on unknown datadef classify(self, input_data):return self.clf.predict(input_data)[0]# Convert indices to alphabetsdef convert_to_letters(indices):# Create a numpy array of all alphabetsalphabets = np.array(list(string.ascii_lowercase))# Extract the letters based on input indicesoutput = np.take(alphabets, indices)output = ''.join(output)return outputif __name__=='__main__':args = build_arg_parser().parse_args()c_val = args.c_val# Create the CRF modelcrf = CRFModel(c_val)# Load the train and test dataX, y, folds = crf.load_data()X_train, X_test = X[folds == 1], X[folds != 1]y_train, y_test = y[folds == 1], y[folds != 1]# Train the CRF modelprint('\\nTraining the CRF model...')crf.train(X_train, y_train)# Evaluate the accuracyscore = crf.evaluate(X_test, y_test)print('\\nAccuracy score =', str(round(score*100, 2)) + '%')indices = range(3000, len(y_test), 200)for index in indices:print(\"\\nOriginal =\", convert_to_letters(y_test[index]))predicted = crf.classify([X_test[index]])print(\"Predicted =\", convert_to_letters(predicted))\n \u0026nbsp;\nPhân tích thị trường chứng khoán (stock market)\nChúng ta sẽ phân tích dữ liệu thị trường chứng khoán trong phần này sử dụng mô hình Hidden Markov. Đây là một ví dụ mà trong đó dữ liệu đã được xắp xếp và đánh dấu thời gian. Chúng ta sẽ sử dụng cơ sở dữ liệu có sẵn trong thư viện matplotlib. Dữ liệu này chứa giá trị một vài cổ phiếu của một số công ty khác nhau qua nhiều năm. Mô hình Hidden Markov sẽ tạo ra những mô hình có thể phân tích dữ liệu chuỗi và phân tích những cấu trúc cơ bản. Chúng ta sẽ sử dụng mô hình này để phân tích sự biến đổi giá cổ phiểu và tạo kết quả đầu ra.\nMình không tìm hiểu về stock market nên không hiểu lắm. bỏ qua\nVì matplotlib đã deprecated nên sử dụng panda để load từ file csvLấy file csv từ đây https://github.com/matplotlib/mpl_finance\n\u0026nbsp;\nTổng kết\nTrong chương này chúng ta đã học cách để xây dựng mô hình học tập theo trình tự. Học về cách quản lý chuỗi dữ liệu theo thời gian bằng Pandas. Chúng ta đã thảo luận về cách chia chuỗi dự liệu theo thời gian và thực hiện các hoạt động trên đó vân vân và mây mây.\nTrong chương tiếp theo chúng ta sẽ học về cách nhận dạng giọng nói và xây dựng một hệ thống tự động nhận dạng giọng nói\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n "
},
{
	"uri": "https://bamboofx.github.io/ai-with-python/chapter12/",
	"title": "C12: Speech Recognizer",
	"tags": [],
	"description": "",
	"content": "PythonAI Chapter1212\nXây dựng hệ thống nhận dạng giọng nói(Speech Recognizer)\n\u0026nbsp;\nTrong chương này chúng ta sẽ học về nhận dạng giọng nói. Chúng ta sẽ thảo luận làm thế nào để làm việc cùng với những tín hiệu giọng nói và hiểu cách làm sao để biểu diễn những song âm này. Bằng cách tận dụng những kỹ thuật khác nhau để xử lý tín hiệu giọng nói, Chúng ta sẽ học cách làm sao để xây dựng một hệ thống nhận dạng giọng nói.\nCác phần bạn sẽ học trong phần này:\nXử lý tín hiệu giọng nói Biểu diễn các tín hiệu âm thanh Chuyển đổi tín hiệu âm thanh thành dữ liệu chuỗi liên tục Tạo tín hiệu âm thanh Tổng hợp âm Trích xuất các tính năng giọng nói Nhận dạng những từ được nói  Xử lý các tín hiệu giọng nói\nNhận dạng giọng nói là quá trình xử lý để có thể hiểu được những từ được nói bởi con người. Những tín hiệu giọng nói được lấy bằng cách sử dụng mic và hệ thống cố gắng hiểu được những từ đã nhận. Nhận dạng giọng nói được sử dụng rộng rãi trong những lĩnh vực tương tác giữa người và máy, smartphones, dịch, hệ thống sinh trắc, bảo mật …..\nĐiều quan trọng là chúng ta phải hiểu bản chất của tín hiệu ngôn ngữ trước khi chúng ta phân tích chúng. Những tín hiệu nhận được là hỗn hợp phức tạp của các tín hiệu khác nhau. Có rất nhiều âm vực của tín hiệu lời nói nên làm nó càng thêm phức tạp. Những thứ đó có thể hiểu là tâm trạng của người nói, ngữ điệu, ngôn ngữ, tiếng ồn ….\nVì thế việc xác định một bộ quy tắc để phân tích những tín hiệu lời nó là khá khó khan. Nhưng con người có thể hiểu được điều đó một cách tự nhiên. Chúng ta dường như làm điều đó một cách rất dễ dàng. Nếu chúng ta muốn những cố máy làm những việc tương tự như thế chúng ta cần phải giúp chúng hiểu được lời nói như chúng ta đã làm.\nNghiên cứu từ vụng trên những khía cạnh khác nhau và ứng dụng của giọng nói, giống như là hiểu những từ được đánh vần, nhận dạng ai là người nói, nhận dạng tâm trạng, xác định dấu câu ( hay ngữ điệu của câu)… Trong chương này chúng ta sẽ chỉ tập trung vào cách hiểu nhận dạng những từ được nói ra. Nhận dạng giọng nói là một bước quan trọng trong lĩnh vực tương tác giữa máy tính và con người, chúng cần nói cho chúng ta bằng ngôn ngữ tự nhiên. Đây là lý do tự động nhận diện giọng nói là trung tâm chú ý cho nhiều lĩnh vực nghiên cứu trong những năm vừa qua. Biểu diễn tín hiệu âm thanh\nTrước tiên chúng ta hãy học cách biểu diễn một tín hiệu audio. Chúng ta sẽ học về cách đọc một tín hiệu audio từ 1 file và làm việc cùng với nó. Việc này sẽ giúp chúng ta hiểu cấu trúc của 1 tín hiệu audio. Khi chúng ta ghi lại âm thanh từ microphone, chúng ta đang lấy các mẫu tín hiệu âm thanh và số hóa chúng. Các tín hiệu âm thanh được biểu diễn theo dạng sóng và có giá trị liên tục, và chúng ta không thể lưu trữ chúng như thế được. Chúng ta cần lấy mẫu tín hiệu tần số và chuyển đổi nó thành dạng số rời rạc.\nThông dụng nhất, tín hiệu lời nói được lấy mẫu ở tần số 44,100Hz. Nó có nghĩa là mỗi giây tín hiệu tiếng nói được chia thành 44.100 phần và giá trị tại mỗi điểm thời gian này được lưu trữ ở file đầu ra. Chúng ta lưu giá trị của tín hiệu âm thanh sau 1/44,100 giây. Trong phần này chúng ta lấy mẫu tín hiệu của âm thanh là 44,100Hz. Bằng cách chọn tần số mãu cao, nó sẽ xuất hiện như tín hiệu âm thanh liên tục khi con người nghe nó. GIờ thì tử biểu diễn một tín hiệu âm thanh.\nimport numpy as npimport matplotlib.pyplot as pltfrom scipy.io import wavfile# đọc file audio đã tạo sẵn. bạn có thể dùng window recoder hoặc recoder của điện thoại để lưu file dưới dạng wave# Sử dụng hàm wavefile.read. Nó sẽ trả về 2 giá trị.# sampling frequency - tần số lấy mẫu# audio signal- tín hiệu âm thanhsampling_freq,signal=wavfile.read(\"../data/chap12/abc.wav\")# In ra terminal dạng của tín hiệu, định dạng dữ liệu, và thời gian của tín hiệu âm thanhprint(\"Dạng tín hiệu: \",signal.shape)print(\"Định dạng dữ liệu (datatype): \",signal.dtype)print(\"Thời gian của tín hiệu âm thanh: \",round(signal.shape[0]/float(sampling_freq),2),\" giây\")# Đơn giản lại tín hiệu âm thanhsignal=signal/np.power(3,5)# Tách lấy khoảng 500 giá trị từ tín hiệu âm thanh để biểu diễn đồ thị (tại vì tín hiệu âm thanh của mình đoạn đầu là không có nên tín hiệu sẽ thẳng ----- nên mình sẽ lấy từ giây thứ 0.1 :signal=signal[24500:25000]# Xây dựng cột thời giantime_axis=1000*np.arange(0,len(signal),1)/float(sampling_freq)# Biểu diễn tín hiệu âm thanhplt.plot(time_axis,signal,color='black')plt.xlabel('Thời gian(mili giây)')plt.ylabel('Biên độ')plt.title('Biểu diễn tín hiệu âm thanh')plt.show()\n \u0026nbsp;\nKết quả vẽ đồ thị\nKết quả đồ thị này ở mỗi file âm thanh hay đoạn thời gian khác nhau sẽ có hình dạng khác nhau\nkết quả ở Terminal :\nDạng tín hiệu: (196608,)\nĐịnh dạng dữ liệu (datatype): int16\nThời gian của tín hiệu âm thanh: 4.1 giây\nVì mình sử dụng file có tần số lấy mẫu là (48,000Hz) nên dạng tín hiệu( Signal Type) là 196608\n\u0026nbsp;\nChuyển đổi tín hiệu âm thanh thành tần số liên tục\nTrong quá trình tìm hiểu và phân tích tín hiệu ân thanh chúng ta cần phải hiểu những điều cơ bản về tần số. Nó sẽ giúp chúng ta hiểu rõ hơn làm cách nào để tách những thông tin có ích từ tín hiệu âm thanh. Tín hiệu âm thanh bao gồm một hỗn hợp các sóng hình sin có nhiều tần số, pha, biên độ khác nhau .\nNếu chúng ta khảo sát về các thành phần của tần số, Chúng ta có thể nhận ra được rất nhiều nét đặc trưng riêng. Mỗi tín hiệu âm thanh đều có nét đặc trưng riêng bởi sự phân bổ của nó trong 1 dải tần số. Để chuyển đổi tín hiệu dải thời gian thành một dải tần số, chúng ta cần sử dụng những phép toán going như Fourier Transform. Nếu bạn cần tìm hiểu thêm về Fourier Transform http://www.thefouriertransform.com/ .\nLet's code:\nimport numpy as npimport matplotlib.pyplot as pltfrom scipy.io import wavfile# Tải file phát âm từ apple hoặc bạn có thể dùng file tao.wav bằng tiếng việtsampling_freq,signal=wavfile.read('../data/chap12/tao.wav')# Normalize tín hiệu âmsignal=signal/np.power(2,15)# Lấy độ dài của signal và chia nửa lấy 1/2len_signal=len(signal)len_half=np.ceil((len_signal+1)/2.0).astype(np.int)# áp dụng biến đổi Fourier Transformfreq_signal=np.fft.fft(signal)# Giảm tần số tín hiệu và lấy bình phương của nófreq_signal=abs(freq_signal[0:len_half])/len_signalfreq_signal**=2# chia tín hiệu biến đổi thành chẵn và lẻlen_fts=len(freq_signal)if len_signal%2:freq_signal[1:len_fts]*=2else:freq_signal[1:len_fts-1]*=2# tính độ lớn của tín hiệu đo bằng dB (decibel)signal_power=10*np.log10(freq_signal)# Tạo trục x đây là trục tần số được đo bằng kHz (kilog hertz):x_axis=np.arange(0,len_half,1)*(sampling_freq/len_signal)/1000.0# Vẽ đồ thịplt.figure()plt.plot(x_axis,signal_power,color='red')plt.title('Biến đổi tín hiệu âm thanh')plt.xlabel('Tần số (kHz)')plt.ylabel('Độ lớn (dB)')plt.show()\n \u0026nbsp;\nKết quả thu được:\n\u0026nbsp;\nTạo tín hiệu âm thanh\nGiờ chúng ta đã biết cách tín hiệu âm thanh làm việc thế nào, giờ thì hãy xem làm cách nào để chúng ta tạo ra một đoạn tín hiệu ?:o? Chúng ta có thể sử dụng NumPy để tạo ra một vài tín hiệu âm thanh. Khi đã biết âm thanh là một hỗn hợp hình sin, chúng ta có thể dựa vào đó để tạo ra một tín hiệu âm thanh dựa vào một vài tham số.\nimport numpy as npimport matplotlib.pyplot as pltfrom scipy.io.wavfile import write# Định nghĩa tên cho file đầu raoutput_file='generated_audio.wav'# Xác định một vài tham số như độ dài, tần số mẫu, tần số cao độ, giá trị thấp nhất và giá trị cao nhấtduration=4 # Đây là tính giâysampling_freq=44100# Tính theo Hztone_freq=784min_val=-4*np.pimax_val=4*np.pi#Tạo tín hiệu âm thanh sử dụng những tham số trênt=np.linspace(min_val,max_val,duration*sampling_freq)signal=np.sin(2*np.pi*tone_freq*t)# Tạo thêm độ nhiễu cho âm thanh (lên xuoogns 1 tẹo)noise=1001.1*np.random.rand(duration*sampling_freq)signal+=noise# Giảm cường độ âm thanh và kéo dãn tín hiệuscaling_factor=np.power(2,15)-1signal_normalize=signal/np.max(np.abs(signal))signal_scaled=np.int16(signal_normalize*scaling_factor)# Ghi tín hiệu âm thanh thành filewrite(output_file,sampling_freq,signal_scaled)# vẽ tín hiệu âm thanh thành biểu đồ# Chỉ lấy 200 giá trị đầu tiên để biểu diễn cho đẹpsignal=signal[:200]time_axis=1000*np.arange(0,len(signal),1)/float(sampling_freq) #Trục Xplt.figure()plt.plot(time_axis,signal,color='red')plt.xlabel('Time milisecond')plt.ylabel('Biên độ')plt.title('Âm thanh được tạo bằng code')plt.show()\n \u0026nbsp;\nKết quả:\n\u0026nbsp;\n\u0026nbsp;\nTổng hợp âm để tạo nhạc\nỞ phần trước chúng ta đã biết cách tạo ra âm thanh, nhưng nó là âm thanh mono chỉ có 1 cao độ duy nhất và điều đó không có ích. đó là do chỉ có một tần số duy nhất suốt toàn bộ tín hiệu. Giờ thì ta vẫn sử dụng nguyên tắc đó nhưng tổng hợp lại bằng cách ghép các tone (cao độ âm thanh) khác nhau dể tạo ra âm nhạc. Chúng ta sẽ sử dụng các tone thông thường như ( tone La (A), Đô(C),Sol(G),Fa(F)… để tạo ra nhạc. Để biết thêm về các tần số áp dụng cho các âm thanh trên bạn nên xem thêm ở đây : https://pages.mtu.edu/~suits/notefreqs.html\nimport jsonimport numpy as npimport matplotlib.pyplot as pltfrom scipy.io.wavfile import write# Tạo một hàm để tạo ra một tone (cao độ node âm thanh) dựa trên những tham số như tần số, thời gian, biên độ, tần số hzdef tone_synthesizer(freq,duration,amplitude=1.0,sampling_freq=44100):time_axis=np.linspace(0,duration,int(duration*sampling_freq))# Xây dựng cấu trúc tín hiệu âm thanh sử dụng những tham số được chỉ định và trả về giá trị dưới dạng npint16signal=amplitude*np.sin(2*np.pi*freq*time_axis)return signal.astype(np.int16)if __name__==\"__main__\":file_tone_single='fa.wav'#input(\"Tên file muốn lưu\")file_tone_sequence='generated_tone_sequence.wav'# Chúng ta sử dụng file chứa tone map chứa tên nốt (tone node - La Si Do) để tạo tần số âm thanhmapping_file='../data/chap12/tone_mapping.json'# Tải file vào lấy tonemap từ filewith open(mapping_file,'r') as f:tone_map=json.loads(f.read())#Tạo nốt Fa (F) trong 3 giây:tone_name='D'duration=0.5amplitude=12000sampling_freq=44100# lấy tần số tương ứng từ maptone_freq=tone_map[tone_name]# Tạo tone sử dụng hàm tổng hợp đã tạo bên trênsynthesized_tone=tone_synthesizer(tone_freq,duration,amplitude,sampling_freq)write(file_tone_single,sampling_freq,synthesized_tone)# Thử tạo một chuỗi nốt nhạc để làm cho âm thanh hay hơn.#Tạo chuỗi nốt âm thanh với thời gian tương ứngtone_squence=[('G',0.4),('G',0.4),('G',0.4),('C',0.6),('G',0.4),('G',0.4),('G',0.4),('G',0.4),('C',0.8),('D',0.4)]# Xây dựng âm thanh dựa trên chuỗi nốt âm thanhsignal=np.array([])for item in tone_squence:tone_name=item[0]freq=tone_map[tone_name]duration=item[1]print(freq, duration, amplitude, sampling_freq)synthesized_tone=tone_synthesizer(freq,duration,amplitude,sampling_freq)signal=np.append(signal,synthesized_tone)write(file_tone_sequence,sampling_freq,signal.astype(np.int16))#signal=signal[2000:5000]plt.figure()time_axis = 1000 * np.arange(0, len(signal), 1) / float(sampling_freq) # Trục Xplt.plot(time_axis,signal)plt.show()\n \u0026nbsp;\nTrích xuất các tính năng giọng nói\nChúng ta đã học cách chuyển từ tín hiệu thời gian thành tần số. Tính năng tần số được dùng rộng rãi trong tất cả các hệ thống nhận dạng giọng nói. Những khái niệm chúng ta đã thảo luận trước đây đã một phần giới thiệu về ý tưởng này, nhưng trên thực tế tính tần số (frequency) có một chút phức tạp hơn. Mỗi lần chúng ta chuyển đồi từ tín hiệu thành tần số, chúng ta cần chắc chắn chúng sử dụng được dưới dạng một vector tính năng. Đây là lúc chúng ta cần biết thêm về khái niệm Mel Frequency Cepstral Coefficients(MFCCs). MFCC là một tiện ích được sử dụng để phân tích tần số từ một tín hiệu âm thanh.\nĐể phân tách một tần số từ một tín hiệu âm thanh, MFCC đầu tiên sẽ tách độ lớn của dải âm thanh. Nó sẽ dùng những bộ lọc và một biến đổi cos rời rạc (discrete cosine transform-DCT) để phân tách những vector tính năng tần số. Nếu bạn cảm thấy muốn đọc thêm về MFCC bạn có thể xem trên link sau: http://practicalcryptography.com/miscellaneous/machine-learning/guide-mel-frequency-cepstral-coefficients-mfccs/\nChúng ta sẽ sử dụng một package gọi làpython_speech_features để phân tách MFCC. package này có thể download tại đây : https://python-speech-features.readthedocs.io/en/latest/\nimport numpy as npimport matplotlib.pyplot as pltfrom scipy.io import wavfilefrom features import mfcc,logfbank# Load wave filesampling_freq,signal=wavfile.read('../data/chap12/apple01.wav')# Lấy 10,000 mẫu đầu tiên trong signal để phân tíchsignal=signal[:10000]# dùng hàm mfcc để phân tích MFCCfeatures_mfcc=mfcc(signal,sampling_freq)# In tham số MFCC ra terminal:print('MFCC:\\nSố lượng ô =',features_mfcc.shape[0])print('Độ lớn của mỗi features =',features_mfcc.shape[1])#Vẽ các tính năng (features) MFCCfeatures_mfcc=features_mfcc.Tplt.matshow(features_mfcc)plt.title('MFCC')#Phân tách các bộ lọcfeatures_fb=logfbank(signal,sampling_freq)print('Bộ lọc:\\nSố lượng ô: =',features_fb.shape[0])print('Độ lớn của mỗi features =',features_fb.shape[1])#Vẽ lên biểu đồfeatures_fb=features_fb.Tplt.matshow(features_fb)plt.title('Filter Bank')plt.show()\n \u0026nbsp;\nTerminal:\nMFCC:\nSố lượng ô = 33\nĐộ lớn của mỗi features = 13\nBộ lọc:\nSố lượng ô: = 33\nĐộ lớn của mỗi features = 26\n\u0026nbsp;\nNhận dạng từ trong tín hiệu âm thanh\nGiờ thì chúng ta đã học hầu hết các kỹ thuật để phân tích tín hiệu âm thanh, giờ thì hãy đối đầu với việc chúng ta phải nhận dạng được những từ được nói ở trong đó. Hệ thống nhận dạng giọng nói lấy tín hiệu âm thanh như là tín hiệu đầu vào và nhận dạng từ được nói ở tín hiệu đầu ra. Chúng ta sẽ dùng mô hình Hidden Markov (HMMs) để làm nhiệm vụ này.\nNhư chúng ta đã thảo luận ở chương trước, HMMs là mô hình rất tốt để phân tích dữ liệu có tần suất liên tục. Một tín hiệu âm thanh là một tín hiệu liên tục, nó cũng được hiểu là một dữ liệu chuỗi ( dữ liệu tần suất liên tục theo thời gian). Giả định các đàu ra được tạo ra bởi hệ thống trải qua một loạt các trạng thái ẩn (hidden states). Nhiệm vụ của chúng ta là tìm ra những trạng thái ân này và định dạng những từ xuất hiện trong tín hiệu âm thanh. Nếu bạn muốn đào sâu thêm hãy tìm hiểu ở đây : https://hmmlearn.readthedocs.io/en/latest/\nChúng ta đã sử dụng hmmlearn ở chương trước nên bạn không cần phải cài nhưng nếu bạn nhảy từ đâu đó vào chương này thì hãy xem lại cách cài đặt.\nĐể train hệ thống nhận dạng giọng nói, chúng ta cần một bộ dữ liệu âm thanh cho mỗi từ. bạn có thể sử dụng bộ dữ liệu âm thanh của hmmlearn tại đây : https://code.google.com/archive/p/hmm-speech-recognition/downloads\nBộ dữ liệu này gồm 7 từ khác nhau. mỗi từ này được chia vào các folder riêng biệt và mỗi folder này chứa 15 file âm thanh để đọc từ đó một cách khác nhau. Chúng ta sẽ sử dụng 14 file để train và 1 file để test trong mỗi folder. Chú ý, ở đây là một một bộ dữ liệu rất nhỏ, trong thực tế bạn sẽ phải sử dụng một bộ thư viện khổng lồ để có thể xây dựng một hệ thống nhận dạng giọng nói. Chúng ta sẽ sử dụng bộ dữ liệu này để tạo ra một hệ thống nhận dạng giọng nói cơ bản với những từ được tạo.\nTrước tiên chúng ta sẽ xây dựng một mô hình HMM cho mỗi từ. Chúng ta sẽ lưu những mô hình này để làm tài liệu tham khảo. Khi chúng ta muốn nhận dạng một từ không biết trong một file âm thanh, chúng ta sẽ cho nó chạy thử qua tất cả các mô hình và chọn mô hình cho điểm số cao nhất. Giờ thì bắt tay vào code nào:\nimport osimport argparseimport warningsimport numpy as npfrom scipy.io import wavfilefrom hmmlearn import hmmfrom features import mfcc# Tạo class để train sử dụng HMM:class ModelHMM(object):def __init__(self,num_components=4,num_iter=1000):self.n_iter=num_iterself.n_components=num_componentsself.cov_type='diag'self.model_names='GaussianHMM'# Tạo biến làm nơi chúng ta sẽ lưu những model của từng từself.models=[]self.model=hmm.GaussianHMM(n_components=self.n_components,covariance_type=self.cov_type,n_iter=self.n_iter)#Tạo hàm để train modeldef train(self,training_data):np.seterr(all='ignore')cur_model=self.model.fit(training_data)self.models.append(cur_model)#Tạo một hàm để tính toán điểm số cho dữ liệu đầu vào:def compute_score(self,input_data):return self.model.score(input_data)#Tạo một hàm để xây dựng một model cho mỗi từ trong dữ liệu trainingdef build_models(input_folder):speech_models=[]# phân tích dữ liệu thư mục input:for dir_name in os.listdir(input_folder):#Lấy tên của sub folersubfolder=os.path.join(input_folder,dir_name)if not os.path.isdir(subfolder):continue# Lấy nhãnlabel=subfolder[subfolder.rfind('\\\\')+1:]# Tạo biến X để lưu dữ liệu trainX=np.array([])# Tạo list file sử dụng để traintraining_files=[x for x in os.listdir(subfolder) if x.endswith('.wav')][:-1]# Tạo vòng lặp tới khi train xong và xây dựng được modelsfor mfilename in training_files:file_path=os.path.join(subfolder,mfilename)# Lấy tín hiệu (signal) âm thanh từ file hiện tạisampling_freq,signal=wavfile.read(file_path)# Tách các MFCC features#print(len(signal),sampling_freq)with warnings.catch_warnings():warnings.simplefilter('ignore')features_mfcc = mfcc(signal, sampling_freq)if len(X)==0:X=features_mfccelse:X=np.append(X,features_mfcc,axis=0)model=ModelHMM()model.train(X)speech_models.append((model,label))model=Nonereturn speech_models# Tạo hàm để chạy thử nghiệm treen dữ liệu test:def run_test(tes_files):# Phân loại dữu liệu inputfor test_file in tes_files:sampling_freq,signal=wavfile.read(test_file)with warnings.catch_warnings():warnings.simplefilter('ignore')feature_mfcc=mfcc(signal,sampling_freq)#Tạo số điểm max_score ở mức âm vô cùng và nhãn dự đoánmax_score=-float('inf')predicted_label=Nonefor item in speech_models:model,label=itemscore=model.compute_score(feature_mfcc)if score\u0026gt;max_score:# Chọn điểm tại mức điểm lớn nhất hiện tại trong số tất cả modelmax_score=scorepredicted_label=labelstart_index=test_file.find('\\\\')+1end_index=test_file.rfind('\\\\')#print(test_files)original_label=test_file[start_index:end_index]print('Tên gốc:',original_label)print('Tên dự đoán: ',predicted_label)#Tạo hàm mainif __name__=='__main__':input_folder=input('datafolder')speech_models=build_models(input_folder)# Chúng ta đã để lại 1 file để test trong mỗi folder. giờ thì ta sử dụng file đó để tính độ chính xác của modeltest_files=[]for root,dirs,files in os.walk(input_folder):for filename in(x for x in files if '15' in x):filepath=os.path.join(root,filename)test_files.append(filepath)run_test(test_files)\n \u0026nbsp;\nKết quả đầu ra:\ndatafolder../data/chap12/speech_audio\nTên gốc: apple\nTên dự đoán: apple\nTên gốc: banana\nTên dự đoán: banana\nTên gốc: kiwi\nTên dự đoán: kiwi\nTên gốc: lime\nTên dự đoán: lime\nTên gốc: orange\nTên dự đoán: orange\nTên gốc: peach\nTên dự đoán: peach\nTên gốc: pineapple\nTên dự đoán: pineapple\nNhư bạn đã thấy mô hình dự đoán khá chính xác.\nTổng kết\nVậy là chúng ta kết thúc chương 12 về nhận dạng giọng nói. Điểm cần chú ý trong chương này là xử lý tín hiệu âm thanh , tổng hợp âm thanh và sử dụng mô hình MFFC để train một hệ thống tự động nhận dạng giọng nói cơ bản.\nTrong chương tiếp theo chúng t aasex học về nhận diện vật thể và theo dõi nó.\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n "
},
{
	"uri": "https://bamboofx.github.io/ai-with-python/chapter13/",
	"title": "C13: Object Detection and Tracking",
	"tags": [],
	"description": "",
	"content": "PythonAI Chapter1313\nObject Detection and Tracking\nNhận diện và theo dõi vật thể\n\u0026nbsp;\nTrong chương này chúng ta sẽ học về nhận diện vật thể và theo dõi chuyển động của nó. CHúng ta sẽ bắt đầu bằng cách cài đặt thư viện OpenCV, đây là một thư viện rất thông dụng cho công nghệmáy nhìn (computer vision). Chúng ta sẽ thảo luận về sự khác biệt giữa các khung hình để có thể phát hiện các vật thể chuyển động trong video. Chúng ta sẽ học về cách theo đõi các vật thể bằng cách sử dụng không gian màu sắc . Chúng ta sẽ hiểu cách sử dụng loại bỏ neenf để theo dõi vật thể. Chúng ta sẽ xây dựng một bộ theo dõi vật thể động bằng cách sử dụng thuật toán CAMShift. Chúng ta sẽ học cách làm thể nào để xây dựng một bộ theo dõi ánh sang. Chúng ta sẽ thảo luận về phát hiện khuôn mặt và các khái niệm liên quan khác giống như Haar cascades và hình ảnh tích hợp (integral images). Chúng ta sẽ dùng những kỹ thuật đó để tổng hợp lên bộ theo dõi mắt .\nCác phần chúng ta sẽ học trong chương này:\nCài đặt OpenCV Phân biệt khung hình (Frame differencing) Theo dõi vật thể sử dụng không gian màu(colorspaces) Theo dõi vật thể sử dụng cách loại bỏ nền Xây dựng một bộ theo dõi động dùng thuật toán CAMShift Theo dõi vật thể với optical flow Nhận diên khuôn mặt Sử dụng Haar cascades để theo dõi vật thể Sử dụng tổng hợp hình ảnh để phân tách tính năng Phát hiện và theo dõi mắt  \u0026nbsp;\nCài đặt OpenCV\nchúng ta sẽ sử dụng thư viện OpenCV trong chương này. Bạn có thể đọc thêm về nó tại trang http://opencv.org. Bạn phải cài thư viện này trước khi bắt đầu chuong này. Đây là trangg để install openCV 3,4 chạy cùng với Python 3 trên các hệ điều hành khác nhau\nWindows: https://solarianprogrammer.com/2016/09/17/install-opencv-3-with-python-3-on-windows/ Ubuntu: https://www.pyimagesearch.com/2015/07/20/install-opencv-3-0-and-python-3-4-on-ubuntu Mac: https://www.pyimagesearch.com/2015/06/29/install-opencv-3-0-and-python-3-4-on-osx  Phân biệt giữa các khung hình\nPhân biệt các khung hình là một kỹ thuật cơ bản nhất được sử dụng để nhận dạng giữa các vật thể trong một video. Khi chúng ta nhìn vào một video, những khác biệt giữa các khung hình liên tiếp được chụp lại cho chúng ta rất nhiều thông tin. Hãy xem bằng cách nào chúng ta có thể lấy những điểm khác nhau giữa các khung hình và hiển thị những điểm khác biệt đó. Code ở phần này yêu cầu máy bạn phải có webcam. nếu không bạn phải có 1 video để chơi cùng nó ( cuốn sách yêu cầu có webcam mà máy tao méo có nên tao chế thêm ớ).\nimport cv2import os.path as path#Tạo hàm để tính toán khác biệt của các khung hình. Bắt đầu bằng cách tính toán sự khác nhau giữa khung hình hiện tại và khung hình kế tiếpdef frame_dif(prev_frame,cur_frame,next_frame):diff_frames_1=cv2.absdiff(next_frame,cur_frame)#Tính toán sự khác nhau giữa khung hình hiện tại và khung hình trước đódiff_frames_2=cv2.absdiff(cur_frame,prev_frame)#sử dụng phép tính toán trên bit (bitwise) của openCV để tính toán sự khác nhau giữa các frames và trả lại giá trị đóreturn cv2.bitwise_and(diff_frames_1,diff_frames_2)#Tạo hàm để lấy khung hình hiện tại từ video.def get_frame(cap:cv2.VideoCapture,scaling_factor):try:_,frame=cap.read()# thu nhỏ khung hìnhframe=cv2.resize(frame,None,fx=scaling_factor,fy=scaling_factor,interpolation=cv2.INTER_AREA)# Chuyển đổi frame sang màu xámgray=cv2.cvtColor(frame,cv2.COLOR_RGBA2GRAY)print(gray)except:gray=Nonereturn gray#Tạo hàm main để lấy videoif __name__==\"__main__\":cap=cv2.VideoCapture(path.join(\"../data/chap13/congai.mp4\"));scaling_factor=1#Lấy khung hình hiện tại current frame, khung hình kế tiếp và khung hình trước (prev_frame,next frame)prev_frame=get_frame(cap,scaling_factor)cur_frame=get_frame(cap,scaling_factor)next_frame=get_frame(cap,scaling_factor)# Tạo vòng lặp tới khi kết thúc videowhile cap.isOpened():# đọc khung hình biến đầu tiên là giá trị boolean retval trả về True khi có thể đọc được videoret,frame=cap.read()print(ret)if ret:cv2.imshow('Theo dõi chuyển động',frame_dif(prev_frame,cur_frame,next_frame))#Cập nhật frameprev_frame=cur_framecur_frame=next_framenext_frame=get_frame(cap,scaling_factor)#Tạo waitkey để break (27 = keycode escape)key=cv2.waitKey(100)if key==27:breakelse:break# khi hết vòng lặp cần phải đóng video và destroy windowcap.release()cv2.destroyAllWindows()\n\u0026nbsp;\nNếu bạn làm đúng video sẽ hiện lên có dạng như sau:\n\u0026nbsp;\n\u0026nbsp;\nTheo dõi vật thể dựa vào màu sắc\nThông tin lấy được từ việc nhận diện khác biệt giữa các khung hình rất hữ dụng, nhưng chúng ta sẽ không thể xây dựng một bộ theo dõi với nó. Những thông tin này khác nhiễu và nó không thực sự theo dõi một vật thể hoàn toàn. Để xây dựng một bộ theo dõi vật thể chúng ta cần biết được nét đặc trưng của mỗi vật thể và sử dụng nó để theo dõi chính xác hơn. Một hình ảnh có thể có nhiều màu sắc khác nhau. Màu RGB là cơ bản nhất trong những màu không gian cơ bản, nhưng nó không giúp chúng ta nhiều trong việc theo dõi vật thể. Vì thế chúng ta sẽ sử dụng màu HSV. Nó là một mã màu không gian mô phỏng gần với mắt con người nhìn thấy nhất. Bạn có thể đọc thêm về màu HSV ở trang này : https://en.wikipedia.org/wiki/HSL_and_HSV. Chúng ta có thể chuyển đổi những khung hình lấy được từ màu RGB và chuyển nó thành HSV, sau đó sử dụng ngưỡng màu ( color thresholding ) để theo dõi bất cứ vật thể nào. Chúng ta cần chú ý sự phân phối màu sắc của vật thể để chúng ta có thể chọn ngưỡng (thresholding) thích hợp.\nimport cv2import numpy as np# Lấy hàm get_frame từ code cũ#from frame_differencing import get_frame,movie_path#Tạo hàm để lấy khung hìnhdef get_frame(cap:cv2.VideoCapture,scaling_factor):try:_, frame = cap.read()# thu nhỏ khung hìnhframe = cv2.resize(frame, None, fx=scaling_factor, fy=scaling_factor, interpolation=cv2.INTER_AREA)return frameexcept:gray = Nonereturn gray# Tạo hàm mainif __name__==\"__main__\":#Lấy video từ filecap=cv2.VideoCapture(\"../data/chap13/congai.mp4\")scaling_factor=0.5# Tạo vong lặpwhile cap.isOpened():frame=get_frame(cap,scaling_factor)#Chuyển mã màu sử dụng hàm convert của openCVhsv=cv2.cvtColor(frame,cv2.COLOR_BGR2HSV)# Tạo màu gần dúng với màu da của da ngườilower=np.array([0,70,60])upper=np.array([50,150,255])#Tạo ngưỡng màu trong HSV để tạo lớp maskmask=cv2.inRange(hsv,lower,upper)# Tính toán sự khác nhau giữa 2 khung hình sử dụng mask và thuật toán bitwise_and cảu openCVimg_out=cv2.bitwise_and(frame,frame,mask=mask)# sử dụng median blurring để làm đẹp hìnhimg_blurring=cv2.medianBlur(img_out,5)# Hiển thị hình ảnhcv2.imshow(\"Input\",frame)cv2.imshow(\"Output\",img_blurring)# Tạo wait key để chờk=cv2.waitKey(10)if k==27:breakcap.release()cv2.destroyAllWindows()\n \u0026nbsp;\n\u0026nbsp;\nTheo dõi vật thể sử dụng tách nền (background subtraction)\nTách nền là một kỹ thuật nhận diện hình nền trong một video và sau đó sử dụng nền đó để nhận dạng di chuyển của một vật thể. Kỹ thuật này sử dụng rất nhiều trong việc nén video cũng như kiểm soát nó. Thực iện việc này cũng được hiểu như dạng nhận dạng chuyển động trong một khung tĩnh. Thuật toán làm việc cơ bản là nhận diện nền (background), xây dựng một mô hình trên đó (build a model), và dựa vào đó để tách lấy vật thể tại khung hình hiện tại.\nBước chính ở đây là xây dựng một mô hình của nền. Nó không giống như là phân biệt khung hình khác nhau bởi chúng ta không có những khung hình liên tiếp. Chúng ta thực sự xây dựng một hình nền và liên tục cập nhật nó, dùng một thuật toán thích hợp có thể điều chỉnh. Đây là lý do vì sao nó thực hiện tốt hơn nhiều so với phân biệt khung hình.\nimport cv2import numpy as np# Lấy hàm getframe của phần trướcfrom object_tracking_withcolor import get_frame#Tạo hàm mainif __name__==\"__main__\":cap=cv2.VideoCapture(\"../data/chap13/congai.mp4\")# Tạo object background subtractor lấy từ OpenCVbg_sub=cv2.createBackgroundSubtractorMOG2()# Tạo một lịch sử hình ảnh để họchistory=100# Tạo một số của những khung hình trước để học, yếu tố này kiểm soát việc tần suất học của thuật toán.# Tần suất học là tần suất mà mô hình của bạn sẽ học về hình nền. Giá tị cao đồng nghĩa với việc tần suất học chậm# Bạn có thể thay đổi giá trị để xem sự khác biệt của việc tách nền.learning_rate=1.0/history# Tạo vòng lặpwhile cap.isOpened():frame=get_frame(cap,0.5)# Tính toán mask sử dụng object tách nền đã định nghĩa ở trênmask=bg_sub.apply(frame,learningRate=learning_rate)# Mask ở đây là dạng màu xám chúng ta cần chuyển nó lại thành dạng RGBmask=cv2.cvtColor(mask,cv2.COLOR_GRAY2BGR)# Hiển thị kết quảcv2.imshow(\"Input\",frame)cv2.imshow(\"Output\",mask\u0026amp;frame)k=cv2.waitKey(10)if k==27:breakcap.release()cv2.destroyAllWindows()\n \u0026nbsp;\nXây dựng bộ nhận diện chuyển động sử dụng thuật toán CAMShift\nTheo dõi khoảng không gian màu giúp chúng ta có thể theo dõi những vật thể có màu, nhưng chúng ta phải định nghĩa theo dõi màu nào trước. Nó có vẻ có khá nhiều hạn chế. Giờ thì hãy xem làm cách nào chúng ta có thể chọn một vật thể trong một video và sau đó bộ theo dõi tự động sẽ theo dõi vật thể đó. Đây là lúc chúng ta sử dụng thuật toán CAMShift, nó có nghĩa là sự thay đổi trung bình liên tục (Continuously Adaptive Mean Shift). Về cơ bản đây là một dạng của thuật toán Mean Shift.\nĐể hiểu về CAMShift chúng ta cần phải biết Mean Shift làm việc thế nào. Giả sử một vùng được đưa ra trong một khung hình , chúng ta chọn vùng này bởi vì nó chứa vật thể chúng ta muốn theo dõi. Vì chúng ta cần theo dõi vật thể này nên chúng ta phải vẽ một khung xung quanh nó ( cái này được gọi là \"vùng chọn\"-region interest). Chúng ta muốn bộ theo dõi vật thể của chúng ta theo dõi vật thể này di chuyển thế nào trong video của chúng ta. Để làm việc này, chúng ta chọn một bộ dữ liệu gồm nhiều điểm dựa trên biểu đồ màu (color histogram) của vùng đó và sau đó tính toán điểm trung tâm. Nếu vị trí của điểm trung tâm tại trọng tâm của vùng đó thì ta biết hiện tại nó không di chuyển. Nhưng nếu vị trí trung tâm đó không phải là trọng tâm của vùng chọn thì có nghĩa là nó đã di chuyển. Điều đó có nghĩa là chúng ta cần di chuyển khung theo điểm trung tâm, sao cho trọng tâm của khung cũng là trọng tâm của vùng chọn. Chúng ta tiếp tục làm điều này theo nhiều khung hình và theo dõi vật thể theo thời gian thực. Vì thế thuật toán này được gọi Mean Shift bởi vì số mean ( điểm trọng tâm) liên tục di chuyển và chúng ta theo dõi vật thể sử dụng nó.\nGiờ chúng ta hãy xem cách sử dụng CAMShift. Một vấn đề xảy ra với Mean Shiift là cỡ của vật thể không được thay đổi theo thời gian. Khi chúng ta vẽ một khung giới hạn nó sẽ giữ nguyên không thay đổi hình dạng dù ở gần hay xa camera, vì thế chúng ta cần phải sử dụng CAMShift bởi vì nó có thể đáp ứng việc thay đổi kích cỡ của khung giới hạn dựa trên kích cỡ của vật thể.\nĐọc thêm về meanshift CamShift tại trang chủ của openCV: https://docs.opencv.org/4.1.2/d7/d00/tutorial_meanshift.html\n\u0026nbsp;\nimport cv2import numpy as np#Tạo một class để quản lý tất cả các hàm sử dụng để theo dõi vật thể:class ObjectTracker(object):def __init__(self,scaling_factor=0.5):#Tạo object cap để lấy video sourceself.cap=cv2.VideoCapture(\"../data/chap13/sample.mp4\")self.startTrack=False# Lấy khung hình hiện tại_,self.frame=self.cap.read()self.scaling_factor=scaling_factor# Resize khung hình dựa trên scaling_factorself.frame=cv2.resize(self.frame,None,fx=self.scaling_factor,fy=self.scaling_factor,interpolation=cv2.INTER_AREA)# Tạo một cửa sổ để hiển thị khung hìnhcv2.namedWindow(\"Object Tracker\")# Tạo hàm callback để lẩy dữ liệu hoạt động của mousecv2.setMouseCallback(\"Object Tracker\",self.mouse_event)# Tạo các biến cho class để theo dõi select của mouseself.selection=Noneself.drag_start=Noneself.tracking_state=0#Tạo hàm lấy event của mousedef mouse_event(self,event,x,y,flags,param):# Chuyển đổi giá trị tọa độ x,y của mouse thành dạng 16 bitx,y=np.int16([x,y])# khi chúng ta bấm chuột có nghĩa là bắt đầu lựa chọn khung để chọn vật thể#if event==cv2.EVENT_LBUTTONUP:if event==cv2.EVENT_LBUTTONDOWN:self.drag_start=(x,y)self.tracking_state=0if self.drag_start:if flags\u0026amp;cv2.EVENT_FLAG_LBUTTON:#Lấy chiều dài,rộng của khung hình hiện tạih,w=self.frame.shape[:2]# Tính điểm tọa độ X,Y của khung hìnhxi,yi=self.drag_start# Tính toán vị trí nhỏ nhất và lớn nhất của vị trí kéo chuột dựa trên trục tọa độ để tính vùng chọnx0,y0=np.maximum(0,np.minimum([xi,yi],[x,y]))x1,y1=np.minimum([w,h],np.maximum([xi,yi],[x,y]))self.selection=Noneif x1-x0\u0026gt;0 and y1-y0\u0026gt;0:self.selection=(x0,y0,x1,y1)# Sao khi hoàn tất tính toán vị trí của vùng chọn thì đặt flag và chúng ta bắt đầu theo dõi vật thể dựa theo vùng chọnelse:self.drag_start=Noneif self.selection is not None:self.tracking_state=1# Tạo hàm theo dõi vật thể:def start_tracking(self):while True:_,self.frame=self.cap.read()self.frame=cv2.resize(self.frame,None,fx=self.scaling_factor,fy=self.scaling_factor,interpolation=cv2.INTER_AREA)# Tạo một bản sao cho khung hình hiện tại chúng ta sẽ sử dụng nó sauvis=self.frame.copy()# Chuyển đổi màu từ RGB thành HSVhsv=cv2.cvtColor(self.frame,cv2.COLOR_BGR2HSV)# Tạo mask dựa trên ngưỡng màu xác định trướclower=np.array((0.,0.,0.))upper=np.array((255.,255.,255.))mask=cv2.inRange(hsv,lowerb=lower,upperb=upper)#Kiểm tra xem người dùng đã chọn vùng chọn chưa : ?if self.selection:x0,y0,x1,y1=self.selection# tạo vùng chọnself.track_window=(x0,y0,x1-x0,y1-y0)# Tạo vùng chọn từ hình HSV như là một mask. Tính toán biểu đồ màu dựa trên vùng đóhsv_roi=hsv[y0:y1,x0:x1]mask_roi=mask[y0:y1,x0:x1]histogram=cv2.calcHist([hsv_roi],[0],mask_roi,[16],[0,180])cv2.normalize(histogram,histogram,0,255,cv2.NORM_MINMAX)self.hist=histogram.reshape(-1)vis_roi=vis[y0:y1,x0:x1]# Tính toán sử dụng bitwise_not của vùng chọncv2.bitwise_not(vis_roi,vis_roi)vis[mask==0]=0if self.tracking_state==1:self.selection=Nonehsv_backproj=cv2.calcBackProject([hsv],[0],self.hist,[0,180],1)hsv_backproj\u0026amp;=mask# Chấm dứt theo dõiterm_crit=(cv2.TERM_CRITERIA_EPS|cv2.TermCriteria_COUNT,10,1)#Áp dụng thuật toán CamShifttrack_box,self.track_window=cv2.CamShift(hsv_backproj,self.track_window,term_crit)# Vẽ hình ellip xung quanh vật theo dõi và hiển thị nó lên một cửa sốcv2.ellipse(vis,track_box,(0,255,0),thickness=2)cv2.imshow(\"Object Tracker\",vis)# Tạo escapek=cv2.waitKey(30)if k==27:breakself.cap.release()cv2.destroyAllWindows()# Tạo hàm main để chạyif __name__==\"__main__\":ob=ObjectTracker(1)ob.start_tracking()\n \u0026nbsp;\nHình bên trái phía dưới là hình khi ta chọn màu sẽ được chuyển đổi thành màu âm bản. Hình bên phải là khi detect object :D. Nói chung là detect theo màu của object khá là không chính xác. Muốn detect object một cách chính xác thì còn phải thêm nhiều thứ chứ không chỉ đơn giản làm theo cách trên .\n\u0026nbsp;\nTheo dõi vật thể với Optical Flow\nOptical flow: Dự đoán chuyển động hình ảnh ở mỗi pixel từ các biến đổi độ sáng của hình ảnh theo thời gian.( Vì nó dài dòng cũng ko biết dịch sang tiếng Đông Lào thế nào nên để TA luôn)\nOptical flow là một kỹ thuật rất hữu dụng được sử sụng nhiều trong Computer vision. Nó dùng những thay đổi điểm ảnh để theo dõi vật thể. Những điểm ảnh đặc trưng riêng được theo dõi liên tục qua những khung hình video. Khi chúng ta tìm ra một bộ điểm vector trong một khung hình, chúng ta sẽ tính toán sự thay đổi của những vector đó và theo dõi nó. Chúng ta sẽ biểu diễn di chuyển của những điểm vector đó thông qua các khung hình. Những vector đó được hiểu là những vector chuyển động. Có rất nhiều cách để biểu diễn được optical fllow, nhưng cách của Lucas-Kanade có lẽ là một trong những thứ thông dụng nhất. Các bạn có thẻ đọc thêm về nó ở đây: http://cseweb.ucsd.edu/classes/sp02/cse252/lucaskanade81.pdf\nBước đầu tiên là lựa chọn những điểm vector tính năng từ khung hình hiện tại. Với mỗi điểm đặc trưng được lựa chọn là một bộ điểm 3x3 (tính theo pixel) được tao ra với điểm đặc trưng được đặt ở trung tâm. Chúng ta giả sử rằng tất cả các điểm trong mỗi bộ điểm 3x3 có sự di chuyển giống nhau. Kích thước của window có thể thay đổi dựa theo biến đổi khung hình.\nTrong mỗi bộ điểm, chúng ta sẽ tìm điểm giống nhau trong khung hình trước. Chúng ta sẽ chọn những điểm giống nhau nhất dựa trên một bộ số liệu. Diện tích tìm kiếm lớn hơn 3x3 bởi vì chúng ta tìm kiếm một loạt các bộ điểm 3x3 khác nhau để có được một bộ điểm gần nhất với bộ điểm hiện tại. Một khi chúng ta đạt được điều này đường dẫn từ điểm trung tâm của bộ điểm hiện tại và điểm trung tâm bộ điểm được tìm thấy sẽ trở thành vector chuyển động. Chúng ta làm điều tương tự để tính toán các vector chuyển động cho tất cả các bộ điểm khác.\nimport cv2import numpy as np# Tạo một hàm bắt đầu để theo dõi vật thể sự dụng optical flow.def start_tracking():cap=cv2.VideoCapture(\"../data/chap13/sample.mp4\")scaling_factor=0.5#Tạo số frame sẽ theo dõi và số frames bỏ quanum_frames_to_track=5num_frames_jump=2# Tạo biến đường theo dõi và frame index:tracking_paths=[]frame_index=0#tạo các tham số dùng để theo dõi sử dụng thuật toán calcOpticalFlowPyrLK của openCV#* window size: kích cỡ ô theo dõi#* maxLevel#* (temrmination criteria)tracking_params=dict(winSize=(6,6),maxLevel=5,criteria=(cv2.TERM_CRITERIA_EPS|cv2.TERM_CRITERIA_COUNT,10,0.03))# Tạo vòng Lặpwhile True:# Lấy khung hình_,frame=cap.read()# Resizeframe=cv2.resize(frame,None,fx=scaling_factor,fy=scaling_factor,interpolation=cv2.INTER_AREA)# đổi màuframe_gray=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)#Tạo một copy của khung hìnhoutput_img=frame.copy()# Kiểm tra xem độ dài của path đã tạo có lớn hơn 0 thì lấy hình ảnhif len(tracking_paths)\u0026gt;0:prev_img,current_img=prev_gray,frame_gray# Tạo các điểm đặc trưng:feature_points_0=np.float32([tp[-1] for tp in tracking_paths]).reshape(-1,1,2)# Tính optical flow dựa trên những khung hình trước và khung hình hiện tại sử dụng các điểm đặc trưng và các tham số đã tạofeature_points_1,_,_=cv2.calcOpticalFlowPyrLK(prev_img,current_img,feature_points_0,None,**tracking_params)# Tạo một hàm tính ngược optical flowfeature_points_0_rev,_,_=cv2.calcOpticalFlowPyrLK(current_img,prev_img,feature_points_1,None,**tracking_params)# Tính toán điểm khác nhau giữa 2 phép tính optical flow lấy số dươngdiff_feature_points=abs(feature_points_1-feature_points_0_rev).reshape(-1,2).max(-1)# Lấy những điểm có giá trị tốtgood_points=diff_feature_points\u0026lt;1#Tạo tracking path mớinew_tracking_paths=[]# Lặp mảng good_points để vẽ hình lên đófor tp,(x,y),good_points_flag in zip(tracking_paths,feature_points_1.reshape(-1,2),good_points):if not good_points_flag:continuetp.append((x,y))if len(tp)\u0026gt;num_frames_to_track:del tp[0]new_tracking_paths.append(tp)# Vẽ hìnhcv2.circle(output_img,(x,y),1,(0,255,0),-1)# cập nhật tracking pathtracking_paths=new_tracking_paths# Vẽ đường thằng nối các điểmcv2.polylines(output_img,[np.int32(tp) for tp in tracking_paths],False,(0,150,0))if not frame_index%num_frames_jump:# Tạo mask và vẽ vòng trònmask=np.zeros_like(frame_gray)mask[:]=255for x,y in[np.int32(tp[-1]) for tp in tracking_paths]:cv2.circle(mask,(x,y),6,0,-1)# Sử dụng hàm có sẵn của openCV đỉ tính các điểm đặc trưngfeature_points=cv2.goodFeaturesToTrack(frame_gray,mask=mask,maxCorners=100,qualityLevel=0.3,minDistance=5,blockSize=3)# Nếu có những điểm đặc trưng giá trị tốt thì thêm nó vào tracking pathif feature_points is not None:for m,n in np.float32(feature_points).reshape(-1,2):tracking_paths.append([(m,n)])frame_index+=1prev_gray=frame_gray# Hiển thị hình ảnhcv2.imshow(\"Optical Flow\", output_img)# Tạo waitKeyk=cv2.waitKey(1)if k==27:breakif __name__ == '__main__':start_tracking()cv2.destroyAllWindows()\u0026nbsp;\n \u0026nbsp;\n\u0026nbsp;\nPhát hiện và theo dõi khuôn mặt\nPhát hiện khuôn mặt là phát hiện vị trí của một khuôn mặt trong một khung hình. Nó thường gây nhầm lẫn với nhận diện gương mặt \u0026ndash; đây là quá trình xử lý để nhận diện khuôn mặt đó thuộc về người nào. Một hệ thống sinh trắc học (biometric system) thường sử dụng cả nhận diện khuôn mặt và nhận dạng khuôn mặt để thực hiện nhiệm vụ. Nó sử dụng phát hiện khuôn mặt để tìm vị trí của khuôn mặt và sau đó dùng nhận dạng khuôn mặt để nhận dạng người đó là ai. Trong phần này chúng ta sẽ học cách tự động phát hiện vị trí của khuôn mặt trong một đoạn video và theo dõi khuôn mặt đó.\nSử dụng Haar cascades để nhận dạng vật thể\nChúng ta sẽ sử dụng Haar cascades để phát hiện khuôn mặt trong một video. Haar cascades có nghĩa là một bộ tầng(cascades) phân loại dựa trên đặc tính Haar. Paul viola và Michael Jones lần đầu tiên giới thiệu về phương pháp phát hiện đối tượng trong tài liệu nghiên cứu của họ vào năm 2001. Bạn có thể xem tài liệu đó ở đây: https://www.cs.cmu.edu/~efros/courses/LBMV07/Papers/viola-cvpr-01.pdf Trong báo cáo của họ, họ mô tả một kỹ thuật Machine Learning hiệu quả có thể sử dụng để phát hiện bất cứ vật thể nào.\nHọ sử dụng các tầng(cascade) của bộ phân loại đơn giản. Các tầng (cascades) này được xếp chồng lên để tổng hợp xây dựng một vài bộ phân loại hiệu quả với độ chính xác cao. Chúng ta sử dụng nó vì nó giúp chúng ta bỏ qua quy trình xây dựng bộ phân loại và lại có độ chính xác cao. Xây dựng một bộ phân loại mạnh mẽ như thế là một quá trình tính toán phức tạp.\nHãy xem xét một vài ví dụ mà chúng ta phải phát hiện một số vật thể như quả bóng đá . Để xây dựng một bộ phát hiện chúng ta cần một hế thống có thể học quả bóng nhìn giống như thế nào. Chúng ta cần train hệ thống đó sử dụng rất nhiều hình ảnh về quả bóng đa. và chúng ta cũng cần rất nhiều hình ảnh không chứa quả bóng luôn :D. Nó sẽ giúp hệ thống học điểm khác nhau giữa các vật thể.\nNếu chúng ta xây dựng một mô hình chính xác cao thì sẽ rất phức tạp. Vì thế chúng ta sẽ không thể tốn quá nhiều thời gian vì nó. nếu quá đơn giản thì hệ thống sẽ không chính xác. Sự đánh dổi giữa tốc độ và độ chính xác thường xuyên gặp phải trong thế giới của Machine Learning. Phương pháp của Viola-Jones khắc phục vấn đề này bằng cách xây dựng một bộ phân loại đơn giản. Những phân loại này sau đó được xếp thành các tầng (cascade) để tạo thành một bộ phân loại thống nhất, mạnh mẽ và chính xác.\nHãy xem thử áp dụng vào phát hiện khuôn mặt. Để xây dựng một hệ thống ML để phát hiện khuôn mặt, trước hết trúng ta cần xây dựng một bộ phân tách đặc điểm. Các thuật toán ML sẽ sử dụng các đặc điểm này để hiểu khuôn mặt trông như thế nào. Đây là lúc chúng ta sử dụng đặc điểm của Haar( Haar features). Chúng đơn giản chỉ là tổng kết tóm tắt đơn giản và sự khác biệt của các phần trên khung hình (hoặc bức ảnh). Những đặc điểm của Haar thật sự dễ dành để tính toán. Để làm nó dễ dàng và phát triển, chúng ta cần làm việc này ở nhiều cỡ hình ảnh khác nhau. Nếu bạn muốn học thêm về Haar features thì có thể xem tiếp ở đây : https://www.cs.ubc.ca/~lowe/425/slides/13-ViolaJones.pdf\nMỗi một đặc điểm được chọn ra, chúng ta cho nó vào các tầng (cascades) tăng cường của bộ phân loại. Chúng ta sẽ kiểm tra các vùng hình chữ nhật khác nhau và loại bỏ những vùng không chứa khuôn mặt. Nó sẽ giúp chúng ta tìm được câu trả lời nhanh hơn. Để làm việc tính toán các đặc điểm nhanh hơn, họ sử dụng một phương pháp được gọi là tích hợp hình ảnh (integral images)\nSử dụng tích hợp hình ảnh để rút ra đặc điểm\nĐể tính toán các đặc điểm của Haar, chúng ta phải tính toán diện tích và khác biệt của rất nhiều khung hình nhỏ trong một bức ảnh. Chúng ta cần tính những diện tích và khác tại nhiều mức đo khác nhau.\nXem hình dưới đây\nNếu chúng ta muốn tính diện tích hình chữ nhật ABCD trong hình trên, chúng ta không cần phải biết từng pixel của hình. Giả sử ta có OP là diện tích hình chữ nhật lớn với điểm P tại góc dưới cùng bên phải . Để tích diện tích của hình chữ nhật ABCD chúng ta có thể sử dụng công thức sau: ABCD=OC-(OB+OD-OA)\nCó điều gì đặc biệt trong công thức này ? Nếu bạn chú ý thì bạn có thể thấy chúng ta không phải lặp lại bất cứ ddieuf gì hoặc tính toán tại bất kỳ diện tích hình chữ nhật nào. Tất cả giá trị bên bên tay phải đã được tính bởi vì chúng đã được tính trong các phần trước. Chúng ta sử dụng chúng một cách trực tiếp để tính toán diện tích hình chữ nhật được đặt ra.\nGiờ thì code bộ nhận diện khuôn mặt:\nimport cv2# Load dữ liệu Haar cascade xmlface_cascade=cv2.CascadeClassifier('../data/chap13/haarcascade/haarcascade_frontalface_default.xml')# Kiểm tra xem file xml đã đc load hay chưaif face_cascade.empty():raise IOError('Méo có file')#Khởi tạo các thông số videocap=cv2.VideoCapture('../data/chap13/sample.mp4')scale_factor=1# Tạo vòng lặp để lấy videowhile True:_,frame=cap.read()frame=cv2.resize(frame,None,fx=scale_factor,fy=scale_factor,interpolation=cv2.INTER_AREA)# đổi khung hình thành màu xámgray=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)# Chạy hàm nhận diện khuôn mặt dựa trên khung hình màu xámface_rects=face_cascade.detectMultiScale(gray,1.3,5)#Tạo vòng lặp để vẽ hình chữ nhật lên trên khuôn mặt đã phát hiệnfor (x,y,w,h) in face_rects:cv2.rectangle(frame,(x,y),(x+w,y+h),(0,255.0,0),2)#Hiển thị hình ảnh videocv2.imshow(\"Face detect\",frame)k=cv2.waitKey(30)if k==27:breakcap.release()cv2.destroyAllWindows()\u0026nbsp;\n \u0026nbsp;\n\u0026nbsp;\nNhận dạng mắt và theo dõi\nGiống như những gì ta đã làm bên trên thôi ngoài ra thêm một cascade eye xml\nimport cv2# Load dữ liệu Haar cascade xmlface_cascade=cv2.CascadeClassifier('../data/chap13/haarcascade/haarcascade_frontalface_default.xml')# Load dữ liệu eye xmleyes_cascade=cv2.CascadeClassifier('../data/chap13/haarcascade/haarcascade_eye_tree_eyeglasses.xml')# Kiểm tra xem file xml face đã đc load hay chưaif face_cascade.empty():raise IOError('Méo có file')# Kiểm tra xem file xml face đã đc load hay chưaif eyes_cascade.empty():raise IOError('Méo có file eye xml')#Khởi tạo các thông số videocap=cv2.VideoCapture('../data/chap13/congai.mp4')scale_factor=1# Tạo vòng lặp để lấy videowhile True:_,frame=cap.read()frame=cv2.resize(frame,None,fx=scale_factor,fy=scale_factor,interpolation=cv2.INTER_AREA)# đổi khung hình thành màu xámgray=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)# Chạy hàm nhận diện khuôn mặt dựa trên khung hình màu xámface_rects=face_cascade.detectMultiScale(gray,1.1,3)#Tạo vòng lặp để vẽ hình chữ nhật lên trên khuôn mặt đã phát hiệnfor (x,y,w,h) in face_rects:cv2.rectangle(frame,(x,y),(x+w,y+h),(0,255.0,0),2)# Dựa vào vị trí của face để lấy vị trí của mắt dựa trên face - ĐỔi màu face thành gray luônface_gray=gray[y:y+h,x:x+w]# Lấy mặt có màuface_color=frame[y:y+h,x:x+w]#TÌm vị trí của mắteyes=eyes_cascade.detectMultiScale(face_gray)# Vẽ vòng tròn quanh mắtfor (x_eye,y_eye,w_eye,h_eye) in eyes:center=(int(x_eye+w_eye/2),int(y_eye+h_eye/2))radius=int(0.3*(w_eye+h_eye))color=(255,0,0)cv2.circle(face_color,center=center,radius=radius,color=color,thickness=2)#Hiển thị hình ảnh videocv2.imshow(\"Face detect\",frame)k=cv2.waitKey(20)if k==27:breakcap.release()cv2.destroyAllWindows()\u0026nbsp;\n \u0026nbsp;\nTổng kết:\nTrong chương này chúng ta đã tìm hiểu về object detection và tracking nó sử dụng bộ thư viện OpenCV.\nTrong chương tiếp theo chúng ta sẽ thảo luận về mạng lưới thần kinh nhân tạo :D (nghe tởm vãi lái ) artificial neural network và sử dụng những kỹ thuật đó để xây dựng một bộ nhận diện chữ viết (OCR \u0026ndash; Optical character recognition)\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n\u0026nbsp;\n "
},
{
	"uri": "https://bamboofx.github.io/",
	"title": "Site",
	"tags": [],
	"description": "",
	"content": "##\ncode  i am who i am, where am i in the world ?  \r\r "
},
{
	"uri": "https://bamboofx.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://bamboofx.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]